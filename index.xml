<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Malware Hell</title><link>https://c3rb3r3u5d3d53c.github.io/</link><description>Welcome to Malware Hell</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>c3rb3r3u5d3d53c@gmail.com (c3rb3r3u5d3d53c)</managingEditor><webMaster>c3rb3r3u5d3d53c@gmail.com (c3rb3r3u5d3d53c)</webMaster><lastBuildDate>Fri, 28 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://c3rb3r3u5d3d53c.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Skid OSINT Investigation</title><link>https://c3rb3r3u5d3d53c.github.io/2023/07/skid/</link><pubDate>Fri, 28 Jul 2023 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2023/07/skid/</guid><description>Skid OSINT Investigation On Going very WIP!
Starting with AlexxModder I received a Discord message from the user AlexxModder asking me to be a developer for their malware project. I was not inclined to participate but rather to analyze the code. So I stated Send me the source code, I then received the source code as ELYSc2.zip (Figure placeholder).
Figure placeholder: AlexModder sending botnet source code.
Next, we investigated the next persona, which was obtained by visiting the site https[:]//elys.</description></item><item><title>Destroying GuLoader</title><link>https://c3rb3r3u5d3d53c.github.io/2023/07/guloader/</link><pubDate>Sat, 15 Jul 2023 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2023/07/guloader/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/6109352356a6f48152ca36c67c075f930a14ee7608f40fcf1094c10d345e5335.png" referrerpolicy="no-referrer">
&lt;/div>Situation Placeholder
Key Points Placeholder Placeholder Placeholder Placeholder
Infection Chain Malspam Email The infection chain starts with an email purporting to be from Dr. S. Susan (PHD) University of Trento, a university recognized for its significant accomplishments in teaching, research. The email contains the attachment Richiesta Preventivo: (ISGB) 7788EU - 0605ITA.pdf.zip. The attached file has a double extension likely in an attempt of have the user open the file once downloaded (Figure placeholder).</description></item><item><title>Malware Questions and Answers</title><link>https://c3rb3r3u5d3d53c.github.io/2023/06/malware-questions/</link><pubDate>Wed, 28 Jun 2023 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2023/06/malware-questions/</guid><description>Introduction This page is dedicated for malware questions in which I address live on stream.
2023-06-28 but no thanks, i&amp;#39;ll pass on your request. I have a question though...
If someone exploits software, firmware, or hardware...does that make them a malware developer?
&amp;mdash; Jonathan Scott (@jonathandata1) June 28, 2023 Q: If someone exploits software, firmware, or hardware&amp;hellip;does that make them a malware developer?
FACT: An exploit is code designed to take advantage of a security flaw or vulnerability, in an application or computer system, typically for malicious purposes.</description></item><item><title>ANGR Python Scripting Cheatsheet</title><link>https://c3rb3r3u5d3d53c.github.io/2023/06/angr-python-cheatsheet/</link><pubDate>Mon, 26 Jun 2023 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2023/06/angr-python-cheatsheet/</guid><description>ANGR Python CheatSheet Symbolic execution is a technique that involves the systematic exploration of all possible paths in a program&amp;rsquo;s code using abstract syntax trees (ASTs).
Assembly as an AST Placeholder
Without Branching In the following example, the assembly code moves the value of 5 into the 32-bit register eax, moves the value 7 into the 32-bit register ebx, then adds both eax and ebx together with the result being stored in eax.</description></item><item><title>Linux TTS Accessibility with Festival</title><link>https://c3rb3r3u5d3d53c.github.io/2023/03/linux-tts-with-festival/</link><pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2023/03/linux-tts-with-festival/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/ae87c0265df83ee84188f3c24245fa06d9fa1b1707ae51c890df772d82eead07.jpg" referrerpolicy="no-referrer">
            </div>Introduction Most Linux distributions do not come with a text-to-speech (TTS) engine installed by default. However, there are several open source TTS engines available for Linux that can be installed easily through the package manager.
I have dysgraphia, which is a neurological disorder that affects a person&rsquo;s ability to write. People with dysgraphia may struggle with writing legibly, organizing their thoughts on paper, and/or maintaining consistent spacing and sizing of letters and words.]]></description></item><item><title>Using GitHub Hugo and Obsidian to build a Portfolio</title><link>https://c3rb3r3u5d3d53c.github.io/2023/02/hugo-and-obsidian/</link><pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2023/02/hugo-and-obsidian/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/6d17ce38769beaefe80d161070ef856bac4604fa0000a3d5fb1470b393bd40c0.png" referrerpolicy="no-referrer">
&lt;/div>Introduction A portfolio website showcases immediate value to employers because it provides a platform to demonstrate your skills, creativity, and achievements. By presenting your best work, you can show employers what you can bring to the table and how you can contribute to their organization. A portfolio website also shows that you are proactive and take pride in your work, which can be attractive to employers who are looking for self-motivated and passionate candidates.</description></item><item><title>Hunting Opaque Predicates with YARA</title><link>https://c3rb3r3u5d3d53c.github.io/2023/02/opaque-predicate-hunting-with-yara/</link><pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2023/02/opaque-predicate-hunting-with-yara/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/4c3144fc208245413dfd03ae14a961cd59e006439fa932f663c9b9af4ef7caac.png" referrerpolicy="no-referrer">
&lt;/div>Introduction Malware tends to obfuscate itself using many different techniques from opaque predicates, garbage code, control flow manipulation with the stack and more. These techniques definitely make analysis more challening for reverse engineers. However, from a detection and hunting standpoint to find interesting samples to reverse engineer we can leverage our knowlege of these techniques to hunt for obfuscated code. In our case today, we will be developing a yara signature to hunt for one specific technique of opaque predicates, there are many variations and situations where this does not match and should only serve as a hunting signatures as more heuristic and programitic approaches for this are better for detection.</description></item><item><title>Fish as a User Shell in Linux</title><link>https://c3rb3r3u5d3d53c.github.io/2023/02/fish-user-shell/</link><pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2023/02/fish-user-shell/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/9c1dde5dfce4c0b161452996e00692e8bad35dbccc23f3a98fcf9d4d1efcef66.png" referrerpolicy="no-referrer">
            </div>Introduction The purpose of this article is to provide reasoning behind why I&rsquo;m a fish shell user and how to I setup fish 🐟 shell on all my Linux machines. Before we begin, we need to understand what fish shell is.
Fish is a Unix shell with a focus on interactivity and usability. Fish is designed to give the user features by default, rather than by configuration. Fish is considered an exotic shell since it does not rigorously adhere to POSIX shell standards, at the discretion of the maintainers.]]></description></item><item><title>Ghidra Python Scripting Cheatsheet</title><link>https://c3rb3r3u5d3d53c.github.io/2023/02/ghidra-python-cheatsheet.en.md/</link><pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2023/02/ghidra-python-cheatsheet.en.md/</guid><description><![CDATA[This is a cheatsheet I use for Ghidra scripting.
NOTE: Some of these functions use each other &#x1f604;
User Input 1 askFile(&#39;Title&#39;, &#39;Okay&#39;).toString() Get Python Bytes from Address 1 2 def get_bytes(address, size): return bytes(map(lambda b: b &amp; 0xff, getBytes(address, size))) Get Section Bytes (Program Tree) 1 2 3 def get_section_bytes(section_name): section = getMemoryBlock(section_name) return get_bytes(section.getStart(), section.getSize()) Get Executable Path 1 currentProgram.getExecutablePath() Get Program Start Address 1 currentProgram.getMinAddress() Get Program End Address 1 currentProgram.]]></description></item><item><title>Hooking C Runtime or libc</title><link>https://c3rb3r3u5d3d53c.github.io/2023/02/hooking-libc.en.md/</link><pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2023/02/hooking-libc.en.md/</guid><description>Introduction A friend at work asked me if we can actively change argc when executing a target program without modifying the target program. I was not sure at the time what the solution would be. However, after some thought; I thought about LD_PRELOAD and using it to hook specific functions. I figured, well it probably won&amp;rsquo;t allow the hooking of libc, but in reality it does. This is of course interesting behavior that can be leveraged for offensive and defensive security research practices.</description></item></channel></rss>