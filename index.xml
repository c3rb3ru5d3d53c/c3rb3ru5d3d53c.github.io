<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Malware Hell</title><link>https://c3rb3r3u5d3d53c.github.io/</link><description>Welcome to Malware Hell</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>c3rb3r3u5d3d53c@gmail.com (c3rb3r3u5d3d53c)</managingEditor><webMaster>c3rb3r3u5d3d53c@gmail.com (c3rb3r3u5d3d53c)</webMaster><lastBuildDate>Sun, 05 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://c3rb3r3u5d3d53c.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Hunting Opaque Predicates with YARA</title><link>https://c3rb3r3u5d3d53c.github.io/2023/02/opaque-predicate-hunting-with-yara/</link><pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2023/02/opaque-predicate-hunting-with-yara/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/4c3144fc208245413dfd03ae14a961cd59e006439fa932f663c9b9af4ef7caac.png" referrerpolicy="no-referrer">
&lt;/div>Introduction Malware tends to obfuscate itself using many different techniques from opaque predicates, garbage code, control flow manipulation with the stack and more. These techniques definitely make analysis more challening for reverse engineers. However, from a detection and hunting standpoint to find interesting samples to reverse engineer we can leverage our knowlege of these techniques to hunt for obfuscated code. In our case today, we will be developing a yara signature to hunt for one specific technique of opaque predicates, there are many variations and situations where this does not match and should only serve as a hunting signatures as more heuristic and programitic approaches for this are better for detection.</description></item><item><title>Fish as a User Shell in Linux</title><link>https://c3rb3r3u5d3d53c.github.io/2023/02/fish-user-shell/</link><pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2023/02/fish-user-shell/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/9c1dde5dfce4c0b161452996e00692e8bad35dbccc23f3a98fcf9d4d1efcef66.png" referrerpolicy="no-referrer">
            </div>Introduction The purpose of this article is to provide reasoning behind why I&rsquo;m a fish shell user and how to I setup fish 🐟 shell on all my Linux machines. Before we begin, we need to understand what fish shell is.
Fish is a Unix shell with a focus on interactivity and usability. Fish is designed to give the user features by default, rather than by configuration. Fish is considered an exotic shell since it does not rigorously adhere to POSIX shell standards, at the discretion of the maintainers.]]></description></item><item><title>Ghidra Python Scripting Cheatsheet</title><link>https://c3rb3r3u5d3d53c.github.io/2023/02/ghidra-python-cheatsheet.en.md/</link><pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2023/02/ghidra-python-cheatsheet.en.md/</guid><description>This is a cheatsheet I use for Ghidra scripting.
NOTE: Some of these functions use each other 😄
Get Python Bytes from Address 1 2 def get_bytes(address, size): return bytes(map(lambda b: b &amp;amp; 0xff, getBytes(address, size))) Get Section Bytes (Program Tree) 1 2 3 def get_section_bytes(section_name): section = getMemoryBlock(section_name) return get_bytes(section.getStart(), section.getSize()) Get Executable Path 1 currentProgram.getExecutablePath() Get Program Start Address 1 currentProgram.getMinAddress() Get Program End Address 1 currentProgram.getMaxAddress() Comments 1 2 3 4 from ghidra.</description></item><item><title>Hooking C Runtime or libc</title><link>https://c3rb3r3u5d3d53c.github.io/2023/02/hooking-libc.en.md/</link><pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2023/02/hooking-libc.en.md/</guid><description>Introduction A friend at work asked me if we can actively change argc when executing a target program without modifying the target program. I was not sure at the time what the solution would be. However, after some thought; I thought about LD_PRELOAD and using it to hook specific functions. I figured, well it probably won&amp;rsquo;t allow the hooking of libc, but in reality it does. This is of course interesting behavior that can be leveraged for offensive and defensive security research practices.</description></item><item><title>Reversing RedLine Stealer</title><link>https://c3rb3r3u5d3d53c.github.io/2022/11/redline-stealer/</link><pubDate>Tue, 29 Nov 2022 21:57:40 +0800</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2022/11/redline-stealer/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/58355ee00525933c00837595236e80804db1188e1b2bf06e20ef315014943039.png" referrerpolicy="no-referrer">
&lt;/div>Situation Muta from SomeOrdinaryGamers uploaded a video on Redline Stealer on Aug 14, 2022, which infected Martin Shkreli.
Key Points Redline Stealer has the ability to communicate with multiple C2 hosts. Redline Stealer has the ability to present a message box to the user upon execution. Redline Stealer communicates with the C2 server using Simple Object Access Protocol (SOAP). Redline Stealer exits if it detects the infected machine is from a near Russian countries.</description></item><item><title>Twitch Streaming Live Chat for OBS</title><link>https://c3rb3r3u5d3d53c.github.io/2022/11/twitch-live-chat/</link><pubDate>Wed, 23 Nov 2022 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2022/11/twitch-live-chat/</guid><description>Twitch Live Stream Chat
1 https://dashboard.twitch.tv/popout/u/&amp;lt;username&amp;gt;/stream-manager/chat?uuid=2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 /* Twitch chat browsersource CSS for OBS Just set the URL as https://www.</description></item><item><title>A Reverse Engineering Guide for Rust Binaries</title><link>https://c3rb3r3u5d3d53c.github.io/2022/08/malware-reversing-rust/</link><pubDate>Thu, 04 Aug 2022 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2022/08/malware-reversing-rust/</guid><description>Introduction The Rust programming language is like rust on a vehicle for malware analysts and reverse engineers. The adoption of the language by malware authors spreads like cancer the longer it is in active development. This is due to convenient static linking and support for many operating systems, yielding a binary with little to no dependencies. These features are excellent for the distribution of malware. Every time we need to reverse engineer a Rust binary, we would rather embrace the sweet release of death.</description></item><item><title>What is a DLL?</title><link>https://c3rb3r3u5d3d53c.github.io/2022/07/what-is-a-dll/</link><pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2022/07/what-is-a-dll/</guid><description>Introduction Hey everybody, it&amp;rsquo;s cerberus and welcome to malware hell. Today we are going to do a whiteboard session on what a DLL is and why it is important to malware reverse engineering and analysis.
Dynamic-link library (DLL) is Microsoft&amp;rsquo;s implementation of the shared library concept in the Microsoft Windows and OS/2 operating systems. These libraries usually have the file extension DLL, OCX (for libraries containing ActiveX controls), or DRV (for legacy system drivers).</description></item><item><title>Reversing Additional Lockbit 3.0 API Hashing</title><link>https://c3rb3r3u5d3d53c.github.io/2022/07/lockbit-api-hashing/</link><pubDate>Wed, 13 Jul 2022 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2022/07/lockbit-api-hashing/</guid><description>I was watching @herrcore&amp;rsquo;s OALabs stream on Lockbit 3.0. After he wrote a utility to decrypt additional data from the ransomware, he noticed one of the buffers was a Portable Executable (PE) file. It had an interesting API hashing routine, we would be reversing for the next stream.
I decided to have a closer look. 😄
Analysis This is an interesting sample, I have not mapped out its full functionality yet.</description></item><item><title>Deobfuscating Scripts</title><link>https://c3rb3r3u5d3d53c.github.io/2022/07/malware-script-deobfuscation/</link><pubDate>Sat, 09 Jul 2022 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2022/07/malware-script-deobfuscation/</guid><description>I reached out on Twitter asking for suggestions on new topics to cover.
One of these topics was on deobfuscation of scripts. This is a great topic as this skill can generally be learned by anyone who understands writing code or scripts. I&amp;rsquo;ll cover more advanced topics as I move forward with these guides.
NOTE: This guide does not cover all aspects of deobfuscation. However, once you have finished reading and practicing the concepts in this guide, you will be able to build some of your own techniques to better expand your skills.</description></item></channel></rss>