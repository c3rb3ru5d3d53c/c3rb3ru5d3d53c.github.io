<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Docs - Category - Malware Hell</title><link>https://c3rb3r3u5d3d53c.github.io/categories/docs/</link><description>Docs - Category - Malware Hell</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>c3rb3r3u5d3d53c@gmail.com (c3rb3r3u5d3d53c)</managingEditor><webMaster>c3rb3r3u5d3d53c@gmail.com (c3rb3r3u5d3d53c)</webMaster><lastBuildDate>Mon, 26 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://c3rb3r3u5d3d53c.github.io/categories/docs/" rel="self" type="application/rss+xml"/><item><title>ANGR Python Scripting Cheatsheet</title><link>https://c3rb3r3u5d3d53c.github.io/2023/06/angr-python-cheatsheet/</link><pubDate>Mon, 26 Jun 2023 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2023/06/angr-python-cheatsheet/</guid><description>ANGR Python CheatSheet Symbolic execution is a technique that involves the systematic exploration of all possible paths in a program&amp;rsquo;s code using abstract syntax trees (ASTs).
Assembly as an AST Placeholder
Without Branching In the following example, the assembly code moves the value of 5 into the 32-bit register eax, moves the value 7 into the 32-bit register ebx, then adds both eax and ebx together with the result being stored in eax.</description></item><item><title>Linux TTS Accessibility with Festival</title><link>https://c3rb3r3u5d3d53c.github.io/2023/03/linux-tts-with-festival/</link><pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2023/03/linux-tts-with-festival/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/ae87c0265df83ee84188f3c24245fa06d9fa1b1707ae51c890df772d82eead07.jpg" referrerpolicy="no-referrer">
            </div>Introduction Most Linux distributions do not come with a text-to-speech (TTS) engine installed by default. However, there are several open source TTS engines available for Linux that can be installed easily through the package manager.
I have dysgraphia, which is a neurological disorder that affects a person&rsquo;s ability to write. People with dysgraphia may struggle with writing legibly, organizing their thoughts on paper, and/or maintaining consistent spacing and sizing of letters and words.]]></description></item><item><title>Using GitHub Hugo and Obsidian to build a Portfolio</title><link>https://c3rb3r3u5d3d53c.github.io/2023/02/hugo-and-obsidian/</link><pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2023/02/hugo-and-obsidian/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/6d17ce38769beaefe80d161070ef856bac4604fa0000a3d5fb1470b393bd40c0.png" referrerpolicy="no-referrer">
&lt;/div>Introduction A portfolio website showcases immediate value to employers because it provides a platform to demonstrate your skills, creativity, and achievements. By presenting your best work, you can show employers what you can bring to the table and how you can contribute to their organization. A portfolio website also shows that you are proactive and take pride in your work, which can be attractive to employers who are looking for self-motivated and passionate candidates.</description></item><item><title>Hunting Opaque Predicates with YARA</title><link>https://c3rb3r3u5d3d53c.github.io/2023/02/opaque-predicate-hunting-with-yara/</link><pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2023/02/opaque-predicate-hunting-with-yara/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/4c3144fc208245413dfd03ae14a961cd59e006439fa932f663c9b9af4ef7caac.png" referrerpolicy="no-referrer">
&lt;/div>Introduction Malware tends to obfuscate itself using many different techniques from opaque predicates, garbage code, control flow manipulation with the stack and more. These techniques definitely make analysis more challening for reverse engineers. However, from a detection and hunting standpoint to find interesting samples to reverse engineer we can leverage our knowlege of these techniques to hunt for obfuscated code. In our case today, we will be developing a yara signature to hunt for one specific technique of opaque predicates, there are many variations and situations where this does not match and should only serve as a hunting signatures as more heuristic and programitic approaches for this are better for detection.</description></item><item><title>Fish as a User Shell in Linux</title><link>https://c3rb3r3u5d3d53c.github.io/2023/02/fish-user-shell/</link><pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2023/02/fish-user-shell/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/9c1dde5dfce4c0b161452996e00692e8bad35dbccc23f3a98fcf9d4d1efcef66.png" referrerpolicy="no-referrer">
            </div>Introduction The purpose of this article is to provide reasoning behind why I&rsquo;m a fish shell user and how to I setup fish 🐟 shell on all my Linux machines. Before we begin, we need to understand what fish shell is.
Fish is a Unix shell with a focus on interactivity and usability. Fish is designed to give the user features by default, rather than by configuration. Fish is considered an exotic shell since it does not rigorously adhere to POSIX shell standards, at the discretion of the maintainers.]]></description></item><item><title>Ghidra Python Scripting Cheatsheet</title><link>https://c3rb3r3u5d3d53c.github.io/2023/02/ghidra-python-cheatsheet.en.md/</link><pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2023/02/ghidra-python-cheatsheet.en.md/</guid><description><![CDATA[This is a cheatsheet I use for Ghidra scripting.
NOTE: Some of these functions use each other 😄
User Input 1 askFile(&#39;Title&#39;, &#39;Okay&#39;).toString() Get Python Bytes from Address 1 2 def get_bytes(address, size): return bytes(map(lambda b: b &amp; 0xff, getBytes(address, size))) Get Section Bytes (Program Tree) 1 2 3 def get_section_bytes(section_name): section = getMemoryBlock(section_name) return get_bytes(section.getStart(), section.getSize()) Get Executable Path 1 currentProgram.getExecutablePath() Get Program Start Address 1 currentProgram.getMinAddress() Get Program End Address 1 currentProgram.]]></description></item><item><title>Hooking C Runtime or libc</title><link>https://c3rb3r3u5d3d53c.github.io/2023/02/hooking-libc.en.md/</link><pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2023/02/hooking-libc.en.md/</guid><description>Introduction A friend at work asked me if we can actively change argc when executing a target program without modifying the target program. I was not sure at the time what the solution would be. However, after some thought; I thought about LD_PRELOAD and using it to hook specific functions. I figured, well it probably won&amp;rsquo;t allow the hooking of libc, but in reality it does. This is of course interesting behavior that can be leveraged for offensive and defensive security research practices.</description></item><item><title>Live Streaming Cheat Sheet</title><link>https://c3rb3r3u5d3d53c.github.io/2022/11/livestream/</link><pubDate>Wed, 23 Nov 2022 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2022/11/livestream/</guid><description>Twitch Live Stream Chat
1 https://dashboard.twitch.tv/popout/u/&amp;lt;username&amp;gt;/stream-manager/chat?uuid=2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 /* Twitch chat browsersource CSS for OBS Just set the URL as https://www.</description></item><item><title>A Reverse Engineering Guide for Rust Binaries</title><link>https://c3rb3r3u5d3d53c.github.io/2022/08/malware-reversing-rust/</link><pubDate>Thu, 04 Aug 2022 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2022/08/malware-reversing-rust/</guid><description>Introduction The Rust programming language is like rust on a vehicle for malware analysts and reverse engineers. The adoption of the language by malware authors spreads like cancer the longer it is in active development. This is due to convenient static linking and support for many operating systems, yielding a binary with little to no dependencies. These features are excellent for the distribution of malware. Every time we need to reverse engineer a Rust binary, we would rather embrace the sweet release of death.</description></item><item><title>What is a DLL?</title><link>https://c3rb3r3u5d3d53c.github.io/2022/07/what-is-a-dll/</link><pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2022/07/what-is-a-dll/</guid><description>Introduction Hey everybody, it&amp;rsquo;s cerberus and welcome to malware hell. Today we are going to do a whiteboard session on what a DLL is and why it is important to malware reverse engineering and analysis.
Dynamic-link library (DLL) is Microsoft&amp;rsquo;s implementation of the shared library concept in the Microsoft Windows and OS/2 operating systems. These libraries usually have the file extension DLL, OCX (for libraries containing ActiveX controls), or DRV (for legacy system drivers).</description></item></channel></rss>