<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Malware - Category - Malware Hell</title><link>https://c3rb3r3u5d3d53c.github.io/categories/malware/</link><description>Malware - Category - Malware Hell</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>c3rb3r3u5d3d53c@gmail.com (c3rb3r3u5d3d53c)</managingEditor><webMaster>c3rb3r3u5d3d53c@gmail.com (c3rb3r3u5d3d53c)</webMaster><lastBuildDate>Tue, 29 Nov 2022 21:57:40 +0800</lastBuildDate><atom:link href="https://c3rb3r3u5d3d53c.github.io/categories/malware/" rel="self" type="application/rss+xml"/><item><title>Reversing RedLine Stealer</title><link>https://c3rb3r3u5d3d53c.github.io/2022/11/redline-stealer/</link><pubDate>Tue, 29 Nov 2022 21:57:40 +0800</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2022/11/redline-stealer/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/58355ee00525933c00837595236e80804db1188e1b2bf06e20ef315014943039.png" referrerpolicy="no-referrer">
&lt;/div>Situation Muta from SomeOrdinaryGamers uploaded a video on Redline Stealer on Aug 14, 2022, which infected Martin Shkreli. The purpose of this analysis is to destroy Redline Stealer (specifically the version that infected Martin Shkreli), beginning to end. We will be writing our own configuration extractor, compiling our own version of Redline Stealer in Visual Studio (without source code), write detection signature and tear apart every aspect of the attack chain.</description></item><item><title>Reversing Additional Lockbit 3.0 API Hashing</title><link>https://c3rb3r3u5d3d53c.github.io/2022/07/lockbit-api-hashing/</link><pubDate>Wed, 13 Jul 2022 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2022/07/lockbit-api-hashing/</guid><description>I was watching @herrcore&amp;rsquo;s OALabs stream on Lockbit 3.0. After he wrote a utility to decrypt additional data from the ransomware, he noticed one of the buffers was a Portable Executable (PE) file. It had an interesting API hashing routine, we would be reversing for the next stream.
I decided to have a closer look. üòÑ
Analysis This is an interesting sample, I have not mapped out its full functionality yet.</description></item><item><title>Making Fun of Your APT Malware - Bitter APT Using ZxxZ Backdoor to Target Pakistan Public Accounts Committee</title><link>https://c3rb3r3u5d3d53c.github.io/2022/06/bitter-apt-zxxz-backdoor/</link><pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2022/06/bitter-apt-zxxz-backdoor/</guid><description>Introduction Bitter APT (T-APT-17/APT-C-08/Orange Yali) is a group known to operate in South Asia and is suspected to be an Indian üáÆ‚Äçüá≥ APT. They primarialy target Pakistan üáµ‚Äçüá∞, Saudi Arabia üá∏‚Äçüá¶ and China.
Analysis This will be an indepth analysis of Bitter APT&amp;rsquo;s backdoor named ZxxZ. We will cover almost every aspect of the attack chain including, exploit shellcode analysis, building our own C2 server to communicate with the malware and writing detection signatures for the community.</description></item><item><title>Qakbot/Qbot Downloader</title><link>https://c3rb3r3u5d3d53c.github.io/2020/02/qakbot-downloader/</link><pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2020/02/qakbot-downloader/</guid><description>Situation: I came across an interesting obfuscated sample on Any.Run.
Metadata: db2614353dc6c29dbe323dbeafe6b781 Analysis: The sample has a ton of comments making the file size total around ~4mb.
This was easily parsed out with sed 's/^\x27//'.
The next step is to idenify where code is evaluated which was here exECuTeglOBal sHLW(iDxY).
Changed this to WScript.Echo then also had to backtrack for a variable which defined before the evaluation.
This variable contained an array of strings which contain object names and the downloader URL, User-Agent etc.</description></item><item><title>ViperSoftx Vjw0rm Variant</title><link>https://c3rb3r3u5d3d53c.github.io/2020/02/vjw0rm-vipersoftx-variant/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2020/02/vjw0rm-vipersoftx-variant/</guid><description>Situation: While watching Any.Run for interesting scripts to deobfuscate, I noted that its traffic did appear to be like other variants of vjw0rm however wasn&amp;rsquo;t sure of what else it could do.
Metadata: Sample: 3236312b9dc691dd8b9214f08ff01e5d Analysis The obfuscation techniques are pretty standard, the first stage deobfuscates base64 data then performs mathematic operations on it (I don&amp;rsquo;t give a crap how they work I just let it do the heavy lifting for me), interestingly the base64 string is reversed.</description></item><item><title>Mr. Robot Variant of Vjw0rm</title><link>https://c3rb3r3u5d3d53c.github.io/2020/02/vjw0rm-mr-robot-variant/</link><pubDate>Sat, 01 Feb 2020 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2020/02/vjw0rm-mr-robot-variant/</guid><description><![CDATA[I was monitoring Any.Run when a .js file peeked my interest due to the limited network traffic.
Analysis Metadata:
Name: 1.js MD5 : 3f438e857c45a4812dbfa331fd3b8011 The first stage decrypts a long Unicode string then calls eval on its result as seen in Figure 1.
1 2 3 4 5 6 7 8 9 10 11 function y(o,h) { var t;var s=&#34;&#34;; var d=(o+&#34;&#34;).split(&#34;&#34;); for (var i=0;i&lt;d.length;i++){ t=d[i].charCodeAt(0); s+=String.fromCharCode(256-+t+(+h)); } return s; } WScript.]]></description></item></channel></rss>