<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>reversing on Malware Hell</title><link>https://c3rb3ru5d3d53c.github.io/tags/reversing/</link><description>Recent content in reversing on Malware Hell</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2022 &lt;a href="https://twitter.com/c3rb3ru5d3d53c">c3rb3ru5d3d53c&lt;/a></copyright><lastBuildDate>Thu, 04 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://c3rb3ru5d3d53c.github.io/tags/reversing/index.xml" rel="self" type="application/rss+xml"/><item><title>A Reverse Engineering Guide for Rust Binaries</title><link>https://c3rb3ru5d3d53c.github.io/documents/malware-reversing-rust/</link><pubDate>Thu, 04 Aug 2022 00:00:00 +0000</pubDate><guid>https://c3rb3ru5d3d53c.github.io/documents/malware-reversing-rust/</guid><description>Introduction The Rust programming language is like rust on a vehicle for malware analysts and reverse engineers. The adoption of the language by malware authors spreads like cancer the longer it is in active development. This is due to convenient static linking and support for many operating systems, yielding a binary with little to no dependencies. These features are excellent for the distribution of malware. Every time we need to reverse engineer a Rust binary, we would rather embrace the sweet release of death.</description></item><item><title>Reversing Additional Lockbit 3.0 API Hashing</title><link>https://c3rb3ru5d3d53c.github.io/malware-blog/lockbit-v3-api-hashing/</link><pubDate>Wed, 13 Jul 2022 00:00:00 +0000</pubDate><guid>https://c3rb3ru5d3d53c.github.io/malware-blog/lockbit-v3-api-hashing/</guid><description>I was watching @herrcore&amp;rsquo;s OALabs stream on Lockbit 3.0. After he wrote a utility to decrypt additional data from the ransomware, he noticed one of the buffers was a Portable Executable (PE) file. It had an interesting API hashing routine, we would be reversing for the next stream.
I decided to have a closer look. üòÑ
Analysis This is an interesting sample, I have not mapped out its full functionality yet.
However, I was able to get a decent amount of reversing done, which should give us more of an insight.</description></item><item><title>Making Fun of Your APT Malware - Bitter APT Using ZxxZ Backdoor to Target Pakistan Public Accounts Committee</title><link>https://c3rb3ru5d3d53c.github.io/malware-blog/2022-07-04-bitter-apt-zxxz-backdoor/</link><pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate><guid>https://c3rb3ru5d3d53c.github.io/malware-blog/2022-07-04-bitter-apt-zxxz-backdoor/</guid><description>Introduction Bitter APT (T-APT-17/APT-C-08/Orange Yali) is a group known to operate in South Asia and is suspected to be an Indian üáÆ‚Äçüá≥ APT. They primarialy target Pakistan üáµ‚Äçüá∞, Saudi Arabia üá∏‚Äçüá¶ and China.
Analysis This will be an indepth analysis of Bitter APT&amp;rsquo;s backdoor named ZxxZ. We will cover almost every aspect of the attack chain including, exploit shellcode analysis, building our own C2 server to communicate with the malware and writing detection signatures for the community.</description></item></channel></rss>