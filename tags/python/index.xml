<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Python - Tag - Malware Hell</title><link>https://c3rb3r3u5d3d53c.github.io/tags/python/</link><description>Python - Tag - Malware Hell</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>c3rb3r3u5d3d53c@gmail.com (c3rb3r3u5d3d53c)</managingEditor><webMaster>c3rb3r3u5d3d53c@gmail.com (c3rb3r3u5d3d53c)</webMaster><lastBuildDate>Mon, 26 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://c3rb3r3u5d3d53c.github.io/tags/python/" rel="self" type="application/rss+xml"/><item><title>ANGR Python Scripting Cheatsheet</title><link>https://c3rb3r3u5d3d53c.github.io/2023/06/angr-python-cheatsheet/</link><pubDate>Mon, 26 Jun 2023 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2023/06/angr-python-cheatsheet/</guid><description>ANGR Python CheatSheet Symbolic execution is a technique that involves the systematic exploration of all possible paths in a program&amp;rsquo;s code using abstract syntax trees (ASTs).
Assembly as an AST Placeholder
Without Branching In the following example, the assembly code moves the value of 5 into the 32-bit register eax, moves the value 7 into the 32-bit register ebx, then adds both eax and ebx together with the result being stored in eax.</description></item></channel></rss>