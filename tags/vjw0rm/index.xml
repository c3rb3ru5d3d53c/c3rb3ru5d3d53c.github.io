<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>vjw0rm on Malware Hell</title><link>https://c3rb3ru5d3d53c.github.io/tags/vjw0rm/</link><description>Recent content in vjw0rm on Malware Hell</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2022 &lt;a href="https://twitter.com/c3rb3ru5d3d53c">c3rb3ru5d3d53c&lt;/a></copyright><lastBuildDate>Mon, 10 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://c3rb3ru5d3d53c.github.io/tags/vjw0rm/index.xml" rel="self" type="application/rss+xml"/><item><title>ViperSoftx Vjw0rm Variant</title><link>https://c3rb3ru5d3d53c.github.io/malware-blog/2020-02-10-vjw0rm-vipersoftx-variant/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><guid>https://c3rb3ru5d3d53c.github.io/malware-blog/2020-02-10-vjw0rm-vipersoftx-variant/</guid><description>Situation:
While watching Any.Run for interesting scripts to deobfuscate, I noted that its traffic did appear to be like other variants of vjw0rm however wasn&amp;rsquo;t sure of what else it could do.
Metadata:
Sample: 3236312b9dc691dd8b9214f08ff01e5d Analysis
The obfuscation techniques are pretty standard, the first stage deobfuscates base64 data then performs mathematic operations on it (I don&amp;rsquo;t give a crap how they work I just let it do the heavy lifting for me), interestingly the base64 string is reversed.</description></item><item><title>Mr. Robot Variant of Vjw0rm</title><link>https://c3rb3ru5d3d53c.github.io/malware-blog/2020-02-01-vjw0rm-mr-robot-variant/</link><pubDate>Sat, 01 Feb 2020 00:00:00 +0000</pubDate><guid>https://c3rb3ru5d3d53c.github.io/malware-blog/2020-02-01-vjw0rm-mr-robot-variant/</guid><description>I was monitoring Any.Run when a .js file peeked my interest due to the limited network traffic.
Analysis Metadata:
Name: 1.js MD5 : 3f438e857c45a4812dbfa331fd3b8011 The first stage decrypts a long Unicode string then calls eval on its result as seen in Figure 1.
function y(o,h) { var t;var s=&amp;quot;&amp;quot;; var d=(o+&amp;quot;&amp;quot;).split(&amp;quot;&amp;quot;); for (var i=0;i&amp;lt;d.length;i++){ t=d[i].charCodeAt(0); s+=String.fromCharCode(256-+t+(+h)); } return s; } WScript.Sleep(10000); eval(&amp;quot;eval(y(\&amp;quot;&amp;lt;long_unicode_string&amp;gt;\&amp;quot;&amp;quot;); Figure 1: Deobfuscation routine
When threat actor(s) use eval, most of the time I can easily bypass this with replacing it with console.</description></item></channel></rss>