<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Vjw0rm - Tag - Malware Hell</title><link>https://c3rb3r3u5d3d53c.github.io/tags/vjw0rm/</link><description>Vjw0rm - Tag - Malware Hell</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>c3rb3r3u5d3d53c@gmail.com (c3rb3r3u5d3d53c)</managingEditor><webMaster>c3rb3r3u5d3d53c@gmail.com (c3rb3r3u5d3d53c)</webMaster><lastBuildDate>Mon, 10 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://c3rb3r3u5d3d53c.github.io/tags/vjw0rm/" rel="self" type="application/rss+xml"/><item><title>ViperSoftx Vjw0rm Variant</title><link>https://c3rb3r3u5d3d53c.github.io/2020/02/vjw0rm-vipersoftx-variant/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2020/02/vjw0rm-vipersoftx-variant/</guid><description>Situation: While watching Any.Run for interesting scripts to deobfuscate, I noted that its traffic did appear to be like other variants of vjw0rm however wasn&amp;rsquo;t sure of what else it could do.
Metadata: Sample: 3236312b9dc691dd8b9214f08ff01e5d Analysis The obfuscation techniques are pretty standard, the first stage deobfuscates base64 data then performs mathematic operations on it (I don&amp;rsquo;t give a crap how they work I just let it do the heavy lifting for me), interestingly the base64 string is reversed.</description></item><item><title>Mr. Robot Variant of Vjw0rm</title><link>https://c3rb3r3u5d3d53c.github.io/2020/02/vjw0rm-mr-robot-variant/</link><pubDate>Sat, 01 Feb 2020 00:00:00 +0000</pubDate><author>c3rb3ru5d3d53c</author><guid>https://c3rb3r3u5d3d53c.github.io/2020/02/vjw0rm-mr-robot-variant/</guid><description><![CDATA[I was monitoring Any.Run when a .js file peeked my interest due to the limited network traffic.
Analysis Metadata:
Name: 1.js MD5 : 3f438e857c45a4812dbfa331fd3b8011 The first stage decrypts a long Unicode string then calls eval on its result as seen in Figure 1.
1 2 3 4 5 6 7 8 9 10 11 function y(o,h) { var t;var s=&#34;&#34;; var d=(o+&#34;&#34;).split(&#34;&#34;); for (var i=0;i&lt;d.length;i++){ t=d[i].charCodeAt(0); s+=String.fromCharCode(256-+t+(+h)); } return s; } WScript.]]></description></item></channel></rss>