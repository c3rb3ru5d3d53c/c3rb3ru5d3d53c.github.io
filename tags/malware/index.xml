<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>malware on Malware Hell</title><link>https://c3rb3ru5d3d53c.github.io/tags/malware/</link><description>Recent content in malware on Malware Hell</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2022 &lt;a href="https://twitter.com/c3rb3ru5d3d53c">c3rb3ru5d3d53c&lt;/a></copyright><lastBuildDate>Thu, 04 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://c3rb3ru5d3d53c.github.io/tags/malware/index.xml" rel="self" type="application/rss+xml"/><item><title>A Reverse Engineering Guide for Rust Binaries</title><link>https://c3rb3ru5d3d53c.github.io/documents/malware-reversing-rust/</link><pubDate>Thu, 04 Aug 2022 00:00:00 +0000</pubDate><guid>https://c3rb3ru5d3d53c.github.io/documents/malware-reversing-rust/</guid><description>Introduction The Rust programming language is like rust on a vehicle for malware analysts and reverse engineers. The adoption of the language by malware authors spreads like cancer the longer it is in active development. This is due to convenient static linking and support for many operating systems, yielding a binary with little to no dependencies. These features are excellent for the distribution of malware. Every time we need to reverse engineer a Rust binary, we would rather embrace the sweet release of death.</description></item><item><title>What is a DLL?</title><link>https://c3rb3ru5d3d53c.github.io/documents/what-is-a-dll/</link><pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate><guid>https://c3rb3ru5d3d53c.github.io/documents/what-is-a-dll/</guid><description>Introduction Hey everybody, it&amp;rsquo;s cerberus and welcome to malware hell. Today we are going to do a whiteboard session on what a DLL is and why it is important to malware reverse engineering and analysis.
Dynamic-link library (DLL) is Microsoft&amp;rsquo;s implementation of the shared library concept in the Microsoft Windows and OS/2 operating systems. These libraries usually have the file extension DLL, OCX (for libraries containing ActiveX controls), or DRV (for legacy system drivers).
Describe PE File Format Explain RVAs Explain Dynamic Linking Demonstrate DLL usage Dynamic Linking Dynamic linking means that the code for some external routines is located and loaded when the program is first run.</description></item><item><title>Reversing Additional Lockbit 3.0 API Hashing</title><link>https://c3rb3ru5d3d53c.github.io/malware-blog/lockbit-v3-api-hashing/</link><pubDate>Wed, 13 Jul 2022 00:00:00 +0000</pubDate><guid>https://c3rb3ru5d3d53c.github.io/malware-blog/lockbit-v3-api-hashing/</guid><description>I was watching @herrcore&amp;rsquo;s OALabs stream on Lockbit 3.0. After he wrote a utility to decrypt additional data from the ransomware, he noticed one of the buffers was a Portable Executable (PE) file. It had an interesting API hashing routine, we would be reversing for the next stream.
I decided to have a closer look. üòÑ
Analysis This is an interesting sample, I have not mapped out its full functionality yet.
However, I was able to get a decent amount of reversing done, which should give us more of an insight.</description></item><item><title>Deobfuscating Scripts</title><link>https://c3rb3ru5d3d53c.github.io/documents/deobfuscating-scripts/</link><pubDate>Sat, 09 Jul 2022 00:00:00 +0000</pubDate><guid>https://c3rb3ru5d3d53c.github.io/documents/deobfuscating-scripts/</guid><description>I reached out on Twitter asking for suggestions on new topics to cover.
One of these topics was on deobfuscation of scripts. This is a great topic as this skill can generally be learned by anyone who understands writing code or scripts. I&amp;rsquo;ll cover more advanced topics as I move forward with these guides.
NOTE: This guide does not cover all aspects of deobfuscation. However, once you have finished reading and practicing the concepts in this guide, you will be able to build some of your own techniques to better expand your skills.</description></item><item><title>Handling Malware Samples</title><link>https://c3rb3ru5d3d53c.github.io/documents/malware-sample-handling/</link><pubDate>Thu, 07 Jul 2022 00:00:00 +0000</pubDate><guid>https://c3rb3ru5d3d53c.github.io/documents/malware-sample-handling/</guid><description>When you are first starting out in malware analysis or reverse engineering, it can be a very nerve racking experience to deal with malware samples. You might always have that little voice in your head thinking&amp;hellip;
What if I double click by accident?
What if I press ENTER when I was not supposed to?
What if the malware breaks out of the VM?
Malware is bad
You don&amp;rsquo;t want to be infected, do you?
If you have these little voices in your head, you are not alone.</description></item><item><title>Malware Analysis and Reverse Engineering Workflow</title><link>https://c3rb3ru5d3d53c.github.io/documents/malware-analysis-reversing-workflow/</link><pubDate>Wed, 06 Jul 2022 00:00:00 +0000</pubDate><guid>https://c3rb3ru5d3d53c.github.io/documents/malware-analysis-reversing-workflow/</guid><description>I have noticed that there is a lot of material on individual parts of the malware analysis and reverse engineering process. However, they do not cover really what someone&amp;rsquo;s workflow is from start to finish. This guide will be an overview of my general workflow.
Prerequsites Ensure you have finished setting up your malware lab This guide is not how everyone does it, everyone will refine their own workflow, which works best for them overtime. Methodology When working on malware it is good to have a methodology to guide your operations.</description></item><item><title>Making Fun of Your APT Malware - Bitter APT Using ZxxZ Backdoor to Target Pakistan Public Accounts Committee</title><link>https://c3rb3ru5d3d53c.github.io/malware-blog/2022-07-04-bitter-apt-zxxz-backdoor/</link><pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate><guid>https://c3rb3ru5d3d53c.github.io/malware-blog/2022-07-04-bitter-apt-zxxz-backdoor/</guid><description>Introduction Bitter APT (T-APT-17/APT-C-08/Orange Yali) is a group known to operate in South Asia and is suspected to be an Indian üáÆ‚Äçüá≥ APT. They primarialy target Pakistan üáµ‚Äçüá∞, Saudi Arabia üá∏‚Äçüá¶ and China.
Analysis This will be an indepth analysis of Bitter APT&amp;rsquo;s backdoor named ZxxZ. We will cover almost every aspect of the attack chain including, exploit shellcode analysis, building our own C2 server to communicate with the malware and writing detection signatures for the community.</description></item><item><title>CheatSheet</title><link>https://c3rb3ru5d3d53c.github.io/documents/cheatsheet/</link><pubDate>Fri, 24 Jun 2022 00:00:00 +0000</pubDate><guid>https://c3rb3ru5d3d53c.github.io/documents/cheatsheet/</guid><description>SHA256 Files in Folder find . -maxdepth 1 -type f | while read i; mv $i (sha256sum $i | grep -Po '^[a-f0-9]+'); end Download Hashes from Clipboard xclip -o -s -c | xargs -I {} echo &amp;quot;vt download {}&amp;quot; | parallel -j 8 {} Binlex Top 10 Traits find samples/ -type f | while read i; binlex -i $i \| jq -r 'trait' | sort | uniq; end | sort | uniq -c | sort -rn | head -10 Capture PCAP tshark -i lo -F libpcap -w (date +&amp;quot;%Y-%m-%d&amp;quot;).</description></item><item><title>Malware Analysis for Beginners</title><link>https://c3rb3ru5d3d53c.github.io/documents/malware-analysis-beginner-guide/</link><pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate><guid>https://c3rb3ru5d3d53c.github.io/documents/malware-analysis-beginner-guide/</guid><description>Hello everyone, malware analysis is a hot topic lately as the threats we work against in the cybersecurity industry become more advanced with each passing day. This creates demand for these types of skills in the industry. I&amp;rsquo;ve mentored and taught many malware analysts and what I&amp;rsquo;ve learned from this experience do not align with certifications. Although certifications are helpful, they are not what I&amp;rsquo;d recommend starting with from scratch. This guide aims to get you started in malware analysis without having to pay anyone any money.</description></item><item><title>KVM Malware Lab Guide</title><link>https://c3rb3ru5d3d53c.github.io/documents/kvm-malware-lab/</link><pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate><guid>https://c3rb3ru5d3d53c.github.io/documents/kvm-malware-lab/</guid><description>This is my guide for setting up your very own malware lab using KVM.
Before you start, this guide assumes you have an AirVPN subscription or another equivalent one, which provides a .ovpn file.
NOTE: I like to have internet enabled on my analysis VMs and this comes with extra security considerations and potential risk if you do not perform the setup correctly. It is recommended that you have your KVM host machine on a DMZ.</description></item><item><title>Qakbot/QBot Downloader</title><link>https://c3rb3ru5d3d53c.github.io/malware-blog/2020-02-12-qakbot-downloader/</link><pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate><guid>https://c3rb3ru5d3d53c.github.io/malware-blog/2020-02-12-qakbot-downloader/</guid><description>Situation:
I came across an interesting obfuscated sample on Any.Run.
Metadata:
db2614353dc6c29dbe323dbeafe6b781 Analysis:
The sample has a ton of comments making the file size total around ~4mb.
This was easily parsed out with sed &amp;rsquo;s/^\x27//&amp;rsquo;.
The next step is to idenify where code is evaluated which was here exECuTeglOBal sHLW(iDxY).
Changed this to WScript.Echo then also had to backtrack for a variable which defined before the evaluation.
This variable contained an array of strings which contain object names and the downloader URL, User-Agent etc.</description></item><item><title>ViperSoftx Vjw0rm Variant</title><link>https://c3rb3ru5d3d53c.github.io/malware-blog/2020-02-10-vjw0rm-vipersoftx-variant/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><guid>https://c3rb3ru5d3d53c.github.io/malware-blog/2020-02-10-vjw0rm-vipersoftx-variant/</guid><description>Situation:
While watching Any.Run for interesting scripts to deobfuscate, I noted that its traffic did appear to be like other variants of vjw0rm however wasn&amp;rsquo;t sure of what else it could do.
Metadata:
Sample: 3236312b9dc691dd8b9214f08ff01e5d Analysis
The obfuscation techniques are pretty standard, the first stage deobfuscates base64 data then performs mathematic operations on it (I don&amp;rsquo;t give a crap how they work I just let it do the heavy lifting for me), interestingly the base64 string is reversed.</description></item><item><title>Mr. Robot Variant of Vjw0rm</title><link>https://c3rb3ru5d3d53c.github.io/malware-blog/2020-02-01-vjw0rm-mr-robot-variant/</link><pubDate>Sat, 01 Feb 2020 00:00:00 +0000</pubDate><guid>https://c3rb3ru5d3d53c.github.io/malware-blog/2020-02-01-vjw0rm-mr-robot-variant/</guid><description>I was monitoring Any.Run when a .js file peeked my interest due to the limited network traffic.
Analysis Metadata:
Name: 1.js MD5 : 3f438e857c45a4812dbfa331fd3b8011 The first stage decrypts a long Unicode string then calls eval on its result as seen in Figure 1.
function y(o,h) { var t;var s=&amp;quot;&amp;quot;; var d=(o+&amp;quot;&amp;quot;).split(&amp;quot;&amp;quot;); for (var i=0;i&amp;lt;d.length;i++){ t=d[i].charCodeAt(0); s+=String.fromCharCode(256-+t+(+h)); } return s; } WScript.Sleep(10000); eval(&amp;quot;eval(y(\&amp;quot;&amp;lt;long_unicode_string&amp;gt;\&amp;quot;&amp;quot;); Figure 1: Deobfuscation routine
When threat actor(s) use eval, most of the time I can easily bypass this with replacing it with console.</description></item></channel></rss>